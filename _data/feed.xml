<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:angelolloqui.com,2005:/blog/feed?page=1&amp;per_page=100</id>
  <link rel="alternate" type="text/html" href="http://angelolloqui.com"/>
  <link rel="self" type="application/atom+xml" href="http://angelolloqui.com/blog/feed?page=1&amp;per_page=100"/>
  <title>Angel G. Olloqui Blog</title>
  <updated>2016-10-18T11:30:34Z</updated>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/38</id>
    <published>2016-10-18T11:30:34Z</published>
    <updated>2017-02-04T10:27:03Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/38-Swift-vs-Kotlin-for-real-iOS-Android-apps"/>
    <title>Swift vs Kotlin for real iOS/Android apps</title>
    <content type="html">&lt;div&gt;
	&lt;a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html"&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://kotlinlang.org/docs/reference/"&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/a&gt; are two great languages for iOS and Android development respectively. They both have very &lt;strong&gt;modern features and syntax&lt;/strong&gt; that can help enormously to build native apps. But, how do they both compare to each other? Are they similar? Can we reuse more code between platforms if we adopt them in our projects?&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Those are the questions we will explore in this post together with some real app code examples implementing the same features in both languages.&lt;/div&gt;
&lt;!--more--&gt;
&lt;h3&gt;
	Side to side&lt;/h3&gt;
&lt;div&gt;
	As commented, both languages are very similar. In fact, they are so similar that&lt;strong&gt; I will focus on the differences&lt;/strong&gt; rather than the similarities in this post. Before exploring the code samples, let&amp;rsquo;s cover &lt;strong&gt;the most relevant ones&lt;/strong&gt; that will pop up when translating between them:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Swift Enums are more powerful&lt;/strong&gt;: In Swift, enums are very powerful and first-class type. They can contain different associated values per case (discrete union types), computed properties and most of the features of &lt;tt&gt;structs&lt;/tt&gt;. Because of that, it is frequent to see patterns like &lt;a href="https://www.natashatherobot.com/swift-generics-box/"&gt;the &lt;tt&gt;Result&lt;/tt&gt;&amp;nbsp;enum&lt;/a&gt;&amp;nbsp;that are not common in Kotlin due to language limitations (&lt;em&gt;UPDATE: A similar pattern can be implemented in Kotlin by &lt;a href="https://kotlinlang.org/docs/reference/classes.html#sealed-classes"&gt;using &lt;tt&gt;sealed class&lt;/tt&gt; instead of &lt;tt&gt;enum&lt;/tt&gt;&lt;/a&gt;, but it is more complicated that the Swift counterpart&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Swift has no &lt;tt&gt;data class&lt;/tt&gt;&lt;/strong&gt;: One interesting construction in Kotlin is &lt;tt&gt;data class&lt;/tt&gt;. It allows you to declare containers of information that automatically implement things like equality and copying. Very common pattern when dealing with plain objects that has no counterpart in Swift.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Swift does not have delegated classes or delegated properties&lt;/strong&gt;: A very interesting feature of Kotlin are delegated classes and properties. With them, you can forward invocation of methods to another class automatically, or define behaviors for properties such as &lt;tt&gt;lazy&lt;/tt&gt;, &lt;tt&gt;obsrvable&lt;/tt&gt;, etc. You can even create your own property delegates. In Swift, things like &lt;tt&gt;lazy&lt;/tt&gt;&amp;nbsp;are modifiers implemented in the language, so that means that you can not create your own but you are limited to the ones provided.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Swift does not allow annotations&lt;/strong&gt;: Coming from the Java world, Kotlin has full support for annotations. However, in Swift that is not considered at all, so annotations like &lt;tt&gt;@Inject&lt;/tt&gt;&amp;nbsp;or &lt;tt&gt;@Test&lt;/tt&gt;&amp;nbsp;that are so common in Java libraries do not have any counterpart in Swift.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Kotlin classes are final by default&lt;/strong&gt;: Kotlin classes are by default closed for extension, so you have to add &lt;tt&gt;open&lt;/tt&gt;&amp;nbsp;in any class you expect to be extended with inheritance.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Kotlin has no &lt;tt&gt;struct&lt;/tt&gt;&amp;nbsp;or passing data by value&lt;/strong&gt;: In Swift you can decide whether to use a &lt;tt&gt;class&lt;/tt&gt;&amp;nbsp;or a &lt;tt&gt;struct&lt;/tt&gt;&amp;nbsp;for your data. The decision is not trivial, and results in different implementation details. Structs are always passed by value, meaning that every time you call a method with it, return a struct, assign a struct,... the values are actually copied to the new variable, and any modification will only affect the modified variable and not the others. Besides that, structs do not allow inheritance, so they tend to be a perfect candidate for data classes. In Kotlin, there is no &lt;tt&gt;struct&lt;/tt&gt;&amp;nbsp;type and the language follows the same pattern than Java, where basic types (int, float, boolean,...) are passed by value, but the rest are passed by reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Kotlin has no tuples&lt;/strong&gt;: Tuples are not implemented in Kotlin, so you will find yourself creating small &lt;tt&gt;data classes&lt;/tt&gt;&amp;nbsp;as counterpart for Swift tuples.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Kotlin has no &lt;tt&gt;typealias&lt;/tt&gt;&lt;/strong&gt;: I just found out that it is in the roadmap for 1.1 but at the moment (Kotlin 1.0.4) there is no &lt;tt&gt;typealias&lt;/tt&gt;, so patterns like the one I explained&amp;nbsp;&lt;a href="http://angelolloqui.com/blog/37-Swifty-names-for-modules-protocols-and-implementation-classes"&gt;in this previous post&lt;/a&gt;&amp;nbsp;are not possible yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Kotlin has no &lt;tt&gt;guard&lt;/tt&gt;&amp;nbsp;statement&lt;/strong&gt;: In Swift, &lt;tt&gt;guard&lt;/tt&gt;&amp;nbsp;statements are a more expressive way for checking conditions of some function than the standard &lt;tt&gt;if&lt;/tt&gt;&amp;nbsp;sentence. In Kotlin, you need to stay with the &lt;tt&gt;if&lt;/tt&gt;&amp;nbsp;check and reverse the condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	There are also other differences when comparing both languages. Things like exceptions, pattern matching, constructors, &lt;tt&gt;if let&lt;/tt&gt;&amp;nbsp;sentences, loop iteration, casting,&amp;hellip; work in slightly different ways, but in general they follow the same principles and they have very similar syntaxes.&lt;/div&gt;
&lt;div&gt;
	One last difference to mention when working for iOS/Android is that the Operating System offers different &lt;strong&gt;runtime environments and libraries to developers&lt;/strong&gt;. A couple of points to highlight:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Memory management&lt;/strong&gt;: Kotlin assumes the existence of a Garbage Collector (provided by the Dalvik/Art&amp;nbsp;runtime in Android) and therefore memory management is transparent for the developer. On the other hand, Swift manages memory with a Reference Count approach (ARC) so you will need to think about memory ownership and retain cycles.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;System frameworks and libraries are very different&lt;/strong&gt;: When accessing system frameworks or libraries like networking, UI, etc. they both offer very different APIs so the resulting code will look pretty different.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	The list of differences might look long, but trust me, the amount of features shared by both is much longer. I suggest you read &lt;a href="https://nilhcem.github.io/swift-is-like-kotlin/"&gt;swift-is-like-kotlin&lt;/a&gt; for an extensive comparison of different features of the languages side to side to get the feeling about it and some of the syntactic differences.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	MVVM + Rx + Coordinators&lt;/h3&gt;
&lt;div&gt;
	OK, so we have some differences in the language and big differences in the system frameworks and libraries, especially in UI. But can we still reuse code? And can we increase code reuse somehow?&lt;/div&gt;
&lt;div&gt;
	The answer is yes, we can still reuse the code, and yes, we can increase code reuse by properly &lt;strong&gt;splitting responsibilities and isolating dependencies&lt;/strong&gt;. In other words, we need to carefully chose a proper SOLID app architecture, because a wrong choice will highly limit the amount of code reused.&lt;/div&gt;
&lt;div&gt;
	There are multiple architectural patterns out there (MVC, MVP, MVVM, VIPER, FLUX,...), each of them with their own benefits/drawbacks and best usage scenarios. I am not going to explore or compare them here because that is out of the scope of this post, but let me quickly review the one that I chose for this sample project: MVVM + Rx + Coordinators.&lt;/div&gt;
&lt;div&gt;
	In MVVM, the code is split in &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;View&lt;/strong&gt; and &lt;strong&gt;ViewModel&lt;/strong&gt;. Views include &lt;tt&gt;UIViewController&lt;/tt&gt;/&lt;tt&gt;Activities&lt;/tt&gt;/&lt;tt&gt;Fragments&lt;/tt&gt;, while ViewModel is a new entity introduced to map the model into data that can be consumed by the View layer easily. The main benefit of this pattern is that the &lt;strong&gt;Model and the ViewModel are completely agnostic from UI&lt;/strong&gt;, and it is the UI the one that will &amp;ldquo;listen&amp;rdquo; for changes in the ViewModel and not the other way around. Code in View layers get shorter, as they do not need to apply any logic but &lt;strong&gt;just display what the ViewModel provides&lt;/strong&gt;. This is a good feature for our case because we mentioned that UI code will be pretty different for both apps, so then we can keep those differences isolated and as short as possible.&lt;/div&gt;
&lt;div&gt;
	The addition of &lt;strong&gt;&lt;a href="http://reactivex.io/"&gt;Rx&lt;/a&gt;&lt;/strong&gt; gives us a very powerful framework to &amp;ldquo;listen&amp;rdquo; for the ViewModel changes, and at the same time keep consistency between platforms since there are &lt;a href="https://github.com/ReactiveX/RxSwift"&gt;RxSwift&lt;/a&gt; and &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt; counterparts following the same conventions. They also have platform dependent additions (&lt;a href="https://github.com/ReactiveX/RxSwift/tree/master/RxCocoa"&gt;RxCocoa&lt;/a&gt; and &lt;a href="https://github.com/ReactiveX/RxAndroid"&gt;RxAndroid&lt;/a&gt;), but we will keep those&lt;strong&gt; limited to the View layer&lt;/strong&gt;.&lt;/div&gt;
&lt;div&gt;
	Finally, I have added a &lt;strong&gt;Coordinator layer&lt;/strong&gt;. This layer is sometimes also called Router, and it basically glues the different parts together and handles the navigation between them. The usage of coordinators helps us &lt;strong&gt;building the dependency tree and isolating the navigation logic&lt;/strong&gt; out of the View layer.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Example code snippets:&lt;/h3&gt;
&lt;div&gt;
	For this post we will explore a very simple app consuming the &lt;a href="https://github.com/sosedoff/opentable"&gt;OpenTable API as exposed here&lt;/a&gt;. The app will just present a list of restaurants, add some pagination when scrolling to the end of the table, and open a simple restaurant detail. I should also mention that I kept the connector to the API in an external library, not dependent to Rx, in case we want to build a different app without Rx but reusing the OpenTable connector, but we could have added the Rx dependency there as well to simplify the callbacks.&lt;/div&gt;
&lt;div&gt;
	Here are some of the different parts side to side:&lt;/div&gt;
&lt;h5&gt;
	RestaurantSearch&lt;/h5&gt;
&lt;div&gt;
	&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantSearch.swift
public struct RestaurantSearch {
    public let totalResults: Int
    public let currentPage: Int
    public let resultsPerPage: Int
    public let restaurants: [Restaurant]
}

extension RestaurantSearch: Unboxable {
    public init(unboxer: Unboxer) {
        self.totalResults = unboxer.unbox(key: &amp;quot;total_entries&amp;quot;)
        self.currentPage = unboxer.unbox(key: &amp;quot;current_page&amp;quot;)
        self.resultsPerPage = unboxer.unbox(key: &amp;quot;per_page&amp;quot;)
        self.restaurants = unboxer.unbox(key: &amp;quot;restaurants&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
	&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantSearch.kt
public data class RestaurantSearch(
       @JsonProperty(&amp;quot;total_entries&amp;quot;) public val totalResults: Int,
       @JsonProperty(&amp;quot;restaurants&amp;quot;) public val restaurants: Array&amp;lt;Restaurant&amp;gt;,
       @JsonProperty(&amp;quot;current_page&amp;quot;) public val currentPage: Int,
       @JsonProperty(&amp;quot;per_page&amp;quot;) public val resultsPerPage: Int
)&lt;/code&gt;&lt;/pre&gt;
	&lt;p style="text-align: right;"&gt;
		&lt;span style="font-size:14px;"&gt;&lt;cite&gt;String similarity: &lt;strong&gt;&lt;span style="font-size:16px;"&gt;47.45%&lt;/span&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;tt&gt;RestaurantSearch&lt;/tt&gt;&amp;nbsp;is a data class containing a search response. You can see in this particular case that both have the &lt;strong&gt;same external API, but a different internal implementation&lt;/strong&gt;. In the Swift case we are using &lt;a href="https://github.com/johnsundell/unbox"&gt;Unbox&lt;/a&gt;&amp;nbsp;for JSON mapping, while in Kotlin we use &lt;a href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt;. Here we can see the first issue that was commented above: library differences. The good news are that it is an implementation detail that will not affect how you use the object at all, and that you could probably find (or build) a different mapping library that looks in the same way (or at least much more similar) in both platforms.&lt;/div&gt;
&lt;h5&gt;
	RestaurantService&lt;/h5&gt;
&lt;div&gt;
	&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantService.swift
public class RestaurantService {
    let networkSession: URLSession
    let baseUrl: URL
    
    public init(urlSession: URLSession = URLSession.shared,
        baseUrl: URL = URL(string: &amp;quot;http://opentable.herokuapp.com/api/&amp;quot;)!) {
        self.networkSession = urlSession
        self.baseUrl = baseUrl
    }
    
    public func findRestaurants(priceRange: Int? = nil,
                         name: String? = nil,
                         address: String? = nil,
                         state: String? = nil,
                         city: String? = nil,
                         zip: String? = nil,
                         country: String? = nil,
                         page: Int = 1,
                         pageSize: Int = 25) -&amp;gt; ServiceTask&amp;lt;RestaurantSearch&amp;gt; {
        
        var params = [RequestParameter]()
        params.append(RequestParameter(&amp;quot;price&amp;quot;, priceRange))
        params.append(RequestParameter(&amp;quot;name&amp;quot;, name))
        params.append(RequestParameter(&amp;quot;address&amp;quot;, address))
        params.append(RequestParameter(&amp;quot;state&amp;quot;, state))
        params.append(RequestParameter(&amp;quot;city&amp;quot;, city))
        params.append(RequestParameter(&amp;quot;zip&amp;quot;, zip))
        params.append(RequestParameter(&amp;quot;country&amp;quot;, country))
        params.append(RequestParameter(&amp;quot;page&amp;quot;, page))
        params.append(RequestParameter(&amp;quot;per_page&amp;quot;, pageSize))
        
        return NetworkRequestServiceTask&amp;lt;RestaurantSearch&amp;gt;(
            networkSession: networkSession,
            baseUrl: baseUrl,
            endpoint: &amp;quot;restaurants&amp;quot;,
            params: params)
    }
    
    
    public func findRestaurant(restaurantId: Int) -&amp;gt; ServiceTask&amp;lt;Restaurant&amp;gt; {
        return NetworkRequestServiceTask&amp;lt;Restaurant&amp;gt;(
            networkSession: networkSession,
            baseUrl: baseUrl,
            endpoint: &amp;quot;restaurants/\(restaurantId)&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
	&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantService.kt
public class RestaurantService(
        val networkSession: HttpVolleySession = HttpVolleySession.getInstance(null, null),
        val baseUrl: String = &amp;quot;http://opentable.herokuapp.com/api/&amp;quot;) {

    public fun findRestaurants(priceRange: Int? = null,
                         name: String? = null,
                         address: String? = null,
                         state: String? = null,
                         city: String? = null,
                         zip: String? = null,
                         country: String? = null,
                         page: Int = 1,
                         pageSize: Int = 25): ServiceTask&amp;lt;RestaurantSearch&amp;gt; {

        val params = arrayListOf&amp;lt;RequestParameter&amp;gt;()
        params.add(RequestParameter(&amp;quot;price&amp;quot;, priceRange))
        params.add(RequestParameter(&amp;quot;name&amp;quot;, name))
        params.add(RequestParameter(&amp;quot;address&amp;quot;, address))
        params.add(RequestParameter(&amp;quot;state&amp;quot;, state))
        params.add(RequestParameter(&amp;quot;city&amp;quot;, city))
        params.add(RequestParameter(&amp;quot;zip&amp;quot;, zip))
        params.add(RequestParameter(&amp;quot;country&amp;quot;, country))
        params.add(RequestParameter(&amp;quot;page&amp;quot;, page))
        params.add(RequestParameter(&amp;quot;per_page&amp;quot;, pageSize))

        return NetworkRequestServiceTask(clazz = RestaurantSearch::class.java,
                networkSession = networkSession,
                baseUrl = baseUrl,
                endpoint = &amp;quot;restaurants&amp;quot;,
                params = params)
    }

    public fun findRestaurant(restaurantId: Int): ServiceTask&amp;lt;Restaurant&amp;gt; {
        return NetworkRequestServiceTask(clazz = Restaurant::class.java,
                networkSession = networkSession,
                baseUrl = baseUrl,
                endpoint = &amp;quot;restaurants/${restaurantId}&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
	&lt;p style="text-align: right;"&gt;
		&lt;span style="font-size:14px;"&gt;&lt;cite&gt;String similarity: &lt;strong&gt;&lt;span style="font-size:16px;"&gt;87.62%&lt;/span&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
	&lt;div&gt;
		&lt;tt&gt;RestaurantService&lt;/tt&gt;&amp;nbsp;is a class that provides access to the OpenTable API. It provides a couple of methods to make search queries, and return a &lt;tt&gt;ServiceTask&lt;/tt&gt;&amp;nbsp;object that encapsulates the networking request and mapping. The resulting code as you can see is &lt;strong&gt;almost identical&lt;/strong&gt;, except for the usage of a &lt;tt&gt;UrlSession&lt;/tt&gt;&amp;nbsp;vs a &lt;tt&gt;VolleySession&lt;/tt&gt;&amp;nbsp;and &lt;strong&gt;minor syntactic differences&lt;/strong&gt;. Of course, once again the implementation details of the &lt;tt&gt;NetworkRequestServiceTask&lt;/tt&gt;&amp;nbsp;will be different in both platforms to deal with the networking libraries, but API wise they are the same and the &lt;tt&gt;NetworkRequestServiceTask&lt;/tt&gt;&amp;nbsp;and its dependencies can be reused across projects.&lt;/div&gt;
	&lt;h5&gt;
		RestaurantListState&lt;/h5&gt;
	&lt;div&gt;
		&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantListState.swift
struct RestaurantsListState {
    let restaurants: [Restaurant]
    let page: Int?
    let lastPage: Int?
    let totalResults: Int?
    let error: Error?
    let isLoading: Bool
    
    private init(restaurants:[Restaurant] = [], page: Int? = nil, lastPage: Int? = nil, totalResults: Int? = nil, error: Error? = nil, loading: Bool = false) {
        self.restaurants = restaurants
        self.page = page
        self.lastPage = lastPage
        self.totalResults = totalResults
        self.error = error
        self.isLoading = loading
    }

    static func notLoaded() -&amp;gt; Restaurants.List.State {
        return Restaurants.List.State()
    }
    
    static func loading(page: Int, previousState: Restaurants.List.State) -&amp;gt; Restaurants.List.State {
        return Restaurants.List.State(restaurants: previousState.restaurants, page: page, lastPage: previousState.lastPage, totalResults: previousState.totalResults, loading: true)
    }
    
    static func loaded(restaurants: [Restaurant], lastPage: Int, totalResults: Int) -&amp;gt; Restaurants.List.State {
        return Restaurants.List.State(restaurants: restaurants, lastPage: lastPage, totalResults: totalResults)
    }
    
    static func failedLoad(error: Error, previousState: Restaurants.List.State) -&amp;gt; Restaurants.List.State {
        return Restaurants.List.State(restaurants: previousState.restaurants, page: previousState.page, error: error)
    }
    
    var isLoaded: Bool { return lastPage != nil &amp;amp;&amp;amp; totalResults != nil &amp;amp;&amp;amp; isLoading == false }
    var isNotLoaded: Bool { return page == nil &amp;amp;&amp;amp; lastPage == nil &amp;amp;&amp;amp; isLoading == false }
    var isFailed: Bool { return error != nil }
    
}
&lt;/code&gt;&lt;/pre&gt;
		&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantListState.kt
data class RestaurantsListState private constructor(
       val restaurants: Array&amp;lt;Restaurant&amp;gt; = arrayOf(),
       val page: Int? = null,
       val lastPage: Int? = null,
       val totalResults: Int? = null,
       val error: Error? = null,
       val isLoading: Boolean = false) {


   companion object {
       fun notLoaded(): RestaurantsListState {
           return RestaurantsListState()
       }
       fun loading(page: Int, previousState: RestaurantsListState): RestaurantsListState {
           return RestaurantsListState(restaurants = previousState.restaurants, page = page, lastPage = previousState.lastPage, totalResults = previousState.totalResults, isLoading = true)
       }
       fun loaded(restaurants: Array&amp;lt;Restaurant&amp;gt;, lastPage: Int, totalResults: Int): RestaurantsListState {
           return RestaurantsListState(restaurants = restaurants, lastPage = lastPage, totalResults = totalResults)
       }
       fun failedLoad(error: Error, previousState: RestaurantsListState): RestaurantsListState {
           return RestaurantsListState(restaurants = previousState.restaurants, page = previousState.page, error = error)
       }
   }

   val isLoaded: Boolean get() = lastPage != null &amp;amp;&amp;amp; totalResults != null &amp;amp;&amp;amp; isLoading == false
   val isNotLoaded: Boolean get() = page == null &amp;amp;&amp;amp; lastPage == null &amp;amp;&amp;amp; isLoading == false
   val isFailed: Boolean get() = error != null

}&lt;/code&gt;&lt;/pre&gt;
		&lt;p style="text-align: right;"&gt;
			&lt;span style="font-size:14px;"&gt;&lt;cite&gt;String similarity: &lt;strong&gt;&lt;span style="font-size:16px;"&gt;77.33%&lt;/span&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
		&lt;div&gt;
			Here he have &lt;tt&gt;RestaurantListState&lt;/tt&gt;, which is just a plain class holding state information used by the ViewModel. In this particular case, there are no dependencies to any other library or system framework, and therefore the &lt;strong&gt;code is again very similar&lt;/strong&gt; except for the minor differences commented above (ex: &lt;tt&gt;static&lt;/tt&gt;&amp;nbsp;methods vs &lt;tt&gt;companion&lt;/tt&gt;&amp;nbsp;methods or &lt;tt&gt;struct&lt;/tt&gt;&amp;nbsp;vs &lt;tt&gt;data class&lt;/tt&gt;)&lt;/div&gt;
		&lt;h5&gt;
			RestaurantListViewModel&lt;/h5&gt;
		&lt;div&gt;
			&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantListViewModel.swift
class RestaurantsListViewModel {
    private let restaurantService: RestaurantService
    private let state = BehaviorSubject&amp;lt;Restaurants.List.State&amp;gt;(value: .notLoaded())
    
    var stateObservable: Observable&amp;lt;Restaurants.List.State&amp;gt; { return state.asObservable() }
    var stateValue: Restaurants.List.State { return try! state.value() }
    
    init(restaurantService: RestaurantService) {
        self.restaurantService = restaurantService
    }
    
    func loadNextPage() {
        let nextPage = (stateValue.lastPage ?? 0) + 1
        loadPage(nextPage)
    }
    
    private func loadPage(_ page: Int) {
        guard !stateValue.isLoading else { return }
        
        state.onNext(.loading(page: page, previousState: stateValue))
        
        restaurantService.findRestaurants(country: &amp;quot;US&amp;quot;, page: page)
            .onCompletion { [weak self] (result: RestaurantSearch?) in
                if let strongSelf = self {
                    let restaurants = strongSelf.stateValue.restaurants
                    strongSelf.state.onNext(.loaded(
                        restaurants: restaurants + (result?.restaurants ?? []),
                        lastPage: page,
                        totalResults: result?.totalResults ?? restaurants.count))
                }
            }.onError { [weak self] (error) in
                if let strongSelf = self {
                    strongSelf.state.onNext(.failedLoad(error: error, previousState: strongSelf.stateValue))
                }
            }.execute()
    }
}&lt;/code&gt;&lt;/pre&gt;
			&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantListViewModel.kt
class RestaurantsListViewModel(
       private val restaurantService: RestaurantService) {
   private val state = BehaviorSubject.create(RestaurantsListState.notLoaded())

   val stateObservable: Observable&amp;lt;RestaurantsListState&amp;gt; get() = state.asObservable()
   val stateValue: RestaurantsListState get() = state.value

   fun loadNextPage() {
       val nextPage = (stateValue.lastPage ?: 0) + 1
       loadPage(nextPage)
   }

   private fun loadPage(page: Int) {
       if (stateValue.isLoading) {
           return
       }

       state.onNext(RestaurantsListState.loading(page = page, previousState = stateValue))

       restaurantService.findRestaurants(country = &amp;quot;US&amp;quot;, page = page)
            .onCompletion { result -&amp;gt;
                val restaurants = stateValue.restaurants
                this.state.onNext(RestaurantsListState.loaded(
                    restaurants = restaurants + (result?.restaurants ?: arrayOf()),
                    lastPage = page,
                    totalResults = result?.totalResults ?: restaurants.size))
            }.onError { error -&amp;gt;
                this.state.onNext(RestaurantsListState.failedLoad(error = error, previousState = stateValue))
            }.execute()
   }
}&lt;/code&gt;&lt;/pre&gt;
			&lt;p style="text-align: right;"&gt;
				&lt;span style="font-size:14px;"&gt;&lt;cite&gt;String similarity: &lt;strong&gt;&lt;span style="font-size:16px;"&gt;77.25%&lt;/span&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
			&lt;div&gt;
				This class corresponds to the ViewModel that will be used by the list of restaurants screen. As you can see, once again &lt;strong&gt;code fully resembles to each other&lt;/strong&gt;, with the small difference of memory management and &lt;tt&gt;guard&lt;/tt&gt;&amp;nbsp;statement in the Swift case. Very interesting to note as well is that this is the first code snippet using Rx. You can see how they both share the same methods and objects, so the resulting code is equivalent in both platforms. Thanks Rx for keeping consistency!&lt;/div&gt;
			&lt;h5&gt;
				RestaurantsCoordinator&lt;/h5&gt;
			&lt;div&gt;
				&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantsCoordinator.swift
class RestaurantsCoordinator: BaseCoordinator {
    static var identifier = CoordinatorIdentifier&amp;lt;Restaurants.Coordinator&amp;gt;(identifier: &amp;quot;RestaurantsCoordinator&amp;quot;)
    private let restaurantService: RestaurantService
    
    init(parentCoordinator: Coordinator?, restaurantService: RestaurantService = RestaurantService()) {
        self.restaurantService = restaurantService
        super.init(parentCoordinator: parentCoordinator)
    }
    
    override func start() {
        let vm = Restaurants.List.ViewModel(restaurantService: restaurantService)
        let vc = Restaurants.List.ViewController.newController(coordinator: self, viewModel: vm)
        presentViewController(viewController: vc)
    }
    
    func openRestaurant(restaurant: Restaurant) {
        let vm = Restaurants.Detail.ViewModel(restaurantService: restaurantService, restaurant: restaurant)
        let vc = Restaurants.Detail.ViewController(coordinator: self, viewModel: vm)
        presentViewController(viewController: vc)
    }
}&lt;/code&gt;&lt;/pre&gt;
				&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantsCoordinator.kt
class RestaurantsCoordinator(context: Context, parentCoordinator: Coordinator?, val restaurantService: RestaurantService = RestaurantService()): BaseCoordinator(context, parentCoordinator) {
   companion object {
       val identifier = CoordinatorIdentifier&amp;lt;RestaurantsCoordinator&amp;gt;(identifier = &amp;quot;RestaurantsCoordinator&amp;quot;)
   }

   override fun start() {
       val vm = RestaurantsListViewModel(restaurantService = restaurantService)
       val intent = RestaurantsListActivity.newIntent(coordinator = this, viewModel = vm)
       presentActivity(intent)
   }

   fun openRestaurant(restaurant: Restaurant) {
       val vm = RestaurantsDetailViewModel(restaurantService = restaurantService, restaurant = restaurant)
       val intent = RestaurantsDetailActivity.newIntent(coordinator = this, viewModel = vm)
       presentActivity(intent)
   }
}&lt;/code&gt;&lt;/pre&gt;
				&lt;p style="text-align: right;"&gt;
					&lt;span style="font-size:14px;"&gt;&lt;cite&gt;String similarity: &lt;strong&gt;&lt;span style="font-size:16px;"&gt;70.40%&lt;/span&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
				&lt;div&gt;
					&lt;tt&gt;RestaurantsCoordinator&lt;/tt&gt;&amp;nbsp;is the class responsible of navigation and coordination between the different parts in the MVVM. It basically instantiates new views, view models and services when needed, and present them in screen. Check it out because even if the navigation in both platforms is handled differently, &lt;strong&gt;the resulting code is so similar that you can barely notice the differences&lt;/strong&gt; except for the constructors and statics.&lt;/div&gt;
				&lt;h5&gt;
					RestaurantsListView&lt;/h5&gt;
				&lt;div&gt;
					&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantsListViewController.swift
class RestaurantsListViewController: UIViewController {
    fileprivate var viewModel: Restaurants.List.ViewModel!
    fileprivate var coordinator: Restaurants.Coordinator!
    fileprivate let disposeBag = DisposeBag()
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchTitle: UILabel!
    
    static func newController(coordinator: Restaurants.Coordinator, viewModel: Restaurants.List.ViewModel) -&amp;gt; UIViewController {
        let vc = R.storyboard.restaurantsListViewController.instantiateInitialViewController()!
        vc.viewModel = viewModel
        vc.coordinator = coordinator
        return vc
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
                
        tableView.register(R.nib.restaurantTableViewCell)
        tableView.register(R.nib.loadingTableViewCell)
        tableView.register(R.nib.errorTableViewCell)
        
        viewModel.stateObservable.subscribe(onNext: { [unowned self] state in
            if let results = state.totalResults {
                self.searchTitle.text = &amp;quot;Number of restaurants: \(results)&amp;quot;
            }
            else if state.isLoading {
                self.searchTitle.text = &amp;quot;Loading restaurants&amp;quot;
            }
        }).addDisposableTo(disposeBag)
        
        //Data
        cellDataObservable.bindTo(tableView.rx.items(dataSource: tableDataSource))
            .addDisposableTo(disposeBag)
        
        //Item selection
        tableView.rx.modelSelected(CellData.self).subscribe(onNext: { [unowned self] (data) in
            if  let restaurant = data.restaurant {
                self.coordinator.openRestaurant(restaurant: restaurant)
            }
        }).addDisposableTo(disposeBag)
        
        //Page loading
        tableView.rx.willDisplayCell.filter { [unowned self] (cell, indexPath) -&amp;gt; Bool in
            indexPath.row == self.viewModel.stateValue.restaurants.count - 1
        }.subscribe(onNext: { [unowned self] (data) in
            self.viewModel.loadNextPage()
        }).addDisposableTo(disposeBag)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if viewModel.stateValue.isNotLoaded || viewModel.stateValue.isFailed {
            viewModel.loadNextPage()
        }
    }
}


//MARK: Table view management
extension Restaurants.List.ViewController {
    enum CellData {
        case restaurant(Restaurant)
        case loading
        case error(Error)
        
        var restaurant: Restaurant? {
            guard case .restaurant(let restaurant) = self else { return nil }
            return restaurant
        }        
    }
    
    struct SectionOfData: SectionModelType {
        typealias Item = CellData
        var items: [Item]
        
        init(items: [Item]) {
            self.items = items
            self.identity = identity
        }
        init(original: SectionOfData, items: [Item]) {
            self = original
            self.items = items
        }
    }
    
    fileprivate var cellDataObservable: Observable&amp;lt;[SectionOfData]&amp;gt; {
        return viewModel.stateObservable.map { [weak self] (state) -&amp;gt; [SectionOfData] in
            let restaurants: [CellData] = state.restaurants.map { .restaurant($0) }
            var sections = [SectionOfData(items: restaurants)]
            if self?.viewModel.stateValue.isLoading ?? false {
                sections.append(SectionOfData(items: [.loading]))
            }
            else if let err = self?.viewModel.stateValue.error {
                sections.append(SectionOfData(items: [.error(err)]))
            }
            return sections
        }
    }
    
    
    fileprivate var tableDataSource: RxTableViewSectionedDataSource&amp;lt;SectionOfData&amp;gt; {
        let dataSource = RxTableViewSectionedDataSource&amp;lt;SectionOfData&amp;gt;()
        dataSource.configureCell = { ds, tv, ip, item in
            switch item {
            case .restaurant(let restaurant):
                let cell = tv.dequeueReusableCell(withIdentifier: R.nib.restaurantTableViewCell, for: ip)!
                cell.configure(restaurant: restaurant)
                return cell
                
            case .loading:
                let cell = tv.dequeueReusableCell(withIdentifier: R.nib.loadingTableViewCell, for: ip)!
                cell.configure(message: &amp;quot;Loading restaurants&amp;quot;)
                return cell
                
            case .error(let err):
                let cell = tv.dequeueReusableCell(withIdentifier: R.nib.errorTableViewCell, for: ip)!
                cell.configure(error: err)
                return cell
            }
        }
        return dataSource
    }

}&lt;/code&gt;&lt;/pre&gt;
					&lt;pre style="max-height: 300px"&gt;
&lt;code&gt;//RestaurantsListActivity.kt
class RestaurantsListActivity : AppCompatActivity() {
   enum class Sections { restaurant, loading, error }

   lateinit var coordinator: RestaurantsCoordinator
   lateinit var viewModel: RestaurantsListViewModel

   companion object {
       fun newIntent(coordinator: RestaurantsCoordinator, viewModel: RestaurantsListViewModel, @LayoutRes layoutId: Int = R.layout.restaurants_list_activity): Intent {
           val intent = Intent(coordinator.context, RestaurantsListActivity::class.java)
           ActivityInjector.register(intent) { activity: RestaurantsListActivity -&amp;gt;
               activity.coordinator = coordinator
               activity.viewModel = viewModel
               activity.setContentView(layoutId)
           }
           return intent
       }
   }

   override fun onCreate(savedInstanceState: Bundle?) {
       super.onCreate(savedInstanceState)
       ActivityInjector.inject(this)

       viewModel.stateObservable.subscribe {
           if (it.totalResults != null) {
               search_title.text = &amp;quot;Number of restaurants: ${it.totalResults}&amp;quot;
           }
           else if (it.isLoading) {
               search_title.text = &amp;quot;Loading restaurants&amp;quot;
           }
       }

       recyclerView.adapter = recyclerViewAdapter
       recyclerView.layoutManager = layoutManager

       //Item selection
       recyclerViewAdapter.modelSelected.subscribe { data -&amp;gt;
           val restaurant = data.restaurant
           if (restaurant != null) {
               this.coordinator.openRestaurant(restaurant = restaurant)
           }
       }

       //Page loading
       RxRecyclerView.scrollEvents(recyclerView).filter { event -&amp;gt;
           layoutManager.findLastVisibleItemPosition() == viewModel.stateValue.restaurants.size - 1
       }.subscribe {
           viewModel.loadNextPage()
       }
   }

   override fun onResume() {
       super.onResume()
       if (viewModel.stateValue.isNotLoaded || viewModel.stateValue.isFailed) {
           viewModel.loadNextPage()
       }
   }

   override fun onDestroy() {
       super.onDestroy()
       if (isFinishing) {        //Only unregister when explicit finish happens
           ActivityInjector.unregister(intent)
       }
   }


   // List management
   data class CellData(val restaurant: Restaurant? = null, val loading: Boolean = false, val error: Error? = null)

   val cellDataObservable: Observable&amp;lt;List&amp;lt;SectionModelType&amp;lt;CellData&amp;gt;&amp;gt;&amp;gt; by lazy {
       viewModel.stateObservable.flatMap { state -&amp;gt;
           val restaurants = state.restaurants?.map { CellData(restaurant = it) } ?: listOf()
           val sections = arrayListOf(SectionModelType&amp;lt;CellData&amp;gt;(restaurants, Sections.restaurant.ordinal))
           if (viewModel.stateValue.isLoading) {
               sections.add(SectionModelType&amp;lt;CellData&amp;gt;(listOf(CellData(loading = true)), Sections.loading.ordinal))
           }
           else if (viewModel.stateValue.isFailed) {
               sections.add(SectionModelType&amp;lt;CellData&amp;gt;(listOf(CellData(error = viewModel.stateValue.error)), Sections.error.ordinal))
           }
           Observable.just(sections.toList())
       }
   }

   val recyclerViewAdapter: RxRecyclerViewAdapter&amp;lt;CellData&amp;gt; by lazy {
       RxRecyclerViewAdapter(cellDataObservable)
               .useLayoutId { type -&amp;gt;
                   if (type == Sections.restaurant.ordinal) {
                       R.layout.restaurant_cell_layout
                   }
                   else if (type == Sections.loading.ordinal) {
                       R.layout.loading_cell_layout
                   }
                   else {
                       R.layout.error_cell_layout
                   }
               }
               .configureItem { view, data, position, type -&amp;gt;
                   if (type == Sections.restaurant.ordinal) {
                       val restaurant = data.restaurant
                       if (restaurant != null) {
                           view.pictureImageView.loadImage(restaurant)
                           view.nameTextView.setText(restaurant.name)
                           view.addressTextView.setText(restaurant.address)
                           var price = &amp;quot;&amp;quot;
                           kotlin.repeat(restaurant.price) {
                               price = price + &amp;quot;&amp;euro;&amp;quot;
                           }
                           view.priceTextView.setText(price)
                       }
                   }
                   else if (type == Sections.error.ordinal) {
                       view.textView.setText(data.error?.message)
                   }
               }
   }

   val layoutManager = LinearLayoutManager(this)

}&lt;/code&gt;&lt;/pre&gt;
					&lt;p style="text-align: right;"&gt;
						&lt;span style="font-size:14px;"&gt;&lt;cite&gt;String similarity: &lt;strong&gt;&lt;span style="font-size:16px;"&gt;52.27%&lt;/span&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/p&gt;
				&lt;/div&gt;
				&lt;div&gt;
					OK, so here is the big deal. So far, code was very similar and can be easily shared (with small editions) from one to the other platform. However, as we warned above, the UI code will be very different. How much? You can compare it by yourself&amp;hellip;&lt;/div&gt;
				&lt;div&gt;
					Basically, they &lt;strong&gt;both share a common approach&lt;/strong&gt; in which they have a constructor receiving the dependencies (for a very simple Dependency Injection); a view creation method (&lt;tt&gt;viewDidLoad&lt;/tt&gt;&amp;nbsp;/ &lt;tt&gt;onCreate&lt;/tt&gt;) that basically subscribes to the ViewModel observables and configures the list; a view appear method (&lt;tt&gt;viewWillAppear&lt;/tt&gt;&amp;nbsp;/ &lt;tt&gt;onResume&lt;/tt&gt;) that will load new results; and a set of methods and types to deal with the information from the list, which by the way could have been moved partially to the ViewModel probably.&lt;/div&gt;
				&lt;div&gt;
					As you can see, &lt;strong&gt;they are similar (especially conceptually) but not equal&lt;/strong&gt;, so all in all I would say that you could use one as a template for the other, but you will still need to write about half of the code, but judge it yourself.&amp;nbsp;&lt;/div&gt;
				&lt;div&gt;
					Of course, if you create your own wrappers around the UI components, you could actually achieve a much higher code reuse rate by exposing similar APIs, but you will need to develop them and they will introduce extra learning steps for new developers (like I did for networking in the &lt;tt&gt;NetworkServiceTask&lt;/tt&gt;, use a similar API with different implementations)&lt;/div&gt;
				&lt;div&gt;
					&lt;u&gt;Off-topic&lt;/u&gt;: note how the usage of Kotlin extensions removed all of the &lt;tt&gt;findViewById&lt;/tt&gt;&amp;nbsp;so typical (and error prone) in Android UI classes, and in iOS the usage of &lt;a href="https://github.com/mac-cain13/R.swift"&gt;R.swift&lt;/a&gt; is also cleaning up many of the hardcoded strings.&lt;/div&gt;
				&lt;h5&gt;
					Layout&lt;/h5&gt;
				&lt;div&gt;
					In this case I am not copying the layout code because &lt;strong&gt;it is completely different&lt;/strong&gt;. In iOS, I have used Interface Builder to set my views, while in Android it uses layout XMLs.&lt;/div&gt;
				&lt;div&gt;
					&amp;nbsp;&lt;/div&gt;
				&lt;h3&gt;
					Conclusion&lt;/h3&gt;
				&lt;div&gt;
					&lt;strong&gt;Swift and Kotlin are great languages&lt;/strong&gt;, both adding a lot of added value to their corresponding alternative for mobile apps (Objective-C / Java). They are &lt;strong&gt;safer&lt;/strong&gt; thanks to a strict strongly typed system that includes nullability in it. They are both very &lt;strong&gt;pleasant&lt;/strong&gt; to work with because of a impressive type inference compiler and a beautiful and modern syntax. They both have very &lt;strong&gt;powerful features&lt;/strong&gt;, like extensions, immutability and functional programming additions that allow new and better patterns and constructions to emerge.&lt;/div&gt;
				&lt;div&gt;
					However, &lt;strong&gt;although very similar&lt;/strong&gt;, they are not identical. &lt;strong&gt;They have a few differences intrinsic to the language and the SO/runtime&lt;/strong&gt; where they run that makes impossible to use the exact same code in both platforms. Nevertheless, if we structure our code with a good pattern and &lt;strong&gt;separation of concerns&lt;/strong&gt;, we can certainly get very similar code in most of our classes, keeping the main differences when interacting with system APIs like UI or Networking isolated.&amp;nbsp;&lt;/div&gt;
				&lt;div&gt;
					We have seen a few examples of different parts of the app using MVVM + Rx + Coordinators, and we can see how code resembles to each other in the example classes (between 50% to 90% code matching, not counting layout). In fact, it is so similar that I made most of one platform as a copy+paste+edit from the other one, &lt;strong&gt;saving a lot of time and reducing bugs&lt;/strong&gt; as both will behave almost identically. An added benefit is that Kotlin developers will be able to read/write Swift with ease and vice versa, which helps &lt;strong&gt;consolidating teams, practices and code across platforms&lt;/strong&gt;, but still writing &lt;strong&gt;fully native and high quality apps&lt;/strong&gt; with small differences to &lt;strong&gt;adapt to different user&amp;rsquo;s expectations&lt;/strong&gt; derived from the platform itself (which is a big difference with other cross platform solutions out there like &lt;a href="https://facebook.github.io/react-native/"&gt;ReactNative&lt;/a&gt;, &lt;a href="https://www.xamarin.com/"&gt;Xamarin&lt;/a&gt; or &lt;a href="http://phonegap.com/"&gt;PhoneGap/Cordova&lt;/a&gt;)&lt;/div&gt;
			&lt;/div&gt;
			&lt;p&gt;
				&amp;nbsp;&lt;/p&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	&lt;small&gt;Note: String similarity calculated with &lt;a href="https://www.tools4noobs.com/online_tools/string_similarity/"&gt;Tools4Noobs&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/37</id>
    <published>2016-10-12T12:24:17Z</published>
    <updated>2016-10-12T14:38:35Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/37-Swifty-names-for-modules-protocols-and-implementation-classes"/>
    <title>Swifty names for modules, protocols and implementation classes</title>
    <content type="html">
&lt;div&gt;
	Naming conventions are very important in software development for many reasons, but especially&lt;strong&gt; for readability&lt;/strong&gt;. &lt;a href="https://en.wikipedia.org/wiki/Naming_convention_(programming)"&gt;According to Wikipedia&lt;/a&gt;:&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;cite&gt;Reasons for using a naming convention (as opposed to allowing programmers to choose any character sequence) include the following:&lt;/cite&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;cite&gt;to reduce the effort needed to read and understand source code&lt;/cite&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;cite&gt;to enable code reviews to focus on more important issues than arguing over syntax and naming standards.&lt;/cite&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;cite&gt;to enable code quality review tools to focus their reporting mainly on significant issues other than syntax and style preferences.&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	So, what is a good name? This issue is controversial because there are multiple dogmas and styles out there. In Swift, despite being a young language, naming conventions are quite established already (with Swift 3), and includes guidelines about casing, naming parameters, methods,... However, there is &lt;strong&gt;no &amp;ldquo;defacto&amp;rdquo; way to name your implementation classes&lt;/strong&gt; when you use protocols as a public abstract API and &lt;strong&gt;how to group code inside namespaces/modules&lt;/strong&gt;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	But let&amp;rsquo;s just explore an example.&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	Let&amp;rsquo;s imagine we have an app that shows some Restaurants around you. Now, let&amp;rsquo;s also assume that for this app we use an MVVM architecture, although the same concepts explained in here would apply to any other architecture chosen (MVC, MVP, VIPER,...).&lt;/div&gt;
&lt;div&gt;
	With that in mind, we could have for example a &lt;tt&gt;RestaurantListViewModel&lt;/tt&gt; and a &lt;tt&gt;RestaurantListViewController&lt;/tt&gt;. If we want to have protocols for defining APIs and abstracting the current implementation (especially important for Tests), we would need to either rename the implementations to something like &lt;tt&gt;RestaurantListViewModelImpl&lt;/tt&gt; and &lt;tt&gt;RestaurantListViewControllerImpl&lt;/tt&gt; or rename the interfaces to something like &lt;tt&gt;IRestaurantListViewModel&lt;/tt&gt; and &lt;tt&gt;IRestaurantListViewController&lt;/tt&gt;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	The problem with this approach is that either way, &lt;strong&gt;you are fabricating a name by adding a suffix/prefix that does not improve the naming&lt;/strong&gt; but requires you to think about conventions and whether to use the interface or implementation class. Besides, the full bloated name &lt;strong&gt;does not tell you much about module composition&lt;/strong&gt;. For example, imagine you have a class named &lt;tt&gt;SearchRestaurantsResultsView&lt;/tt&gt;: what can you tell about the class? is it an interface or a concrete class? Is it a custom &lt;tt&gt;UIView&lt;/tt&gt; or a &lt;tt&gt;UIViewController&lt;/tt&gt;? Is it part of a Search module or part of a Restaurant module? Is there an associated &lt;tt&gt;ViewModel&lt;/tt&gt; for that class or is it a standalone class?&lt;/div&gt;
&lt;div&gt;
	To improve these issues, Paul Blundell suggests the usage of &lt;a href="https://www.novoda.com/blog/better-class-naming/"&gt;nested interfaces in Java&lt;/a&gt;. Despite being a very interesting approach, Swift does not allow to nest protocols inside other declarations, so things like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;protocol A {
    protocol B {}
}

enum A {
    protocol B {}
}

struct A {
    protocol B {}
}


class A {
    protocol B {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Do not compile.&lt;/div&gt;
&lt;h3&gt;
	Typealiases to the rescue&lt;/h3&gt;
&lt;div&gt;
	So, nested protocols are not an option, but can we somehow get the same result? Yes, &lt;strong&gt;by using typealiases&lt;/strong&gt;. Let&amp;rsquo;s see a few examples:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//Declaration
enum Restaurants {
    enum List {
        typealias ViewModel = RestaurantsListViewModel
    }
}

class RestaurantsListViewModel {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//Usage
let viewModel = Restaurants.List.ViewModel()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	In this simple example, we are not using protocols yet, but a nested enum that can help us defining modules. Note that I have opted by an enum rather than a struct/class, because&lt;strong&gt; enums can not be instantiated&lt;/strong&gt;, so it suits our problem better.&lt;/div&gt;
&lt;div&gt;
	You can now see how instantiation is &lt;strong&gt;much cleaner&lt;/strong&gt;, clearly showing module composition &lt;u&gt;Restaurants&lt;/u&gt; &amp;rarr; &lt;u&gt;List&lt;/u&gt; &amp;rarr; &lt;u&gt;ViewModel&lt;/u&gt;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	An added benefit is that autocompletion will just &lt;strong&gt;show you results that apply to the current level of namespace&lt;/strong&gt;, so for example typing &lt;tt&gt;Restaurants.&lt;/tt&gt; will only show submodules of restaurants (no implementation classes yet) and same applies to &lt;tt&gt;Restaurants.List&lt;/tt&gt;, that will only display things like &lt;tt&gt;Restaurant.List.View&lt;/tt&gt; or &lt;tt&gt;Restaurant.List.ViewModel&lt;/tt&gt;, but no other classes starting with the word &amp;ldquo;Restaurant&amp;rdquo; will be shown like it normally happens without the namespace trick.&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/23/content_screen_shot_2016-10-12_at_11_04_28.png?1476281860" style="width: 435px; height: 78px;" /&gt;&lt;/div&gt;
&lt;div&gt;
	Great! but, how would it look with an actual interface/implementation approach? Well, likewise, we can make use of &lt;strong&gt;typealisases&lt;/strong&gt;:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//Using protocols
extension Restaurants.List {
    typealias View = RestaurantsListView
}

protocol RestaurantsListView {
    init(viewModel: Restaurants.List.ViewModel)
}

class RestaurantsListViewController: UIViewController, Restaurants.List.View {
    required init(viewModel: Restaurants.List.ViewModel){
        super.init(nibName: nil, bundle: nil)
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError(&amp;quot;init(coder:) has not been implemented&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And use it like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;let vm = Restaurants.List.ViewModel()
let vc = RestaurantsListViewController(viewModel: vm) 
navigationController?.pushViewController(vc, animated: true)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Here, we can see how a simple &lt;tt&gt;View&lt;/tt&gt; interface can be implemented. Note that I chose to use a different name for the interface (ending in &lt;tt&gt;View&lt;/tt&gt;) than for the implementation class (ending in &lt;tt&gt;ViewController&lt;/tt&gt;). This is intentional because from the interface perspective we do not need to know if the implementation is a &lt;tt&gt;UIViewController&lt;/tt&gt;, but for the concrete class implementation it is important to distinguish between &lt;tt&gt;ViewControllers&lt;/tt&gt; and other artifacts. Anyway, you could also&amp;nbsp;have chosen something like &lt;tt&gt;IRestaurantsListViewController&amp;nbsp;&lt;/tt&gt;for the interface name because this name will never be used directly but from the typealias (&lt;tt&gt;Restaurants.List.View&lt;/tt&gt;), so the fact that you append an &amp;ldquo;I&amp;rdquo; or any other prefix/suffix in &lt;strong&gt;the protocol name does not get exposed to the rest of your code&lt;/strong&gt;, it is just an implementation detail due to Swift limitations with nested protocols. Note also how I used the &lt;tt&gt;Restaurants.List.View&lt;/tt&gt; in the controller class definition to conform to the protocol rather than the &lt;tt&gt;RestaurantsListView&lt;/tt&gt;&amp;nbsp;directly, because of the same reason.&lt;/div&gt;
&lt;h3&gt;
	Structuring in modules&lt;/h3&gt;
&lt;div&gt;
	OK, so we are almost there! We have a mechanism to give proper names to our classes/protocols, exposing only readable names and grouping them in modules that allows us to better understand structure and get relevant suggestions while typing.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Now, we can just create as many modules as we need, and we can nest them as deep as you want to clarify its structure. But wait, if we go deep in the nesting, do we need to add them all in a single file? Not really, because by &lt;strong&gt;using extensions we can add the concrete typealiases inside the modules or submodules&lt;/strong&gt;, without having to create a massive file with all the enums and nested objects in it. Let&amp;rsquo;s see a very simple example.&lt;/div&gt;
&lt;div&gt;
	Imagine a &amp;ldquo;Search&amp;rdquo; module, that contains some other submodules in it. You could have something as simple as:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//File: search/search.swift
enum Search {
    enum Filters {}
    enum Results {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Where it basically declares that the module is composed of 2 submodules, but without exposing any particular details about them (or even an empty enum with no content at this level).&lt;/div&gt;
&lt;div&gt;
	Then, in subfolders inside search, you could define the concrete submodules with extensions like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//File: search/filters/filters.swift
//Filters submodule
extension Search.Filters {
    typealias View = ...
    typealias ViewModel = ...
    typealias Model = ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//File: search/results/results.swift
//Results submodule
extension Search.Results {
    typealias View = ...
    typealias ViewModel = ...
    typealias Model = ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	So now, from folder perspective, you have a main &lt;tt&gt;search.swift&lt;/tt&gt;&amp;nbsp;file defining the parts, and concrete &lt;tt&gt;&amp;lt;submodule&amp;gt;.swift&lt;/tt&gt;&amp;nbsp;files defining the concrete implementation. Very neat and very clear where to look for the specific implementation details when needed.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/24/content_screen_shot_2016-10-12_at_11_35_27.png?1476281920" style="width: 351px; height: 300px;" /&gt;&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Limitations&lt;/h3&gt;
&lt;div&gt;
	There are however a couple of caveats to point out.&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;File names must be unique&lt;/strong&gt;: In Swift, file names are used to generate the final internal name for the classes. Even if you add them inside different folders, and use different names for the classes in it, the compiler will generate an error if 2 swift files are named the same. Because of this, you should not name your file like &lt;tt&gt;ViewModel.swift&lt;/tt&gt;&amp;nbsp;even if they are grouped under a module directory. Instead, just do it like &lt;tt&gt;RestaurantsListViewModel.swift&lt;/tt&gt;. It would be nice to be able to apply short names on files, but Swift compiler is not there yet, maybe in future versions.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Interface builder&lt;/strong&gt;: In current version of Xcode (8.0), IB can not follow typealiases properly (at least not in nested enums like the ones I showed). As a result, in your IB files you have to use the concrete implementation class name. So, instead of &lt;tt&gt;Restaurants.List.View&lt;/tt&gt;, you have to use &lt;tt&gt;RestaurantsListViewController&lt;/tt&gt;&amp;nbsp;if you want your outlets to be properly displayed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/25/content_screen_shot_2016-10-12_at_11_36_53.png?1476281949" style="width: 329px; height: 138px;" /&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;
	Conclusion&lt;/h3&gt;
&lt;div&gt;
	Naming is very important, proper naming can help to understand your code and module structure better, and at the same time it can improve the quality of suggestions while typing.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	We have introduced a way to do it in Java, but for Swift we need to take some workarounds due to nested protocol limitations. However, thanks to the usage of typealiases and nested enums we can get a very elegant and neat way of implement the desired behavior.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	If you want to check out any of the code used in this post, you can &lt;a href="https://gist.github.com/angelolloqui/63433ef83551780c4b1085c7a6df40b9"&gt;do it here&lt;/a&gt;&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/36</id>
    <published>2016-03-06T14:51:02Z</published>
    <updated>2016-03-06T15:15:16Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/36-Oddities-of-UIStackView"/>
    <title>Oddities of UIStackView</title>
    <content type="html">&lt;div&gt;
	With iOS9, Apple introduced a new container view called &lt;tt&gt;UIStackView&lt;/tt&gt;. Stack views can be seen as the iOS equivalent for the &lt;tt&gt;LinearLayout&lt;/tt&gt; in Android. Likewise, the usage is pretty straightforward, especially if you from Interface Builder, and when used properly can save the developers lots of time.&lt;/div&gt;
&lt;div&gt;
	However, this special view comes with &lt;strong&gt;its own set of gotchas&lt;/strong&gt; that are hard to find at first, and that can complicate your life hugely. With this post I want to cover the main issues and tricks that I have found while using stack views for a few months. Note that I am not going to cover the basic usage of &lt;tt&gt;UIStackView&lt;/tt&gt;, there are plenty of references on Internet for that (check references below). Let&amp;rsquo;s get started!&lt;/div&gt;
&lt;h4&gt;
	Where is the drawing phase?&lt;/h4&gt;
&lt;div&gt;
	One of my first issues with Stack Views was &lt;strong&gt;setting up some basic properties like background color or borders&lt;/strong&gt;. An interesting aspect of this views is that they do not have a normal render phase. Instead, they are container views, and any code you place in the &lt;tt&gt;drawRect&lt;/tt&gt; method drawing into the current context will actually output nothing. This is what the documentation says:&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	&lt;cite&gt;The UIStackView is a nonrendering subclass of UIView. It does not provide any user interface of its own. Instead, it just manages the position and size of its arranged views. As a result, some properties (like backgroundColor) have no affect on the stack view. Similarly, you cannot override layerClass, drawRect:, or drawLayer:inContext:&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	If you want to put a background color to the view, set a border or any other similar drawing operation, you will need to &lt;strong&gt;add an extra view/layer behind&lt;/strong&gt; (or inside), and set your properties and rendering code there. Do not waste your time subclassing the stack view to add a &lt;tt&gt;drawRect&lt;/tt&gt; implementation, your current context will still not be rendered.&lt;/div&gt;
&lt;h4&gt;
	The arrangedSubviews asymmetry&lt;/h4&gt;
&lt;div&gt;
	&lt;tt&gt;UIStackView&lt;/tt&gt; requires you to add your views to them by using the &lt;tt&gt;addArrangedSubview&lt;/tt&gt; or &lt;tt&gt;insertArrangedSubview:atIndex:&lt;/tt&gt; if you want them to be &amp;ldquo;laid out&amp;rdquo;. As stated in the documentation:&lt;/div&gt;
&lt;div&gt;
	&lt;cite&gt;This method automatically adds the provided view as a subview of the stack view, if it is not already.&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	Which basically means that when you add an arranged subview, &lt;strong&gt;it will automatically become a normal subview&lt;/strong&gt; of the stack (both in &lt;tt&gt;subviews&lt;/tt&gt; and &lt;tt&gt;arrangedSubviews&lt;/tt&gt;). However, it is interesting that the &lt;tt&gt;removeArrangedSubview:&lt;/tt&gt; &lt;strong&gt;does not actually remove the view from subviews&lt;/strong&gt; as you could think. Instead, calling &lt;tt&gt;removeArrangedSubview:&lt;/tt&gt; will only remove the view from the &lt;tt&gt;arrangedSubviews&lt;/tt&gt;, but the view will still remain as part of the &lt;tt&gt;subviews&lt;/tt&gt;&amp;nbsp;in the view hierarchy. This asymmetry may cause memory issues if you do not remember to call the &lt;tt&gt;removeFromSuperview&lt;/tt&gt; in the arranged subviews, especially if your stack content is changed frequently removing/adding views&lt;/div&gt;
&lt;h4&gt;
	The hidden property&lt;/h4&gt;
&lt;div&gt;
	When dealing with UI, it is pretty common that you want to hide a view depending on some internal state, and use the &amp;ldquo;hidden&amp;rdquo; space for the rest of the views. With autolayout, a view of certain intrinsic size will still occupy the space defined, no matter if the view is hidden or not, resulting in empty areas in the screen. You would normally link one of the key constraints (like positioning) to change the priority or constant to get the other views on top of your hidden view.&lt;/div&gt;
&lt;div&gt;
	With &lt;tt&gt;UIStackView&lt;/tt&gt;, your layout will be automatically recomputed when you change a the &lt;tt&gt;hidden&lt;/tt&gt; property, &lt;strong&gt;using the empty space&lt;/strong&gt; for the other views.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	This is especially interesting if you change the &lt;tt&gt;hidden&lt;/tt&gt; property&lt;strong&gt; along with an animation&lt;/strong&gt;. Normally, a bool property like &lt;tt&gt;hidden&lt;/tt&gt; would not be animated. However, with stack views modifying &lt;tt&gt;hidden&lt;/tt&gt; results in a frame update, and as a result the views will &lt;strong&gt;animate to their new positions&lt;/strong&gt;. Nevertheless, remember that if you want the animation to be shown properly, you will need to make sure that your layout is recomputed, like you would do with Autolayout and the &lt;tt&gt;layoutIfNeeded&lt;/tt&gt; method. Example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;UIView.animateWithDuration(0.25) {
	arrangedView.hidden = true
	stackView.layoutIfNeeded()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4&gt;
	Unable to simultaneously satisfy constraints&lt;/h4&gt;
&lt;div&gt;
	One of the most difficult issues to resolve when playing with &lt;tt&gt;UIStackView&lt;/tt&gt; are constraints conflicts on runtime. As you are not creating the constraints yourself (the stack does it), it is pretty hard to figure out what the problem is.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	I have found &lt;strong&gt;a very common issue&lt;/strong&gt; when marking an &lt;tt&gt;arrangedSubview&lt;/tt&gt; as hidden, which will output something like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Unable to simultaneously satisfy constraints.
    Probably at least one of the constraints in the following list is one you don&amp;#39;t want. Try this: 
(1) look at each constraint and try to figure out which you don&amp;#39;t expect; 
(2) find the code that added the unwanted constraint or constraints and fix it. 
(Note: If you&amp;#39;re seeing NSAutoresizingMaskLayoutConstraints that you don&amp;#39;t understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) 
(
    &amp;quot;&amp;lt;NSLayoutConstraint:0x7f7f5be18c80 V:[UISegmentedControl:0x7f7f5bec4180]-(8)-| &amp;nbsp; (Names: &amp;#39;|&amp;#39;:UIView:0x7f7f5be69d30 )&amp;gt;&amp;quot;,
    &amp;quot;&amp;lt;NSLayoutConstraint:0x7f7f5be508d0 V:|-(8)-[UISegmentedControl:0x7f7f5bec4180] &amp;nbsp; (Names: &amp;#39;|&amp;#39;:UIView:0x7f7f5be69d30 )&amp;gt;&amp;quot;,
    &amp;quot;&amp;lt;NSLayoutConstraint:0x7f7f5bdfbda0 &amp;#39;UISV-hiding&amp;#39; V:[UIView:0x7f7f5be69d30(0)]&amp;gt;&amp;quot;
)

Will attempt to recover by breaking constraint 
&lt;nslayoutconstraint:0x7f7f5be18c80 :uiview:0x7f7f5be69d30="" names:=""&gt;

Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.
The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &lt;uikit uiview.h=""&gt; may also be helpful.
&lt;/uikit&gt;&lt;/nslayoutconstraint:0x7f7f5be18c80&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;small&gt;Example from &lt;a href="http://stackoverflow.com/a/32885955/378433"&gt;StackOverflow&lt;/a&gt;&lt;/small&gt;&lt;/div&gt;
&lt;div&gt;
	Basically, what happens here is that the stack view &lt;strong&gt;will automatically set your height to 0&lt;/strong&gt; (if vertical layout, or width if horizontal) when you &lt;strong&gt;make the view hidden&lt;/strong&gt;. In the specific example attached above, the arranged view contains a segment control that has some extra padding of 8px by using required autolayout constraints. As a result, when the subview tries to resize to 0, the constraints with the padding can not be satisfied (requires a minimum of 16px size, but the stack wants to set it to 0), resulting in the above error. A way to solve it is to make sure that you have no size constraints like that, or if you need them, &lt;strong&gt;lower their priority so the AutoLayout engine will know which one to break&lt;/strong&gt; (always yours). Have in mind that all the stackview managed constraints are required (priority 1000)&lt;/div&gt;
&lt;h4&gt;
	Conclusion&lt;/h4&gt;
&lt;div&gt;
	&lt;strong&gt;Stack views are a great&lt;/strong&gt; way to improve your projects. They are performant, and provide a very easy way to manage views, making development and maintenance easier. However, they also come with their own oddities that you need to be aware if you do not want to spend hours dealing with strange bugs. I hope that this post can save developers time and at the same time encourage for its use.&lt;/div&gt;
&lt;h4&gt;
	References&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIStackView_Class_Reference/"&gt;Apple UIStackView reference&amp;nbsp;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="https://www.raywenderlich.com/114552/uistackview-tutorial-introducing-stack-views"&gt;UIStackView introduction&amp;nbsp;tutorial&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="http://stackoverflow.com/a/32885955/378433"&gt;Ambigous layout issue on Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/35</id>
    <published>2015-11-08T18:55:05Z</published>
    <updated>2015-11-10T19:01:54Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/35-Improving-your-Android-apps-with-Data-Bindings"/>
    <title>Improving your Android apps with Data Bindings</title>
    <content type="html">&lt;div&gt;
	&lt;a href="https://en.wikipedia.org/wiki/Data_binding"&gt;DataBindings&lt;/a&gt; is a concept that has been there for quite some time with great success in other technologies. However, the Android stack lacked them (at least in an formal way) until June 2015, when Google introduced them in beta during the Google/IO (still in beta version at the moment of writing this post). But, how does DataBinding work? why is DataBinding so important? can it actually help and improve the way we develop Android apps? will this be the new standard when developing Android apps? I really believe so, so let&amp;rsquo;s get started! there is a lot to cover!&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Benefits&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Declarative vs Imperative&lt;/strong&gt;: Data Binding expressions are &lt;a href="https://en.wikipedia.org/wiki/Declarative_programming"&gt;declarative expressions&lt;/a&gt;. Declarative code is much easier to read and understand than their &lt;a href="https://en.wikipedia.org/wiki/Imperative_programming"&gt;imperative&lt;/a&gt; counterpart because they express what you want to do instead of how you want to do it, and it removes the &amp;ldquo;time of execution&amp;rdquo; from the problem as well. In the next example you can see how the imperative version (left) mixes all kind of responsibilities in the code - dealing with temporal state-&amp;nbsp;and results in a much longer/complex version than the &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;functional&lt;/a&gt; counterpart on the right.&amp;nbsp;&lt;img alt="" src="/ckeditor_assets/pictures/22/content_screen_shot_2015-11-09_at_19_54_16.png?1447095303" style="width: 722px; height: 180px; margin-top: 10px; margin-bottom: 10px;" /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="margin-left: 40px;"&gt;
	&lt;small&gt;*&lt;em&gt;Note&lt;/em&gt;: The right side is &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;functional&lt;/a&gt;, a different paradigm, but a pure functional language can be considered declarative and in any case the example shows very clearly the problem with the imperative version.&lt;/small&gt;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Much less code&lt;/strong&gt;: Having expressions in&amp;nbsp;layouts remove a lot of the required code in the activities/fragments to manage the content displayed in the layout elements. Less code means faster development and less bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Reduced dependency between layouts and code&lt;/strong&gt;: Layouts can now describe themselves how to draw the information received, so there is no longer need for all of those highly dependent &lt;tt&gt;setText&lt;/tt&gt;&amp;nbsp;and alike in your fragments/activities. The result is a much more reusable layout and activity/fragment&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Contextual information&lt;/strong&gt;: When dealing with layouts it is very common to check how a particular field will be filled in. Without bindings you would normally need to look for the activity/fragment that uses the layout, then look where the &lt;tt&gt;findViewById&lt;/tt&gt;&amp;nbsp;is performed, and look for the usages to find out how that view gets filled in with your data. With bindings, all your context is within the same file (the XML) so it is immediately visible. More time and effort saved, with no language switch (XML/Java).&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Less error prone&lt;/strong&gt;: In addition to the reduced code, data binding expressions are protected against &lt;u&gt;null pointers exceptions&lt;/u&gt; if the data passed is null. So, code like this:&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;if (order == null) {
   User user = order.getUser(); 
   if (user != null &amp;amp;&amp;amp; user.getName() != null) {
           textField.setText(user.getName());       
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div style="margin-left: 40px;"&gt;
	becomes simply:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;android:text=&amp;quot;@{order.user.name}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div style="margin-left: 40px;"&gt;
	Which wil work even if &lt;tt&gt;order&lt;/tt&gt; or &lt;tt&gt;user&lt;/tt&gt; or &lt;tt&gt;name&lt;/tt&gt; are null. The result is a much less fragile code avoiding errors derived from developers forgetting to do some null checks.&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Compile time resolved expressions&lt;/strong&gt;: In contrast with other technologies, Android data binding are compile time resolved, so you can detect issues during compilation and your app performance does not get affected.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Easy to adopt&lt;/strong&gt;: Adopting bindings is very easy and does not require big refactors. Moreover, you can even decide to include it in your existing projects gradually instead of an all-or-none approach.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;New paradigms and architectures&lt;/strong&gt;: They open the doors for better integration of other programming paradigms and architectures like &lt;a href="https://en.wikipedia.org/wiki/Reactive_programming"&gt;Reactive Programming&lt;/a&gt; or &lt;a href="http://blog.stablekernel.com/mvvm-on-android-using-the-data-binding-library"&gt;MVVM&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Easier to test activities/fragments&lt;/strong&gt;: Less code and dependencies on your activities managing the view results in much easier code to test. This is especially the case if you follow a MVVM approach.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	Basic Concepts&lt;/h4&gt;
&lt;div&gt;
	When working with Data Bindings in Android there are many features to explore. However, I do not want this post to become a huge so let&amp;rsquo;s explore only some of the most important concepts. Please, refer to the &lt;a href="https://developer.android.com/tools/data-binding/guide.html"&gt;android documentation&lt;/a&gt; to get all the information and the installation instructions:&lt;/div&gt;
&lt;h5&gt;
	Using data variables&lt;/h5&gt;
&lt;div&gt;
	The most basic thing in bindings are the expressions. An expression is written in the layout XML and can be composed by several operands, but in general they get the form of:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;TextView android:text=&amp;quot;@{product.name}&amp;quot;&amp;hellip;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	But how does it work? where does the &lt;tt&gt;product&lt;/tt&gt;&amp;nbsp;come from?&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In order to use the variable &lt;tt&gt;product&lt;/tt&gt; you first need to declare it in the layout XML itself, on the top, as part of the &lt;tt&gt;&amp;lt;data&amp;gt;&lt;/tt&gt; tag. So, for example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;layout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
	&amp;nbsp; &amp;nbsp;xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;&amp;gt;
	&amp;nbsp; &amp;nbsp;&amp;lt;data&amp;gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;variable name=&amp;quot;product&amp;quot; type=&amp;quot;com.angelolloqui.Product&amp;quot; /&amp;gt;
	&amp;nbsp; &amp;nbsp;&amp;lt;/data&amp;gt;
	&amp;nbsp; &amp;nbsp;&amp;lt;LinearLayout&amp;hellip;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	The moment you declare the &lt;tt&gt;data&lt;/tt&gt; tag, the system will create a DataBinding class with the name of the xml plus the &amp;ldquo;Binding&amp;rdquo; suffix. So, if your layout XML file is called &lt;tt&gt;product_detail_layout.xml&lt;/tt&gt;, then a new class with the name &lt;tt&gt;ProductDetailLayoutBinding&lt;/tt&gt; will be automatically generated by the SDK, including setters for the variables declared in the XML. In addition to the class, a new &lt;tt&gt;R&lt;/tt&gt; like class called &lt;tt&gt;BR&lt;/tt&gt; will also be generated, containing the name of the variables you have declared so far for the data binding.&lt;/div&gt;
&lt;div&gt;
	Then, all the remaining work left is to pass the variable data from your activity/fragment to the layout. You can do this replacing your old view inflation and &lt;tt&gt;findViewById&lt;/tt&gt; related code:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;setContentView(R.layout.product_view);
TextView nameTextView = (TextView) findViewById(R.id.nameTextView);
TextView priceTextView = (TextView) findViewById(R.id.priceTextView);
...
nameTextView.setText(product.name);
priceTextView.setText(product.price);
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	By something like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;ProductViewBinding binding = DataBindingUtil.setContentView(this, R.layout.product_view);
binding.setProduct(product);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And that is all! you now have the product passed to the view, and the view will be the one deciding in which way to print the product name, price,... &amp;nbsp;with expression like the one above. But there is more than that, because you can use data binding in virtually any property, so for example you could bind the &lt;tt&gt;visibility&lt;/tt&gt; as well with:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;View android:visibility=&amp;quot;@{product.isAvailable? View.VISIBLE : View.GONE}&amp;quot;&amp;hellip;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Or enable a button:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;Button android:enabled=&amp;quot;@{product.isAvailable}&amp;quot;&amp;nbsp;&amp;hellip;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	We can even go a step further and call any instance method or static class method that we have in our project, so we could even do things like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;TextView android:text=&amp;quot;@{DateUtils.formatDate(product.creationDate)}&amp;quot;&amp;hellip;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Or any other combination of attributes that you can think of.&lt;/div&gt;
&lt;div&gt;
	In brief, all your old code doing the &lt;tt&gt;findViewById&lt;/tt&gt;, &lt;tt&gt;setText&lt;/tt&gt;, &lt;tt&gt;setVisibility&lt;/tt&gt;, etc can be removed and replaced by a much shorter and safer version (as explained in benefits)&lt;/div&gt;
&lt;h5&gt;
	Sending Events&lt;/h5&gt;
&lt;div&gt;
	So now we know how to pass information down, from the activity/fragment to the layout. But that is only half of the job, the other half is notifying events up (like a button press). With databindings you can also do that. All you need to do is define a method that receives a &lt;tt&gt;View&lt;/tt&gt; as first parameter (normally an interface):&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;public interface MyHandler {
   public void doMyAction(View view);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And pass the implementor to the view as any other variable:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;public class ProductActivity extends Activity implements MyHandler {
&amp;hellip;

@Override
protected void onCreate(Bundle savedInstanceState) {
   &amp;hellip;   
   binding.setHandler(this);
}

@Override
public void doMyAction(View view) {
	//This is my action
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Then, in your view, you can use it as other bindings:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;data&amp;gt; &amp;nbsp;&amp;nbsp;
&amp;nbsp; &amp;nbsp;&amp;lt;variable name=&amp;quot;handler&amp;quot; type=&amp;quot;com.angelolloqui.MyHandler&amp;quot; /&amp;gt;
&amp;lt;/data&amp;gt;
&amp;hellip;
&amp;lt;Button
&amp;nbsp; &amp;nbsp;android:onClick=&amp;quot;@{handler.doMyAction}&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	When the button gets clicked then the handler method &lt;tt&gt;doMyAction&lt;/tt&gt; will be invoked. Note that at the moment of writing this post, the data binding listeners were not accepting extra parameters, so in some cases you will need to hack a bit around that. Nevertheless, this is a &lt;a href="https://code.google.com/p/android/issues/detail?id=185097"&gt;known issue&lt;/a&gt; that I believe will be added soon.&lt;/div&gt;
&lt;div&gt;
	One important difference with pre-databinding expressions is that the handler can be anything. For this example I opted to implement the handler in the activity to keep it simple, but it could be any other object.&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Advanced concepts&lt;/h4&gt;
&lt;div&gt;
	So far we have seen the very basics of data binding. However, there are many other features. Let&amp;rsquo;s explore a few:&lt;/div&gt;
&lt;h5&gt;
	Layout composition&lt;/h5&gt;
&lt;div&gt;
	If your view is made of small pieces, you can include them as usual and pass the data down to the included views as follows:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;LinearLayout&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;include layout=&amp;quot;@layout/name&amp;quot;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;bind:user=&amp;quot;@{user}&amp;quot;/&amp;gt;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;lt;include layout=&amp;quot;@layout/contact&amp;quot;
&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;bind:user=&amp;quot;@{user}&amp;quot;/&amp;gt;
&amp;lt;/LinearLayout&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5&gt;
	Binding Adapters&lt;/h5&gt;
&lt;div&gt;
	Being able to use data binding expressions in android properties is great, but what if we want something that does not come out of the box in Android? there is where the &lt;tt&gt;@BindingAdapter&lt;/tt&gt; comes into play. Let&amp;rsquo;s explore a concrete example: adding capabilities on &lt;tt&gt;ImageView&lt;/tt&gt; to load a remote image with an data binding expression in the XML.&lt;/div&gt;
&lt;div&gt;
	First, we need to create the class that will handle the load, and a static method annotated with &lt;tt&gt;@BindingAdapter&lt;/tt&gt; with the first parameter receiving the destination object (&lt;tt&gt;ImageView&lt;/tt&gt;), and any other parameter with the data (the url):&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;public class ImageViewBindingAdapter {
   private static ImageLoader imageLoader;

   @BindingAdapter(&amp;quot;imageUrl&amp;quot;)
   public static void loadImage(ImageView view, String url) {
      if (url != null) {
          imageLoader.get(url, ImageLoader.getImageListener(view, 0, 0));
      }
   }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Just by including the previous class, we can use the following expressions anywhere in our app:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;ImageView
&amp;nbsp; &amp;nbsp;app:imageUrl=&amp;quot;@{product.imageUrl}&amp;quot; &amp;hellip;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Which will automatically trigger the &lt;tt&gt;loadImage&lt;/tt&gt; method with the product data.&lt;/div&gt;
&lt;h5&gt;
	Dynamic binding&lt;/h5&gt;
&lt;div&gt;
	We have seen how to pass the data to the bindings by using the setters. However, sometimes you might want to be more dynamic. For example, you could have a generic &lt;tt&gt;RecycleViewAdapter&lt;/tt&gt; that passes the data to the populated items, but for that you need to be flexible about the variable names. You could do that by writing something like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;public void onBindViewHolder(BindingHolder holder, int position) {
   final T item = mItems.get(position);
   holder.getBinding().setVariable(myVariableId, item);
   holder.getBinding().executePendingBindings();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Where&amp;nbsp;&lt;tt&gt;myVariableId&lt;/tt&gt; could have been passed to the adapter with a setter or alike:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;adapter.setMyVariableId(BR.item);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	or even more dynamic with the variable name as a &lt;tt&gt;String&lt;/tt&gt; with something like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Field field = BR.getField(&amp;quot;item&amp;quot;);
adapter.setMyVariableId(field.getInt(field));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	For example, in my current project I can populate a recycle view by using this technique in combination with the binding adapters in the following way:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;&amp;lt;android.support.v7.widget.RecyclerView
&amp;nbsp; &amp;nbsp;app:itemLayout=&amp;quot;@{R.layout.order_list_row_layout}&amp;quot;
&amp;nbsp; &amp;nbsp;app:itemName=&amp;quot;@{`order`}&amp;quot;
&amp;nbsp; &amp;nbsp;app:items=&amp;quot;@{orders}&amp;quot; &amp;nbsp;&amp;nbsp;
&amp;nbsp; &amp;nbsp;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;public class RecycleViewBindingAdapter {
	
	@BindingAdapter({&amp;quot;itemLayout&amp;quot;, &amp;quot;itemName&amp;quot;, &amp;quot;items&amp;quot;})
	public static &lt;t&gt; void configureAdapter(RecyclerView recyclerView, @LayoutRes int layoutId, String variableName, List&lt;t&gt; items) {
		GenericRecyclerAdapter adapter = new GenericRecyclerAdapter();
		adapter.setLayoutId(layoutId);
adapter.setItemName(variableName);
		adapter.setItems(items);
   		recyclerView.setAdapter(adapter);
   }
   ...
}&lt;/t&gt;&lt;/t&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	The previous expressions will automatically populate the recycle view with all orders, and inflate a &lt;tt&gt;order_list_row_layout&lt;/tt&gt; with each &lt;tt&gt;order&lt;/tt&gt; as a variable. No more adapter setup or information management in my activities!&lt;/div&gt;
&lt;h4&gt;
	Problems&lt;/h4&gt;
&lt;div&gt;
	So, the benefits are humongous, but it is fair to point out that not everything is smooth yet. I guess most (if not all) of the issues will be fixed with upcoming releases, but for now these are the main difficulties:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Code completion:&lt;/strong&gt; When writing the XMLs there is no autocomplete, and Android Studio is also not capable of showing up (in red or some other way) when your expressions are incorrect.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Error messages:&lt;/strong&gt; Without code completion you would expect nice error messages during compilation time to quickly detect the expression mistake. However, at the current beta, the compiler can only tell you the XML and line of code, but not the exact expression part that is wrong.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Refactoring and usages not available:&lt;/strong&gt;&amp;nbsp;Android Studio is currently not supporting refactors of expressions, so if you refactor your code you will have compile time errors on any expression using the method. Likewise, the &amp;quot;Find usages&amp;quot; does not show expressions.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Numbers in text&lt;/strong&gt;: When you assign a text to a &lt;tt&gt;TexView&lt;/tt&gt; (or other similar component) you can easily fall in the &amp;ldquo;number trap&amp;rdquo;. If you do something like:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;android:text=&amp;quot;@{orderItem.quantity}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div style="margin-left: 40px;"&gt;
	You will get a runtime error similar to:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;android.content.res.Resources$NotFoundException: String resource ID #0x1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div style="margin-left: 40px;"&gt;
	This is basically because the &lt;tt&gt;Int&lt;/tt&gt; is treated as a resource Id, and not automatically converted to a &lt;tt&gt;String&lt;/tt&gt;. It is very easy to solve, just convert the &lt;tt&gt;Int&lt;/tt&gt; to &lt;tt&gt;String&lt;/tt&gt;&amp;nbsp;with something like a &lt;tt&gt;toString()&lt;/tt&gt; but be aware of it!&amp;nbsp;&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Events can not contain parameters:&lt;/strong&gt; As explained above, a missing feature is the ability to pass extra information when sending events. This will however be resolved in a future version 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	Conclusion&lt;/h4&gt;
&lt;div&gt;
	This has been a pretty long post. We have covered the &lt;strong&gt;basics of Data Binding&lt;/strong&gt; and we explained the most &lt;strong&gt;important features&lt;/strong&gt; of this new technology. We have also covered a few of the current &lt;strong&gt;open issues&lt;/strong&gt;, none of them very critical but somehow annoying.&lt;/div&gt;
&lt;div&gt;
	All in all, DataBinding is a &lt;strong&gt;very exciting technology&lt;/strong&gt;, with great benefits on code quality and huge potential. I have no doubts that this will very quickly become the standard way of building Android apps, so why not start today?&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/34</id>
    <published>2015-02-09T19:09:40Z</published>
    <updated>2015-02-09T20:55:30Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/34-MVC-in-Objective-C-IV-The-Controller-layer"/>
    <title>MVC in Objective-C (IV): The Controller layer</title>
    <content type="html">&lt;h4&gt;
	Disclaimer&lt;/h4&gt;
&lt;div&gt;
	It has been a long time since I started with the &lt;a href="http://angelolloqui.com/blog/26-MVC-in-Objective-C-I-Introduction"&gt;MVC post series&lt;/a&gt;. It is not that I didn&amp;rsquo;t want to write about it, but by the time I was supposed to start with this post &lt;a href="http://www.objc.io/issue-1/"&gt;Objc.io&lt;/a&gt; came with a very good issue on &lt;a href="http://www.objc.io/issue-1/"&gt;View Controllers&lt;/a&gt;, which made my post almost irrelevant as most of the ideas were already mentioned there. Anyway, after receiving quite a lot of messages asking for this post, I finally decided to spend some time and try to address some new points and explain those that are important. That being said, if you haven&amp;rsquo;t read objc.io issue do not hesitate because it is worth the time and an excellent complement for this post.&lt;/div&gt;
&lt;h2&gt;
	The controller role&lt;/h2&gt;
&lt;div&gt;
	In MVC, the Controller is the part of your software that &lt;strong&gt;communicates&lt;/strong&gt; your &lt;a href="http://angelolloqui.com/blog/27-MVC-in-Objective-C-II-Model"&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/a&gt; layer with your &lt;a href="http://angelolloqui.com/blog/29-MVC-in-Objective-C-III-The-view-layer"&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/a&gt; layer, and it is by far the most abused role in iOS project. But lets first define how a good controller should look like:&lt;/div&gt;
&lt;div&gt;
	A good controller should know how to request data to the model but not its internal details or how to fetch it; it should know what view to use but not how to draw it; it should be the one receiving events from one layer and passing messages to the other layer but not the one creating the events. In brief, a Controller should be the glue needed to connect the Model and the View, but ideally it should not do anything else than that.&lt;/div&gt;
&lt;div&gt;
	However, in iOS projects we often find controllers that make lot more duties that the ones they should. This is not a coincidence: delegation patterns used in most of Apple&amp;rsquo;s components can be easily implemented on controllers, and the &lt;tt&gt;UIViewController&lt;/tt&gt; API exposes methods like &lt;tt&gt;viewWillLayoutSubviews&lt;/tt&gt; that should concern the View role only. Even the &lt;tt&gt;UIViewController&lt;/tt&gt; name denotes this lack of real distinction between views and controllers!&lt;/div&gt;
&lt;div&gt;
	Nevertheless, writing good controllers make your code lot more &lt;strong&gt;reusable&lt;/strong&gt; (not only the controllers but the other layers also), &lt;strong&gt;easier to test&lt;/strong&gt;, more &lt;strong&gt;maintainable&lt;/strong&gt; and more &lt;strong&gt;flexible&lt;/strong&gt;. So, lets review some important guidelines:&lt;/div&gt;
&lt;!--more--&gt;
&lt;h3&gt;
	Define controllers by functionality and not by UI elements&lt;/h3&gt;
&lt;div&gt;
	When defining a controller it is important to think about the specific &lt;strong&gt;behaviour/features&lt;/strong&gt; that we are trying to build rather than the specific UI elements that we need to use.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	For example, if you are implementing a controller to show a table of results, do not call it &lt;tt&gt;MyTableViewController&lt;/tt&gt; and build it to be used with a table only. Instead, try defining it as a controller that could potentially be used to present data inside a table, a collection view or any other component that can handle multiple elements. You could put in your controller the required logic to request data to the Model and the code to send that data to the View, but the View API should be generic enough to not expose any implementation details of it. If you find yourself changing the controller code when you move from a table to a collection view then you are probably not doing enough in your View layer.&lt;/div&gt;
&lt;div&gt;
	As a tip to start, I suggest you move out of your controllers the &lt;tt&gt;UITableViewDataSource&lt;/tt&gt;, &lt;tt&gt;UITableViewDelegate&lt;/tt&gt; and all the protocols/methods alike. What I normally do is define a &lt;strong&gt;generic datasource&lt;/strong&gt; that is instantiated inside the xib file and contains all references to the table/collection view that it will handle. From the controller perspective there are no views linked to it, just a datasource object that provides generic methods like &lt;tt&gt;reloadWithData:(NSArray *)data&lt;/tt&gt;, and it is the datasource the one that will transform the Model objects in the array into concrete &lt;tt&gt;UITableViewCells&lt;/tt&gt; if it is used with a table or &lt;tt&gt;UICollectionViewCells&lt;/tt&gt; if it is used with a collection view, with no changes on the controller. The datasource is generic, so the same one can be reused across the whole project, reducing bugs and development time.&lt;/div&gt;
&lt;div&gt;
	A real and fully functional example of such view controller is here:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//MOACartViewController.h
@interface MOACartViewController ()
@property (strong, nonatomic) IBOutlet MOADataSource *dataSource;
@end

//MOACartViewController.m
@implementation MOACartViewController

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    __block typeof(self) weakSelf = self;
    [MOFCartDAO loadCartOnResult:^(MOFOrder *result) {
        [weakSelf.dataSource reloadWithData:result.orderItems];
    } onError:^(NSError *error) {
        [weakSelf.dataSource reloadWithData:@[error]];
    }];
}

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	(You can find an implementation of how I use such a DataSource in other projects combined with some other techniques &lt;a href="https://gist.github.com/angelolloqui/88647fdfaae19f9d6c89"&gt;here&lt;/a&gt;)&lt;/div&gt;
&lt;div&gt;
	As you can see, this controller is used to fetch a cart from server and present the list of items, but &lt;strong&gt;it does not know nor expose any implementation/UI details&lt;/strong&gt;. In fact, this same controller can be used for example in iPhone together with a table and in iPad in a collection view without any single change on the controller. Ultra slim controller!&lt;/div&gt;
&lt;div&gt;
	The same idea could be used to define other view components that, through &lt;strong&gt;generic APIs&lt;/strong&gt;, move the view details away from the view controller.&lt;/div&gt;
&lt;h3&gt;
	Do not write any view related code&lt;/h3&gt;
&lt;div&gt;
	Linked to the previous point, view related code should not be placed inside view controllers. And by view related code I mean any code used for creating views and subviews, setting their colors, changing layouts, animating things up and down,... Of course your controller will need to have an associated View object and it might need to do very basic layout to put it in place, but you should keep it to the minimum extent possible. If you are setting colors, fonts, texts or changing layouts/frames from your view controller then you are mixing responsibilities. &lt;strong&gt;Keep the view management in the view file&lt;/strong&gt; (either a xib file or a &lt;tt&gt;UIView&lt;/tt&gt; subclass), provide &lt;strong&gt;generic APIs&lt;/strong&gt; that are not dependent on the UI elements used and you will be able to reuse your controllers with different views easily.&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Do not write any model related code&lt;/h3&gt;
&lt;div&gt;
	By model I mean anything that handles data or state. So for example, if you need to fetch data from a third party service, write a proper Model layer that gives you the data ready to be used by the View, as we explained in first post or as shown in the previous example with the cart items. Your controller will be the one that &lt;strong&gt;knows what kind of data to request&lt;/strong&gt; and how to pass it to the view, but it is &lt;strong&gt;not the one actually fetching&lt;/strong&gt; or drawing.&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Do not write platform dependent code&lt;/h3&gt;
&lt;div&gt;
	If your controller does only think about functionality and it does not contain view related code (as explained before), then it should not need any platform dependent code. There are basically two forms of &lt;strong&gt;platform dependent code&lt;/strong&gt;:&lt;/div&gt;
&lt;p&gt;
	&lt;strong&gt;1. Different view layouts:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;if (IPAD) {
    _myCustomView.frame = CGRectMake(0, 0, 200, 200);
    _title.text = data.veryLongDescription;
}
else {
    _myCustomView.frame = CGRectMake(0, 0, 50, 50);
    _title.text = data.shortDescription;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	This code is &lt;strong&gt;wrong&lt;/strong&gt; in many ways. First, because as we saw before, &lt;strong&gt;view manipulation&lt;/strong&gt; should be done in the View layer, not in the controller. Second, &lt;strong&gt;hardcoding&lt;/strong&gt; values like the frame diminishes our controller reusability, they should always be relative to the other components of the view (again, part of the view logic). Instead, try to set proper &lt;strong&gt;autoresizing&lt;/strong&gt; mask or &lt;strong&gt;autolayout&lt;/strong&gt; properties in your View level. If that is not enough, then use &lt;strong&gt;different xib&lt;/strong&gt; files (~iPhone and ~iPad, or Size classes) or move this logic to a &lt;strong&gt;&lt;tt&gt;UIView&lt;/tt&gt; subclass&lt;/strong&gt; if you are not using Interface Builder. You can also create &lt;strong&gt;multiple &lt;tt&gt;IBOutlets&lt;/tt&gt;&lt;/strong&gt;, one for the long title and another for short title, and set the text to both no matter the device (~iPhone XIB could set one, while the ~iPad could set the other).&lt;/div&gt;
&lt;p&gt;
	&lt;strong&gt;2. Different event handling:&lt;/strong&gt;&lt;/p&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;- (IBAction)myCustomAction:(id)sender {
    if (IPAD) {
        //Do action A
    }
    else {
        //Do action B
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	This code denotes a &lt;strong&gt;failure on splitting responsibilities&lt;/strong&gt;. If you need to perform Action A in one case and Action B in another, then just create 2 methods that clearly state their responsibility in the method name. Then, from your View just &lt;strong&gt;connect the proper method for each case&lt;/strong&gt;. It will simplify things because you will clearly see what does the method do just by seeing the name and it will not result on some different behaviour depending on platform that is only known when checking the controller&amp;rsquo;s method source code.&lt;/div&gt;
&lt;h3&gt;
	Use composition with child controllers&lt;/h3&gt;
&lt;div&gt;
	Before iOS5 a controller was supposed to deal with a full screen view. However, that changed when Apple introduced child controllers. Nowadays there is no point on keeping a controller &amp;ldquo;per screen&amp;rdquo; and you should in fact decompose your UI in many different sections controlled by their own controller and view.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	You can &lt;strong&gt;add a child &lt;/strong&gt;view controller by doing:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;- (void) displayContentController: (UIViewController *)contentVC {
   [self addChildViewController:contentVC];
   contentVC.view.frame = [self frameForContentController];
   [self.view addSubview:self.contentVC.view];
   [content didMoveToParentViewController:self];
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And &lt;strong&gt;remove&lt;/strong&gt; it with:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;- (void)hideContentController:(UIViewController *)contentVC {
   [contentVC willMoveToParentViewController:nil];
   [contentVC.view removeFromSuperview];
   [contentVC removeFromParentViewController];
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;a href="https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/CreatingCustomContainerViewControllers/CreatingCustomContainerViewControllers.html"&gt;More information here&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
	The composite pattern is one of the best ones for building reusable components, and it is preferable over others like inheritance.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Why? well, when you build with &lt;u&gt;&lt;strong&gt;composition&lt;/strong&gt;&lt;/u&gt; in mind you normally create a lot of &lt;strong&gt;small&lt;/strong&gt; components with very &lt;strong&gt;simple&lt;/strong&gt; and &lt;strong&gt;clear&lt;/strong&gt; responsibilities. Because they are small and simple, they rarely require changes, they are easy to reuse and they can be tested with little effort. Then, when it is time to make use of them, you can easily add them in your xib file and connect them appropriately. If you need to replace some functionality for some specific screen or platform you can easily modify the composition to include other components or connect them differently.&lt;/div&gt;
&lt;div&gt;
	On the other hand, If you use &lt;u&gt;&lt;strong&gt;inheritance&lt;/strong&gt;&lt;/u&gt;, you would create a base controller with some of the generic functionality, and then many different subclasses overriding existing behaviour or extending them. The main problem of this approach is that it requires a lot of &lt;strong&gt;knowledge about the base class&lt;/strong&gt; (or classes because is common to have multiple levels of inheritance for complex views) and they need to expose a lot of &lt;strong&gt;internal details&lt;/strong&gt; to make them customizable. Exposing internal details is exactly what you want to avoid to create maintainable code and it is a pain when you need to reuse it. Besides, all your subclasses will now depend on the base class, which is normally quite &lt;strong&gt;complex&lt;/strong&gt;, and any change in there can potentially affect all subclasses in many different ways. Resulting code is less reusable and it is prone to errors when modified.&lt;/div&gt;
&lt;div&gt;
	So, if you want to make your code reusable, &lt;strong&gt;divide&lt;/strong&gt; your UI in small pieces, make them &lt;strong&gt;generic&lt;/strong&gt;, &lt;strong&gt;independent&lt;/strong&gt; from each other (using delegates or blocks in their API) and &lt;strong&gt;connect&lt;/strong&gt; them creating a composition from a &lt;strong&gt;parent controller that knows how the &amp;ldquo;orchestra&amp;rdquo; works&lt;/strong&gt; together.&lt;/div&gt;
&lt;h3&gt;
	Understand and respect the life cycle&lt;/h3&gt;
&lt;div&gt;
	&lt;tt&gt;UIViewControllers&lt;/tt&gt; have a well defined life cycle that every developer should respect and understand. A typical life sequence could be:&lt;/div&gt;
&lt;div&gt;
	- &lt;tt&gt;init&lt;/tt&gt; &amp;rarr; &lt;tt&gt;viewDidLoad&lt;/tt&gt; &amp;rarr; &lt;tt&gt;viewWillAppear&lt;/tt&gt; &amp;rarr; &lt;tt&gt;viewDidAppear&lt;/tt&gt; &amp;rarr;.... &amp;rarr; &lt;tt&gt;viewWillDisappear&lt;/tt&gt; &amp;rarr; &lt;tt&gt;viewDidDisappear&lt;/tt&gt; &amp;rarr; &lt;tt&gt;dealloc&lt;/tt&gt;&lt;/div&gt;
&lt;div&gt;
	Of course there are many other methods that will/could be called like &lt;tt&gt;loadView&lt;/tt&gt;, &lt;tt&gt;viewWillLayoutSubviews&lt;/tt&gt;, &lt;tt&gt;willRotateToInterfaceOrientation&lt;/tt&gt; or &lt;tt&gt;didReceiveMemoryWarning&lt;/tt&gt; among many others. You can check the official Apple &lt;a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/index.html"&gt;documentation here&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
	However, I often see in many projects (even in popular open source) that they do not follow the life cycle appropriately making code to behave in an unexpected way. For example, some &lt;strong&gt;common errors&lt;/strong&gt; are:&lt;/div&gt;
&lt;div&gt;
	&lt;ul&gt;
		&lt;li&gt;
			&lt;strong&gt;Set view properties&amp;nbsp;in &lt;tt&gt;init&lt;/tt&gt;&lt;/strong&gt; method (data, frame, colors, &amp;hellip;)&amp;nbsp;&amp;rarr; view is not created yet, and should not be. It is lazy loaded.&lt;/li&gt;
		&lt;li&gt;
			&lt;strong&gt;Assume &lt;tt&gt;viewDidLoad&lt;/tt&gt; will be called only once &lt;/strong&gt;&amp;rarr; the view of a VC can be destroyed on low memory conditions and recreated later, calling this more than once.&lt;/li&gt;
		&lt;li&gt;
			&lt;strong&gt;Assume frames are properly set during &lt;tt&gt;viewDidLoad&lt;/tt&gt; &lt;/strong&gt;&amp;rarr; actual frames are not set yet but a default placeholder one is used, they could be incorrect.&lt;/li&gt;
		&lt;li&gt;
			&lt;strong&gt;Do not revert operations&lt;/strong&gt; started on &lt;tt&gt;viewWillAppear&lt;/tt&gt; on their &lt;tt&gt;viewWillDisappear&lt;/tt&gt; and the alike. &amp;rarr; code should be symmetric when possible&lt;/li&gt;
		&lt;li&gt;
			&lt;strong&gt;Manually call to life-cycle methods&lt;/strong&gt; like &lt;tt&gt;viewWillAppear&lt;/tt&gt;. &amp;rarr; life-cycle methods are called by UIKit, never by the developer or unexpected results might happen.&lt;/li&gt;
		&lt;li&gt;
			&lt;strong&gt;Do not call &lt;tt&gt;[super]&lt;/tt&gt; methods&lt;/strong&gt;, especially common in &lt;tt&gt;viewWillAppear&lt;/tt&gt;. &amp;rarr; Always call super or unexpected effects might take place.&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;h3&gt;
	Unidirectional dependencies&lt;/h3&gt;
&lt;div&gt;
	Dependencies are one of the causes why code is not reusable. When writing code, you must always have a very clear picture of how code relates to each other and implement a clean design where dependencies are &lt;strong&gt;structured as a tree&lt;/strong&gt; rather than a graph, from &lt;strong&gt;top to bottom&lt;/strong&gt; with &lt;strong&gt;linear&lt;/strong&gt; and &lt;strong&gt;unidirectional&lt;/strong&gt; dependencies.&lt;/div&gt;
&lt;div&gt;
	For example, if controller A uses B, you should think of A as the owner and B as slave, where the slave (B) should never communicate directly to the owner (A) but through a generic API (delegates or blocks are most common approaches).&lt;/div&gt;
&lt;div&gt;
	Another very interesting principle to take in mind is the &lt;a href="http://en.wikipedia.org/wiki/Law_of_Demeter"&gt;Law of Demeter&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
	Basically, what this principle says is that your components are shy, so shy that they can &lt;strong&gt;only communicate&lt;/strong&gt; with their &lt;strong&gt;direct friends&lt;/strong&gt;, but never to friends of friends.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	It is common to see code that pushes a view controller, and then access certain properties in that controller and operate on them. Things like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;[self.detailViewController.selectedItem markUnread];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Are breaking the Law of Demeter and making use of multiple levels of abstraction. Your controller should only access the first level of the public API, and not anything else contained inside it.&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Never modify parent contexts&lt;/h3&gt;
&lt;div&gt;
	Another very common mistake is to assume that your view controller will be always used in some particular way, and therefore make changes on a context that it does not own.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	For example, if controller A presents a modal controller B to select a city from a list of cities, you might be tempted to dismiss the controller when a city is selected from B itself. Instead, you better call a delegate (or block) when the city is selected and let A do the inverse operation that it did to present B (dismiss or pop). This way, your class B can be reused in other contexts and your push/pop operations are placed in the same context.&amp;nbsp;&lt;/div&gt;
&lt;h2&gt;
	Conclusions&lt;/h2&gt;
&lt;div&gt;
	&lt;strong&gt;MVC is not a silver bullet&lt;/strong&gt;, and some Cocoa decisions make it sometimes even harder to implement it properly. However, if you are careful you can write apps that properly follows the MVC principles, resulting in more &lt;strong&gt;reusable&lt;/strong&gt; and &lt;strong&gt;maintainable&lt;/strong&gt; code.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Lastly, if you are not happy with MVC, then explore other alternatives. A very interesting one worth mention is the &lt;a href="http://en.wikipedia.org/wiki/Model_View_ViewModel"&gt;MVVM&lt;/a&gt;, together with Reactive programming on the hands of &lt;a href="https://github.com/ReactiveCocoa/ReactiveCocoa"&gt;Reactive Cocoa&lt;/a&gt;. More on this in a future article.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/33</id>
    <published>2014-12-25T12:32:35Z</published>
    <updated>2015-02-09T19:05:39Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/33-Writing-Clean-Code-iOSX-Enterprise-Summit-2014-"/>
    <title>Writing Clean Code (iOSX Enterprise Summit 2014)</title>
    <content type="html">&lt;p&gt;
	For those of you who attended the &lt;a href="http://iosxenterprisesummit.com/"&gt;iOSX Enterprise Summit&lt;/a&gt;, here is my presentation about good practices for writing clean code.&lt;/p&gt;
&lt;p&gt;
	&lt;cite&gt;What exactly is clean code? is your code clean? how can you improve your code quality? In this presentation we will answer these and other questions by exploring some of the general principles that any clean code should have. The presentation will cover very different levels of abstraction, going from the lowest ones to build up to the highest ones.&lt;br /&gt;
	&lt;br /&gt;
	We will get started by defining &amp;quot;clean code&amp;quot; and understanding why readability is so important. We will dive into good codestyle practices by analysing naming conventions, code formatting, comments... We will then continue with good practices whenwriting functions, methods or classes; and finish up with some of the most useful software design patterns applied to mobile platforms.&lt;br /&gt;
	&lt;br /&gt;
	All along the presentation we will show specific code examples written in Objective-C and/or Swift that expose some of the most common anti-patterns found in iOS development. By the end of the presentation you will be able to quickly detect anycode smell in your project and you will be better prepared to write a &amp;quot;cleaner&amp;quot; alternative. &lt;/cite&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;
	&lt;iframe allowfullscreen="" frameborder="0" height="450" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/43001894" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" width="700"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;div style="margin-bottom:5px"&gt;
	&lt;strong&gt;&lt;a href="//www.slideshare.net/AngelGarciaOlloqui/writing-clean-code" target="_blank" title="Writing clean code"&gt;Writing clean code&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="//www.slideshare.net/AngelGarciaOlloqui" target="_blank"&gt;Angel Garcia Olloqui&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/21/content_15648374778_07c0341ed3_o.jpg?1423508694" style="width: 700px;" /&gt;&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/32</id>
    <published>2014-02-09T19:11:06Z</published>
    <updated>2014-02-09T20:03:27Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/32-Chain-of-Responsibility-pattern"/>
    <title>Chain of Responsibility pattern</title>
    <content type="html">&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Today I am going to write about a pretty uncommon but very useful pattern in iOS apps, called &lt;strong&gt;Chain of Responsibility&lt;/strong&gt;, exploring how we can take advantage of some Cocoa methods to implement it easily and how/when to use it in your iOS apps to reduce dependencies in modular apps.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	But before starting, I want to acknowledge &lt;a href="https://twitter.com/casademora"&gt;Saul Mora&lt;/a&gt; because it was on one of his presentations (about a year ago) where I first saw this pattern in action. He applied it for the Model layer, while I do it for the Controller flow mostly, but the main idea behind the whole post is basically the same and you could apply it for either case. I suggest you spend some time checking &lt;a href="http://vimeopro.com/360conferences/360idev-2013/video/74745264"&gt;his presentation&lt;/a&gt; about this pattern, very inline with this post.&lt;/div&gt;
&lt;div&gt;
	So that been said, let&amp;rsquo;s start with some basic concepts.&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2&gt;
	Intro to the CoR pattern&lt;/h2&gt;
&lt;div&gt;
	From &lt;a href="http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern" style="font-size: 12px;"&gt;Wikipedia&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
	&lt;cite&gt;In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain. A mechanism also exists for adding new processing objects to the end of this chain.&lt;br /&gt;
	This pattern promotes the idea of loose coupling, which is considered a programming best practice.&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	As we can see from the previous definition, we have two entities in this pattern:&amp;nbsp;
	&lt;ul&gt;
		&lt;li&gt;
			&lt;strong&gt;Commands:&lt;/strong&gt; This entity contains the information about the actions to perform and data associated to it.&lt;/li&gt;
		&lt;li&gt;
			&lt;strong&gt;Processing objects:&lt;/strong&gt; This entity receives a command to handle and performs some logic on it. It also contains some kind of reference to the next node in the chain.&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
	The idea is that a command is dispatched on some element of the chain, and it navigates up until one of the processing objects handles it. This way we can make very loosely coupled and reusable components because they can fire commands without knowing who will handle it (if anyone), but we will see some example of this later.&lt;/div&gt;
&lt;h2&gt;
	CoR in Cocoa&lt;/h2&gt;
&lt;div&gt;
	In iOS/Mac apps, this pattern is extensively used by the UI. It is implemented as part of the &lt;a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UIResponder_Class/Reference/Reference.html"&gt;UIResponder class&lt;/a&gt;, which is the base class for all UI elements such as &lt;tt&gt;UIView&lt;/tt&gt;, &lt;tt&gt;UIViewController&lt;/tt&gt;, &lt;tt&gt;UIWindow&lt;/tt&gt; and even the &lt;tt&gt;UIApplicationDelegate&lt;/tt&gt; (similarly on Cocoa with the NS counterpart).&amp;nbsp;&lt;tt&gt;UIResponder&lt;/tt&gt; contains references to the parent element in the chain (named &lt;tt&gt;nextResponder&lt;/tt&gt;), forming a tree with the &lt;tt&gt;UIApplicationDelegate&lt;/tt&gt; as the root node and the deepest &lt;tt&gt;UIView&lt;/tt&gt; pieces as the leafs. So, a typical tree branch would go from a button to the superview, and from there to the view controller, the navigation controller, the window and then the AppDelegate. Extended documentation &lt;a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/eventoverview/EventArchitecture/EventArchitecture.html"&gt;can be found here&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
	Besides the &lt;tt&gt;nextResponder&lt;/tt&gt; attribute, UIKit also provides a few methods for sending an action up in the chain, which is commonly used for touches and similar UI events. The most interesting ones are:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;tt&gt;[UIApplication sendAction:to:from:forEvent:]&lt;/tt&gt;: This method sends an specific action to the current First Responder in your app.&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;[UIResponder canPerformAction:withSender:]&lt;/tt&gt;: Returns a BOOL indicating if the receiver can handle an specific action.&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;[UIResponder targetForAction:withSender:]&lt;/tt&gt;: Returns the first element in the responder chain that can handle the action. It calls &lt;tt&gt;canPerformAction:withSender:&lt;/tt&gt; on each next responder to determine whether it can invoke the action. iOS7+ only.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Lastly, another interesting note to make is that the responder chain is also exposed in Interface Builder, which could help as connecting actions in our views with the corresponding handler somewhere else in the responder chain.&lt;/div&gt;
&lt;h2&gt;
	Implementing CoR for modular apps&lt;/h2&gt;
&lt;div&gt;
	So we already have processing objects (the &lt;tt&gt;UIResponders&lt;/tt&gt; in the responder chain), we can send commands down in the responder chain by using &lt;tt&gt;[UIApplication sendAction:to:from:forEvent:]&lt;/tt&gt; or find the handler up in the chain by the use of &lt;tt&gt;[UIResponder targetForAction:withSender:]&lt;/tt&gt;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	However, there are a few things that are not solved yet:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		In order for &amp;nbsp;&lt;tt&gt;[UIApplication sendAction:to:from:forEvent:]&lt;/tt&gt; to work we need to set the &lt;tt&gt;firstResponder&lt;/tt&gt; on the firing object, which is not always possible (by default &lt;tt&gt;UIResponder&lt;/tt&gt; return NO to &lt;tt&gt;canBecomeFirstResponder&lt;/tt&gt;, except for some specific cases like &lt;tt&gt;UITextFields&lt;/tt&gt;&amp;nbsp;with side effects).&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;[UIResponder targetForAction:withSender:]&lt;/tt&gt; is iOS7+ only, so we need to figure out something similar if we need support for iOS6 and down.&lt;/li&gt;
	&lt;li&gt;
		Sending actions is most of the times not enough. You normally will want some extra contextual information together with the action.&lt;/li&gt;
	&lt;li&gt;
		UIKit Responder chain does not allow changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	All the points above could be solved with some hacking. For example, we could swizzle the &lt;tt&gt;[UIResponder canBecomeFirstResponder]&lt;/tt&gt; to return YES by default, so we could set the first responder to any responder in the chain and allow the &lt;tt&gt;sendAction:to:from:forEvent:&lt;/tt&gt; to pass the command to any point in the chain, and we could implement our own version of &lt;tt&gt;[UIResponder targetForAction:withSender:]&lt;/tt&gt; for iOS6 and lower. However, all these hacks look like an abuse to me.&lt;/div&gt;
&lt;div&gt;
	Instead we &amp;nbsp;can easily &lt;strong&gt;implement our own dispatcher methods&lt;/strong&gt;, similar to the ones provided by Cocoa, that with just a few lines of code will look for the next handler in the responder chain and pass it our specific command. This approach gives us freedom to define the commands as they best fit in our project, containing any &lt;strong&gt;contextual information&lt;/strong&gt;, &amp;nbsp;and we do not need to mess with the system&amp;rsquo;s methods. With a little extra effort we could &amp;ldquo;remember&amp;rdquo; the last firing object and command to allow a similar behaviour to the &lt;tt&gt;[UIApplication sendAction:to:from:forEvent:]&lt;/tt&gt; but without hacking in the &lt;tt&gt;[UIResponder canBecomeFirstResponder]&lt;/tt&gt; method.&lt;/div&gt;
&lt;div&gt;
	&lt;a href="https://gist.github.com/angelolloqui/8807330"&gt;Here you can see a very basic implementation&lt;/a&gt; that allows you to send a custom made command up in the chain by only using the &lt;tt&gt;nextResponder&lt;/tt&gt;&amp;nbsp;compatible with old iOS versions and following similar conventions to those provided by Cocoa.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	However, this simple construction does not allow us to modify the responder chain, which can be very useful for dynamic behaviours or adding extra nodes at the end of the chain. If you only want to add a single responder at the end you can easily override the &lt;tt&gt;nextResponder&lt;/tt&gt; method in your &lt;tt&gt;UIApplicationDelegate&lt;/tt&gt; like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//MyAppDelegate.m
- (UIResponder*)nextResponder {
	return _myCustomNextResponder;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Still, deeper changes in the chain will be difficult (and dangerous) to implement. For that reason, I implemented &lt;a href="https://gist.github.com/angelolloqui/8807692"&gt;a different version that &amp;ldquo;creates&amp;rdquo; a &lt;strong&gt;second chain&lt;/strong&gt;&lt;/a&gt;, accepting any &lt;tt&gt;NSObject&lt;/tt&gt; as part of the chain, and providing setters to &lt;strong&gt;change the chain on runtime&lt;/strong&gt;. Of course, this second chain relies on &lt;tt&gt;nextResponder&lt;/tt&gt; by default, so the chain will be set up automatically as the UIKit &lt;tt&gt;nextResponder&lt;/tt&gt; chain does for any &lt;tt&gt;UIResponder&lt;/tt&gt; object.&amp;nbsp;&lt;/div&gt;
&lt;h2&gt;
	How to use it&lt;/h2&gt;
&lt;div&gt;
	So now we have the chain in place. How can we use it?&lt;/div&gt;
&lt;div&gt;
	&lt;strong&gt;Sending&lt;/strong&gt; a command with the previous code is as simple as:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//In your command firing object. Example: VC as a response to an event
- (IBAction)myEventFireAction {
	[self sendCommand:[MyConcreteCommand command]];
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	While &lt;strong&gt;handling&lt;/strong&gt; the command could be:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//In your command consumer. Example: AppDelegate
- (void)performMyConcreteCommand:(MyConcreteCommand *)command {
	//Handle the command
}&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	For this example, I am using a specific &lt;strong&gt;command subclass&lt;/strong&gt; defined as:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;@interface MyConcreteCommand : AGCommand
@end

@implementation MyConcreteCommand
- (SEL)action {
    return @selector(performMyConcreteCommand:);
}
@end&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	We could also define commands to return (&lt;tt&gt;IBAction&lt;/tt&gt;) so we can use them from Interface Builder, but then we need to realize that in that case the firing object will be the UI element that fired the action (&lt;tt&gt;UIButton&lt;/tt&gt; normally) and not the command itself, making everything a little more complex because you need to check the sender type and you can not pass contextual information. Moreover, in case you use the &amp;ldquo;parallel&amp;rdquo; chain commented in the previous section you will be using to different chains depending if the action is fired from the IB or from code. Hence, &lt;strong&gt;I personally prefer to avoid &lt;tt&gt;IBAction&lt;/tt&gt; commands handlers &lt;/strong&gt;and fire them all from source code as shown above, it adds a little more code to your controllers but keeps things explicit and simple.&lt;/div&gt;
&lt;div&gt;
	Of course, you could create one command &amp;ldquo;per action&amp;rdquo; or a generic command that stores information for performing multiple actions. My personal preference is to &lt;strong&gt;create multiple commands&lt;/strong&gt;, because it helps separating concerns, and I &lt;strong&gt;support it with a protocol&lt;/strong&gt; where I define all command actions to improve autocompletion and refactoring in the IDE.&lt;/div&gt;
&lt;div&gt;
	For example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;@protocol MyCommandConsumer &lt;nsobject&gt;
@optional
- (void)performMyConcreteCommand:(MyConcreteCommand *)command;
@end&lt;/nsobject&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And finally, you can even provide a &lt;strong&gt;factory method&lt;/strong&gt; in your command class, that contains the logic for command creation and use the command similarly to other class clusters in Objective-C. Factory methods are very useful for generic components as it allows the component to fire multiple actions without actually knowing anything about them.&lt;/div&gt;
&lt;h2&gt;
	Advantages&lt;/h2&gt;
&lt;div&gt;
	The whole pattern is very interesting in multiple ways. Lets explore some of the benefits:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Reduced amount of dependencies&lt;/strong&gt; (the only dependency is to the CoR pattern itself), which results in very clean and reusable code. Your components or controllers do not depend on others, and completion blocks and delegates can be replaced by commands easily.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Better Separation of Concerns&lt;/strong&gt;:&amp;nbsp;By using a pattern like this one you could very easily create components that only do whatever they are supposed to do, and fire commands for actions that they are not ready to handle or might result on a side effect. Network access, navigation controller push/pop, global events,... they can all be self contained in nodes at the end of the chain letting our components with no dependency on them.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Pluggable architecture and dynamic behaviours&lt;/strong&gt;: The use of commands helps when you have to design an application composed by multiple modules that can be plugged in or out (even on runtime). You could easily place your modules behind the &lt;tt&gt;UIApplication&lt;/tt&gt; delegate responder and you could &amp;nbsp;adapt the chain to your configuration on compile time or runtime to create a fully customizable application. We will dig into this idea with a real example later on this post.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Allows multiple handlers for same request&lt;/strong&gt;: By using commands you can add functionality to your apps without changing the original code, just by adding new responders in the chain in the proper places and let the fire the command up. This could be very useful for things such as analytics, where you do not want to modify the behaviour but add an extra handler for the tracking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	Disadvantages&lt;/h2&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Extra complexity&lt;/strong&gt;: The most clear disadvantage of the pattern is the complexity added to the project. It requires new developers to get acquainted with the pattern before being able to work with it, so the &lt;strong&gt;learning curve&lt;/strong&gt; is also deeper than in a regular project. In cases where the project is simple the advantages you will get from the pattern will not pay off for the extra complexity added.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Difficult debugging&lt;/strong&gt;: Even when you are familiar with the pattern, debugging commands is tricky. In regular projects an action is normally consumed within the limits of the view/viewcontroller associated to it (or its delelgate/blocks handlers), but with the commands the action could be consumed in a completely unrelated class. It is comparable to debugging &amp;nbsp;Observers or Notifications, although&amp;nbsp;the use of methods like &lt;tt&gt;targetForCommand&lt;/tt&gt; can help a lot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;
	A real life example&lt;/h2&gt;
&lt;div&gt;
	OK, I exposed a few use cases already but you might be wondering if I use this pattern in real apps. The answer is yes, but let me give you an example.&lt;/div&gt;
&lt;div&gt;
	For my last project I had to build an app that could be resold as a white label app for multiple customers. This &lt;strong&gt;app should be able to add, remove or modify&lt;/strong&gt; some of the features and navigation flows &lt;strong&gt;depending on an external app configuration file&lt;/strong&gt;. So for example, for app A, we could have lists of products that when tapped go to a product detail, while for app B the same action would add the product to a shopping basket and for C no action is performed.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	The whole app has been designed with the &lt;strong&gt;CoR&lt;/strong&gt; pattern using the code explained above. So I have generic components like DataSources, that encapsulate the logic behind a single concern (managing the table with a giving array of data objects for example), and that &lt;strong&gt;fires commands when interactions occur&lt;/strong&gt;. When the app is started, I load some &lt;strong&gt;extra responders &lt;/strong&gt;(modules) at the end of the chain based on the app configuration (some modules for app A will be different than for app B or C while others are the same) and let the chain of responsibility to handle the cell tap.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	So the whole flow goes like this:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		App is started, app A, B and C load different modules in the chain&lt;/li&gt;
	&lt;li&gt;
		A generic datasource draws all cells for the products&lt;/li&gt;
	&lt;li&gt;
		User taps on a product cell&lt;/li&gt;
	&lt;li&gt;
		A command is created based on the object associated to the cell (using a generic factory method using the cell object, so no dependencies here)&lt;/li&gt;
	&lt;li&gt;
		The command is fired and goes up in the chain looking for a responder that can handle it&lt;/li&gt;
	&lt;li&gt;
		For app A, a module with a product detail push behaviour will be found, while for B it will be one with the model logic for adding to the shopping cart and for C no responder or a non-op.&amp;nbsp;&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	What is even better, taps on some cells might behave differently in some specific situations (inside some special view controllers). In this case, the controller can easily consume the commands and so adapting the behaviour of your app easily.&lt;/div&gt;
&lt;div&gt;
	Then, at some point we had to add &lt;strong&gt;analytics tracking&lt;/strong&gt;, which resulted in just &lt;strong&gt;an extra module&lt;/strong&gt; on the chain getting all desired commands, tracking the event and sending it up in the chain to let them be consumed by another module. A very elegant analytics solution with all &lt;strong&gt;code contained within the same file&lt;/strong&gt; instead of tens of lines spilled around all controllers for tracking user actions, and no &amp;ldquo;&lt;tt&gt;if&lt;/tt&gt;&amp;rdquo; statements checking whether we are in app configuration A, B or C to do this or that action instead.&lt;/div&gt;
&lt;div&gt;
	The result is source code that has &lt;strong&gt;very little dependencies&lt;/strong&gt;, that can be &lt;strong&gt;plugged in/out easily&lt;/strong&gt;, &lt;strong&gt;reused&lt;/strong&gt; across multiple modules, &lt;strong&gt;flexible&lt;/strong&gt; to change behaviour when needed and with very &lt;strong&gt;clear and defined concerns&lt;/strong&gt; for each component .&lt;/div&gt;
&lt;div&gt;
	None of these things can be easily done only by the use of blocks, delegates or notifications.&lt;/div&gt;
&lt;h2&gt;
	Conclusion&lt;/h2&gt;
&lt;div&gt;
	CoR, as any other pattern, has his &lt;strong&gt;benefits and drawbacks&lt;/strong&gt;. In this case, this pattern is clearly &lt;strong&gt;not ideal for simple projects&lt;/strong&gt; or those with a very monolithic structure where modules and plugins are not considered and code reuse is scarce.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	However, when used properly it can give you multiple benefits. Especially it &lt;strong&gt;helps with a more modular and dynamic&lt;/strong&gt; app architecture, promote &lt;strong&gt;code reuse&lt;/strong&gt; and keep &lt;strong&gt;separation of concerns&lt;/strong&gt; in a clean and elegant way. Moreover, Cocoa already implements it internally for their &lt;tt&gt;UIResponder&lt;/tt&gt; objects, so with very little effort we can take advantage of it for our own purposes.&lt;/div&gt;
&lt;div&gt;
	Experiment with it and feel free to get in touch with me with your experiences/opinions! I will be happy to see more people using it :)&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/31</id>
    <published>2013-10-17T10:53:51Z</published>
    <updated>2013-10-17T18:26:34Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/31-How-to-fix-a-Duplicated-Symbols-error-on-binary-files"/>
    <title>How to fix a "Duplicated Symbols" error on binary files</title>
    <content type="html">&lt;h4&gt;
	Introduction&lt;/h4&gt;
&lt;div&gt;
	When including third party libraries into your project, you can run into a &amp;ldquo;&lt;strong&gt;Duplicated Symbols&lt;/strong&gt;&amp;rdquo; error on the linking process. This annoying error is due to a name collision between one or more of your classes, usually caused by either:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;You do not use a prefix as namespace&lt;/strong&gt; and you use a generic name such as &lt;tt&gt;Session&lt;/tt&gt;, &lt;tt&gt;User&lt;/tt&gt; or similar. This has an easy solution, as all you need to do is rename your classes to use a prefix. For example, &lt;tt&gt;User&lt;/tt&gt; could be renamed into &lt;tt&gt;AGUser&lt;/tt&gt;. Using prefixes is a good practice that you should always follow in programming languages without namespaces like C or Objective-C.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;One or more of your libraries are including the same third party library&lt;/strong&gt;. This is quite common on static frameworks and libraries built with little care. Usually, the creator of the library includes generic utilities such as &lt;tt&gt;SBJON&lt;/tt&gt;, &lt;tt&gt;Reachability&lt;/tt&gt; and similars inside the compiled binary. Then, your project or some other library also making use of it tries to include it again, resulting in the duplicated symbols error. If you have access to the source code, it could be solved easily by leaving the duplicated one out of your target. Unfortunately, when this problem occurs, many times comes from compiled libraries or frameworks that do not give us control on the source code files but just a binary instead. Solving this issue may not seem easy or even possible, but as we are going to see in this post it is not so difficult as it may look.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Special consideration&lt;/h4&gt;
&lt;div&gt;
	The whole post assumes that both duplicated libraries are the same version, or at least &lt;strong&gt;fully backwards compatible&lt;/strong&gt;. Besides, we also assume that both duplicated libraries &lt;strong&gt;have not been modified&lt;/strong&gt;, as any modification could break the commented compatibility. If the libraries are not compatible then you will need to analyze the differences and see if you can come with a &amp;ldquo;mixed&amp;rdquo; library that provides the desired compatibility or move one of your components to use the other incompatible version. In any case, the solution is very bound to your application and exceeds the purpose of this post.&lt;/div&gt;
&lt;h4&gt;
	Example&lt;/h4&gt;
&lt;div&gt;
	For improving readability we are going to fix a real project. &amp;nbsp;In this example project we have a static framework called &lt;tt&gt;Serenity&lt;/tt&gt; that contains the &lt;tt&gt;SBJSON&lt;/tt&gt; library inside. The duplicated symbols appears when using &lt;tt&gt;CocoaPods&lt;/tt&gt; with the &amp;ldquo;&lt;tt&gt;unoffical-twitter-sdk&lt;/tt&gt;&amp;rdquo;, which also has a dependency to &lt;tt&gt;SBJON&lt;/tt&gt;. In this case, the duplicated symbols are therefore contained in &lt;tt&gt;Serenity&lt;/tt&gt; and &lt;tt&gt;Pods.a&lt;/tt&gt; binaries.&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/20/content_duplicatedsymbols.png?1382024975" style="width: 700px; height: 120px;" /&gt;&lt;/div&gt;
&lt;div&gt;
	We could fix it by playing with the &lt;tt&gt;Podspecs&lt;/tt&gt; to leave out the &lt;tt&gt;SBJSON&lt;/tt&gt; from the &amp;ldquo;&lt;tt&gt;unoffical-twitter-sdk&lt;/tt&gt;&amp;rdquo;, but we have decided to remove the &lt;tt&gt;SBJSON&lt;/tt&gt; from &lt;tt&gt;Serenity&lt;/tt&gt; instead as it should not have been added in the first instance and anyway it contains an older version of &lt;tt&gt;SBJSON&lt;/tt&gt; that the one in &lt;tt&gt;CocoaPods&lt;/tt&gt;.&lt;/div&gt;
&lt;div&gt;
	You should be able to follow the same process on your conflicting libraries in your project. Just check and decide which version you want to keep and which one you want to remove (usually keep the newer one).&lt;/div&gt;
&lt;h4&gt;
	Slimming down the fat binary&lt;/h4&gt;
&lt;div&gt;
	Most of the libraries are actually &lt;strong&gt;fat binaries&lt;/strong&gt;. This means that you can find the compiled binary code for more than one architecture within the same file. For example, in our example project, the &lt;tt&gt;Serenity&lt;/tt&gt; framework contains three architectures: &lt;tt&gt;i386&lt;/tt&gt; (Simulator), &lt;tt&gt;armv7&lt;/tt&gt; (iPhone 3GS+ compatible) and &lt;tt&gt;armv7s&lt;/tt&gt; (iPhone 5). Note that &lt;tt&gt;armv7s&lt;/tt&gt; at the moment of writing this post is not recognized by the &lt;tt&gt;lipo&lt;/tt&gt; tool as a valid architecture (it is displayed as &amp;ldquo;&lt;tt&gt;cputype (12) cpusubtype (11)&lt;/tt&gt;&amp;rdquo;) so we will need to make a small trick to support it. Hopefully Apple will update the tools soon to support it. You can check the architectures of your library by running:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;$ lipo Serenity -info
Architectures in the fat file: Serenity are: armv7 (cputype (12) cpusubtype (11)) i386&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	In order to proceed with the whole process, we need to extract each architecture on its own file. We can do it by running:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;$ lipo Serenity -thin armv7 -output Serenity.armv7
$ lipo Serenity -thin i386 -output Serenity.i386
$ xcrun -sdk iphoneos lipo Serenity -thin armv7s -output Serenity.armv7s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Note the use of the &lt;tt&gt;xcrun&lt;/tt&gt; in the last case due to the lack of support for &lt;tt&gt;armv7s&lt;/tt&gt;. The rest of the steps explained in the post are equally valid for &lt;tt&gt;armv7&lt;/tt&gt;, &lt;tt&gt;armv7s&lt;/tt&gt; and &lt;tt&gt;i386&lt;/tt&gt;.&lt;/div&gt;
&lt;h4&gt;
	Removing duplicated symbols&lt;/h4&gt;
&lt;div&gt;
	Now that we have the two different architectures in thin files, we can proceed to remove the duplicated symbols on each file. Lets first take a look to the symbols included in &lt;tt&gt;Serenity&lt;/tt&gt;:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;$ ar -t Serenity.armv7
__.SYMDEF
MainView.o
PushRequest.o
PaymentViewController.o
SBJsonBase.o
SBJsonParser.o
SBJsonWriter.o
NSObject+SBJSON.o
NSString+SBJSON.o
FileManager.o
Barcode.o
qr_draw_png.o
QR_Encode.o
png.o
pngerror.o
pngget.o
pngmem.o
pngpread.o
pngread.o
pngrio.o
pngrtran.o
pngrutil.o
pngset.o
pngtrans.o
pngwio.o
pngwrite.o
pngwtran.o
pngwutil.o&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	We picked the &lt;tt&gt;armv7&lt;/tt&gt; version, but the &lt;tt&gt;i386&lt;/tt&gt;&amp;nbsp;and &lt;tt&gt;armv7s&lt;/tt&gt; should be identical.&lt;/div&gt;
&lt;div&gt;
	As we suspected, the library contains five symbols that are duplicated:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;tt&gt;SBJsonBase.o&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;SBJsonParser.o&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;SBJsonWriter.o&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;NSObject+SBJSON.o&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;NSString+SBJSON.o&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	We just have to remove them by running:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;$ ar -d -sv Serenity.armv7 SBJsonBase.o
d - SBJsonBase.o&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Run the command with the other 4 symbols also. Then, repeat everything with the other architectures (&lt;tt&gt;i386&lt;/tt&gt; and &lt;tt&gt;armv7s&lt;/tt&gt; in our case). If you check the binaries again with the `&lt;tt&gt;ar&amp;nbsp;-t`&amp;nbsp;&lt;/tt&gt;option you should see that the symbols are not longer there.&lt;/div&gt;
&lt;h4&gt;
	Fattening the library&lt;/h4&gt;
&lt;div&gt;
	Ok, we are almost done. We have the three architectures without the duplicated symbols. All we need to do now is &lt;strong&gt;combine them back again into a fat library &lt;/strong&gt;that will be used by our project. So first lets move the old version and keep a copy just in case something goes wrong.&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;$ mv Serenity Serenity_original&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And now lets build the fat library:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;$ lipo Serenity.armv7 Serenity.armv7s Serenity.i386 -create -output Serenity&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And there you have! you should have a new binary file without the duplicated classes. You can now remove the intermediate &lt;tt&gt;Serenity.armv7&lt;/tt&gt;, &lt;tt&gt;Serenity.armv7s&lt;/tt&gt; and &lt;tt&gt;Serenity.i386&lt;/tt&gt; files as they are not longer needed.&lt;/div&gt;
&lt;h4&gt;
	Finishing&lt;/h4&gt;
&lt;div&gt;
	If you now build your project again, you should be able to link without the duplicated symbols error presented before (at least without this one, maybe you have another one though).&lt;/div&gt;
&lt;div&gt;
	It is extremely &lt;strong&gt;important that you test your app again&lt;/strong&gt;, because if any of the special considerations mentioned above are not met then your app could malfunction or even crash. Test, test and test!&lt;/div&gt;
&lt;div&gt;
	Finally remember, you just modified a third party library so do not forget that any update on it will probably include the duplicated symbols again. And please, do not blame me if something does not work, just ask your third party developer to do his job properly and leave dependencies out of the binary :D.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/30</id>
    <published>2013-09-06T14:55:51Z</published>
    <updated>2013-09-06T15:23:16Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/30-iOS-Performance-tips-I-Drawing-shadows"/>
    <title>iOS Performance tips (I): Drawing shadows</title>
    <content type="html">&lt;h4&gt;
	Introduction&lt;/h4&gt;
&lt;div&gt;
	It is very common to see shadows in different apps. In many occasions shadows are just rendered by using an image with the shadow predrawn, which basically performs as any other &lt;tt&gt;UIImageView&lt;/tt&gt;. However, sometimes you may need to draw the shadow from code. When this time comes you will face performance problems that in case of heavy use (especially in iPad in combination with table or collection views) it can slow down you UI.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	It might seem negligible, but if your view is a composition of multiple views applying shadows then you will actually experience a very big UI performance degradation. For example, in my latest project where I had a grid view with shaded cells like this:&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/18/content_ios_simulator_screen_shot_sep_6_2013_4_43_41_pm.png?1378478756" style="width: 600px;" /&gt;&lt;/div&gt;
&lt;div&gt;
	the &lt;strong&gt;frame rate plunged from the standard 60FPS to less than 15FPS&lt;/strong&gt; (a very poor performance) just by adding shadows. This of course happened because I was not doing it correctly, and with the techniques explained in this post everything came back to normal 60FPS even with the shadows.&lt;/div&gt;
&lt;h4&gt;
	Standard shadow drawing&lt;/h4&gt;
&lt;div&gt;
	If you have rendered shadows before, you probably have written something like the following:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//Remember to #import &amp;lt;QuartzCore/QuartzCore.h&amp;gt;
myView.layer.shadowOpacity = 0.3f;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Pretty simple right? But what is going on under the hood? Well, a very interesting point is that &lt;strong&gt;shadows are applied based on the alpha channel of your layer&lt;/strong&gt;, pixel by pixel. This means that if you have a &lt;tt&gt;UIView&lt;/tt&gt; with transparent areas (very common with &lt;tt&gt;UIImageView&lt;/tt&gt; and &lt;tt&gt;UILabel&lt;/tt&gt;), the shadow will adapt and be drawn following the exact same shapes. This allow you to do nice effects like this one:&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Art/shadows_2x.png" style="height: 200px;" /&gt;&lt;/div&gt;
&lt;div&gt;
	However, what if your shadow is lot more simple? in most cases all you want to draw is a simple shadow, maybe with a rectangular shape or something a little more complex, but still simple enough to be drawn following a path. If that is your case then you are probably wasting a lot of valuable GPU power to check the alpha channel with no sense.&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Shadow drawing based on path&lt;/h4&gt;
&lt;div&gt;
	If drawing shadows in a standard way is slow there has to be a way to define the shape of the shadow and save the computational power of computing the alpha channel of every pixel. Indeed, it exists and it is called &amp;ldquo;&lt;strong&gt;shadowPath&lt;/strong&gt;&amp;rdquo;.&lt;/div&gt;
&lt;div&gt;
	Defining a shadow path for a rectangle is as easy as this:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;myView.layer.shadowPath = [[UIBezierPath bezierPathWithRect:self.centerView.bounds] CGPath];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	but of course, you could define &lt;a href="http://nachbaur.com/blog/fun-shadow-effects-using-custom-calayer-shadowpaths"&gt;many other different paths with more complex shapes&lt;/a&gt;, which should be enough for most cases.&lt;/div&gt;
&lt;div&gt;
	When using shadow paths, bear in mind a few things:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;It is very fast!&lt;/strong&gt; The video card does not need to read pixels or even load external memory from images. All it has to do is fill the whole surface with the alpha color and just apply some gradients on the corners. In the example application, drawing with shadowpaths is perceived as fast as not having any shadow, at a constant frame rate of 60FPS.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;It does not resize&lt;/strong&gt; with the view, even if you are using autolayout or autoresizing masks. This means that if your view is resized then you will have to explicitly change the shape of the path as well. This can be easily achieved by subclassing your view and resetting the path in the &amp;nbsp;&lt;tt&gt;- (void)layoutSubviews&lt;/tt&gt; method. If you are setting the shadow from your view controller (you should not) then you could do something similar on the &lt;tt&gt;viewWillLayoutSubviews&lt;/tt&gt; method.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;It is&amp;nbsp;animatable&lt;/strong&gt;, so you could animate them if required in a pretty straightforward way by using &lt;tt&gt;CAKeyframeAnimation&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	Shadow drawing with rasterization&lt;/h4&gt;
&lt;div&gt;
	If your view has a complex shadow then shadow paths are not an option. In that case, you can still improve your app performance by carefully choosing views for offscreen rendering. But what is offscreen rendering and rasterization? there is a brilliant article on &lt;a href="http://www.objc.io/issue-3/moving-pixels-onto-the-screen.html"&gt;objc.io&amp;#39;s issue 3&lt;/a&gt; that explains the whole process in detail, but let me give a very brief explanation&lt;/div&gt;
&lt;h5&gt;
	Offscreen rendering in a nutshell&lt;/h5&gt;
&lt;div&gt;
	When your app needs to draw something on the screen, the GPU takes your layer hierarchy (&lt;tt&gt;UIView&lt;/tt&gt; is just a wrapper on top of &lt;tt&gt;CALayer&lt;/tt&gt;, which in the end are OpenGL textures) and applies one by one on top of each other based on their x,y,z position. In regular rendering, the whole operation happens in special frame buffers that the display will directly read for rendering on the screen, repeating the process at a rate around 60 times per second.&lt;/div&gt;
&lt;div&gt;
	If your view is composed of too many layers, the computational cost of compositing all the views so many times per second can be too high for your GPU to handle, which will result in some frames lost. Of course, if your views do not change much, you could save time by storing some of the intermediate compositions in additional slots of memory to reuse on next frames. This process of &lt;strong&gt;caching the composited layer&lt;/strong&gt; is called Off-Screen rendering (the name already suggests that rendering is not done in the screen buffer but somewhere else, now you can see why), and the way to trigger it on CoreGraphics is by setting the layer&amp;rsquo;s &amp;lsquo;&lt;strong&gt;shouldRasterize&lt;/strong&gt;&amp;rsquo; property to &lt;tt&gt;YES&lt;/tt&gt; like this:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;cell.layer.shouldRasterize = YES;
cell.layer.rasterizationScale = [UIScreen mainScreen].scale;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;em&gt;Please, note that the scale matters or you would have a non-retina rendered layer in a retina display, resulting in blurred views.&lt;/em&gt;&lt;/div&gt;
&lt;div&gt;
	Of course the process have some drawbacks as well. The main one is that offscreen rendering &lt;strong&gt;requires a context switch&lt;/strong&gt; (GPU has to change to a different memory area to perform the drawing) and then copying the resulting composited layer into the frame buffer. Every time any of the composited &lt;strong&gt;layers change, the cache needs to be redrawn again&lt;/strong&gt;. This is why in many circumstances offscreen rendering is not a good idea, as it requires additional computation when need to be rerendered. Besides, the layer requires &lt;strong&gt;extra video memory&lt;/strong&gt; which of course is limited, so use it with caution.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	However, if your view does not change much, then offscreen rendering of shaded views might be a good idea as the extra cost of making the offscreen rendering could pay off compared to the computational cost of redrawing the shadow every frame.&lt;/div&gt;
&lt;div&gt;
	But how do you know if your rasterized view will be reused across frames? well, we know that when the rasterized view changes the cached composition needs to be updated, but what if it keeps the same? Check this part of the documentation header of the shouldRasterize property:&lt;/div&gt;
&lt;blockquote&gt;
	&lt;div&gt;
		As an implementation detail the rendering engine may attempt to cache and reuse the bitmap from one frame to the next.&amp;nbsp;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div&gt;
	This statement means that even if the view does not change, &lt;strong&gt;it is up to the rendering engine to decide whether to reuse the cache&lt;/strong&gt; from one frame to the next one or not. So actually the only way you can be sure about how your app is behaving is profiling your app. To help with that there is an option called &amp;ldquo;&lt;strong&gt;Color Offscreen-Rendered&lt;/strong&gt;&amp;rdquo; both in Simulator and Instruments that will color offscreen rendered areas. Red color means that your view is rerendered and therefore rasterization is only slowing things down. Green color means that your composited view is being reused across frames, probably getting a performance gain (especially with expensive computations like shadows).&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/19/content_screen_shot_2013-09-06_at_4_53_45_pm.png?1378479252" style="width: 228px; height: 171px;" /&gt;&lt;/div&gt;
&lt;h4&gt;
	Conclusion&lt;/h4&gt;
&lt;div&gt;
	Shadow paths are the best way to go if your shadows are simple enough to be defined with a polygon. However, you will have the extra work of setting your path correctly when your view resizes.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	If you require complex shapes or per pixel shadows then you can not use the shadow paths, but you can still improve performance in most cases by rasterizing the view. However, remember to profile your application because if the rasterization misses too often then it could even perform worse than regular shadows.&lt;/div&gt;
&lt;div&gt;
	As you see there is not a global solution, but with this options in mind you should be able to solve your performance issues in almost all situations.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/29</id>
    <published>2013-07-29T13:28:41Z</published>
    <updated>2015-02-09T20:57:54Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/29-MVC-in-Objective-C-III-The-view-layer"/>
    <title>MVC in Objective-C (III): The view layer</title>
    <content type="html">&lt;div&gt;
	In &lt;a href="http://angelolloqui.com/blog/26-MVC-in-Objective-C-I-Introduction"&gt;previous chapters&lt;/a&gt; we have exposed how the MVC pattern separate concerns in three layers and we have analyzed how to correctly implement the Model layer into your iOS project. In this post, I am going to continue with the next element in the MVC roles: the View role.&lt;/div&gt;
&lt;div&gt;
	The View role is the responsible for handling all the UI layer. Ideally, this role should not know anything or very little about the associated &lt;a href="http://angelolloqui.com/blog/34-MVC-in-Objective-C-IV-The-Controller-layer"&gt;controller&lt;/a&gt; and &lt;a href="http://angelolloqui.com/blog/27-MVC-in-Objective-C-II-Model"&gt;model&lt;/a&gt; layer (at most how to use the model, but not how to perform direct interaction/manipulation on it). In an iOS project this layer is implemented by the &lt;tt&gt;UIView&lt;/tt&gt; class (and subclasses) together with the Interface Builder files.&lt;/div&gt;
&lt;div&gt;
	As we saw in the Model post, there are many ways and tricks to implement this role in a project, but I will try to summarize all the best practices and tools that I have found so far, not only regarding MVC but also as general View related suggestions. As usual, you might be already using many or not agree with some of them, but hopefully you will get some fresh air out of it. So lets start with my suggestions because the list long!&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Use Interface Builder&lt;/h4&gt;
&lt;div&gt;
	There is a lot of controversy regarding this topic, and I could even write a full post only talking about it with more than 10 valid points in each direction. Some developers do not like to use it, while others do. I am not going to extend on every single one, but let me mention the two most important reasons for me:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Separation of concerns&lt;/strong&gt;: IB enforces you to separate your views and controllers into two totally different components (your IB files and your &lt;tt&gt;UIViewControllers&lt;/tt&gt;) that can only connect together by setting some explicit keywords (&lt;tt&gt;IBOutlet&lt;/tt&gt;, &lt;tt&gt;IBAction&lt;/tt&gt;, &lt;tt&gt;IBOutletCollection&lt;/tt&gt;) and properties. The result of it is that without additional effort you will be implementing the MVC pattern in a more strict way that if you create your views from your controllers. Besides, having these decoupled components also helps reusability. For example, when dealing with universal apps, you could have one controller and two IB files (&lt;tt&gt;~iphone&lt;/tt&gt;, &lt;tt&gt;~ipad&lt;/tt&gt;) for each component in your code, without requiring you to manually write if statements like &amp;ldquo;&lt;tt&gt;if (IPAD)&lt;/tt&gt;&amp;rdquo; to distinguish between platforms at a source code level. Just use a generic controller with all properties you need in both platforms, and connect them accordingly unsetting those which do not apply to your platform. Clean and simple.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Easy to use&lt;/strong&gt;: IB files are very easy to use thanks to the visual IDE that XCode provides. This will help you out creating nice UI screens with little effort, but it will also help any new developer that joins the project. He will know exactly where to look at when he needs to update the UI, and in an eye&amp;rsquo;s blink he will be able to modify it without having to read hundreds of equivalent Objective-C lines of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Of course, there are many problems derived from the use of it, but lets be fair and also consider the two that for me are the most annoying:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Applying global styles&lt;/strong&gt;: In most apps there are some global styles that should be shared around your IB files (colors, fonts,...). This is really inconvenient because if you change anything on the future you will need to modify one by one all your IB files and components. In order to minimize the issue, I suggest to use a custom &amp;ldquo;&lt;cite&gt;user defined runtime attribute&lt;/cite&gt;&amp;rdquo; that indicate the style to be applied. This way you will be able to change styles globally with very little effort, while keeping simplicity in your XIB files and controller code. This approach is used by some libraries like &lt;a href="https://github.com/tombenner/nui"&gt;NUI&lt;/a&gt;&amp;nbsp;with success.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;SCM Conflicts&lt;/strong&gt;: When working in big teams is common to suffer conflicts, specially if you use StoryBoards rather than simple XIB files. However, if you are using GIT, I would suggest to use the XCode integrated Git utility as it handles almost any conflict automatically. Besides, with XCode5 XIB files have changed to a more explicit XML, which should contribute resolving conflicts.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In summary, even if this is too long a topic to be discussed here with a lot of valid points in both directions, my advice is to use it as much as you can. It will pay off with cleaner and shorter code, and better MVC conventions adoption (which is all this post is about).&lt;/div&gt;
&lt;h4&gt;
	Use custom components, prefer composition pattern&lt;/h4&gt;
&lt;div&gt;
	I have never seen an app where the UI elements do not need to be customized somehow. Sometimes, by using &lt;tt&gt;UIAppearance&lt;/tt&gt; methods is enough, but sometimes you need to make some deeper customizations.&lt;/div&gt;
&lt;div&gt;
	You can usually just use standard UI elements (buttons, labels,...) and just set the properties you need to change manually from IB/code. However, while this looks OK when you only have to do it once, I think is a terrible idea. The main problem with it is that you will probably end up putting this code in your &lt;tt&gt;UIViewController&lt;/tt&gt;, and then your controller will be handling UI appearance methods that are obviously not his responsibility.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Another option is to create a category in the class you want to customize (for example a &lt;tt&gt;UIButton&lt;/tt&gt;) that will apply this logic just by calling a method. While this approach is lot better than the previous one because the code is encapsulated, it can not be used from IB. As I mentioned before I am a true believer of IB, so it does not solve the problem.&lt;/div&gt;
&lt;div&gt;
	A better approach is to create custom components. For example, if you want a button that has some visual enhancements then just make a new subclass of &lt;tt&gt;UIButton&lt;/tt&gt;, and apply all your custom logic in it (do not forget to call it from &lt;tt&gt;awakeFromNib&lt;/tt&gt; as well as standard init methods). This way you are separating concerns and at the same time allowing the component to be used from IB files.&lt;/div&gt;
&lt;div&gt;
	One interesting aspect to mention is that when making custom components you can create them by composition of already existing components or by creating a fully scratch component.&lt;/div&gt;
&lt;div&gt;
	While both approaches are fine, I advocate for the composition pattern against the custom drawing mainly because composition will take advantage of existing behaviours such as accessibility labels, animatable properties,... in a better way. Besides, resulting code will be lot simpler, cognitive load will be reduced and in many cases it can even result in performance gains.&lt;/div&gt;
&lt;h4&gt;
	Use Model objects as view input&lt;/h4&gt;
&lt;div&gt;
	Some people argue that passing a model objects to the view is not MVC compliant. I totally disagree, and in last term I think it makes things a lot more reusable and maintainable (which is the whole purpose of the MVC pattern).&lt;/div&gt;
&lt;div&gt;
	Dealing with objects in views is especially common when using table view rows. In general, a table view row will contain at least 3 or 4 elements depending on your model data. For example, a simple Twitter app will have a row displaying for each tweet its text, user name and time. What I encourage to do in that case is to create a UITableViewCell subclass (custom component as explained above) with the 4 elements inside, and instead of exposing the elements to external components through properties in the .h file, expose a property to the associated model object.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In other words, instead of:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//AGTweetCell.h
@interface AGTweetCell : UITableViewCell
@property (strong, nonatomic) UILabel *usernameLabel;
@property (strong, nonatomic) UILabel *textLabel;
@property (strong, nonatomic) UILabel *timeLabel;
@end&lt;/code&gt;&lt;/pre&gt;
	&lt;pre&gt;
&lt;code&gt;
//TableViewController
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {        
    static NSString *cellIdentifier = @&amp;quot;TweetCell&amp;quot;;
    AGTweetCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    &amp;hellip;.
    cell.usernameLabel.text = tweet.user.name; 
    cell.textLabel.text = tweet.text; 
    cell.timeLabel.text = tweet.timeString; 
    return cell;    
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Do something like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//AGTweetCell.h
@interface AGTweetCell : UITableViewCell
@property (strong, nonatomic) Tweet *tweet;
@end&lt;/code&gt;&lt;/pre&gt;
	&lt;pre&gt;
&lt;code&gt;//AGTweetCell.m
@interface AGTweetCell ()
@property (strong, nonatomic) UILabel *usernameLabel;
@property (strong, nonatomic) UILabel *textLabel;
@property (strong, nonatomic) UILabel *timeLabel;
@end

@implementation AGTweetCell
- (void)setTweet:(Tweet *)tweet {   
    _tweet = tweet;
    cell.usernameLabel.text = tweet.user.name; 
    cell.textLabel.text = tweet.text; 
    cell.timeLabel.text = tweet.timeString; 
}
@end&lt;/code&gt;&lt;/pre&gt;
	&lt;pre&gt;
&lt;code&gt;//TableViewController
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {        
    static NSString *cellIdentifier = @&amp;quot;TweetCell&amp;quot;;
    AGTweetCell *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];
    &amp;hellip;.
    cell.tweet = tweet;    
    return cell;    
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	It is a little more code if used once, but the main advantage of it is that the rendering logic is encapsulated into the view object and thanks to that you can safely change your table cell in the future (maybe adding some new elements like the user image) without changing your controller. It is the duty of the cell to defined how it needs to be rendered, and the controller to pass the required information to cell, so it is OK regarding the MVC pattern -which by the way is especially true considering that, as explained in the Model post, a Tweet is nothing else that a container of information, just like &lt;tt&gt;NSArrays&lt;/tt&gt;, &lt;tt&gt;NSDictionaries&lt;/tt&gt; or &lt;tt&gt;NSStrings&lt;/tt&gt; are -&lt;/div&gt;
&lt;h4&gt;
	Use categories instead of defines or constants for simple objects&lt;/h4&gt;
&lt;div&gt;
	When dealing with simple objects such as &lt;tt&gt;UIFonts&lt;/tt&gt; or &lt;tt&gt;UIColors&lt;/tt&gt; it is very common to see things like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;#define kAntartidaMediudFontFamily @&amp;rdquo;AntartidaRounded-Medium&amp;rdquo;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;[UIFont fontWithName:kAntartidaMediudFontFamily size:12];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	While this is OK for many developers, I prefer to use categories. So, the previous line could be changed by:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;[UIFont appFontOfSize:12];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	By implementing a simple category:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;@implementation UIFont (SDAppearance)
+ (UIFont *)appFontOfSize:(CGFloat)fontSize {
    return [self fontWithName:@&amp;quot;AntartidaRounded-Medium&amp;quot; size:fontSize];
}
@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	There are not many advantages for this, but I like it because it just improves readability and it gives you more control on the logic behind the &lt;tt&gt;appFontOfSize&lt;/tt&gt; methods. For example, you could maybe perform some check before using the provided &lt;tt&gt;fontSize&lt;/tt&gt;, get the font name from a dynamic theme manager, add a breakpoint in the font creation or reuse the same &lt;tt&gt;UIFont&lt;/tt&gt; element to get some memory improvements. As I said, not a lot of advantages, but whenever your start doing it this way you will like it better.&lt;/div&gt;
&lt;h4&gt;
	Use UIAppearance&lt;/h4&gt;
&lt;div&gt;
	Before iOS5, customizing and iOS app was quite tricky. Many components such as navbars did not have clear ways to set custom appearance to them. Hopefully, iOS5 came with the &lt;tt&gt;UIAppearance&lt;/tt&gt; protocol and most native UI components now use it. Explaining in depth how to work with UIAppearance would take an entire new post, so I better redirect you to some interesting existing articles such as the one in &lt;a href="http://nshipster.com/uiappearance/"&gt;NSHipster&lt;/a&gt; or &lt;a href="http://nscookbook.com/2013/01/ios-programming-recipe-8-using-uiappearance-for-a-custom-look/"&gt;NSCookBook&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Anyway, keep in mind to use &lt;tt&gt;UIAppearance&lt;/tt&gt; methods when possible. It helps out a lot decoupling styling from the rest of your code, specially from incorrect places such as &lt;tt&gt;UIViewControllers&lt;/tt&gt;. Appearance should be self contained in the view role, and &lt;tt&gt;UIAppearance&lt;/tt&gt; gives you a straightforward way to get it done.&lt;/div&gt;
&lt;h4&gt;
	Never use tags&lt;/h4&gt;
&lt;div&gt;
	Please, do not ever use tags! Never? No! Never!&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Tags are the typical hack that looks cool the first time you see it (wow! it saves me time creating properties!) but it will definitely struggle you in the future. Why would you care about following software patterns like MVC but then use such an unstructured programming style? For every place you use a tag, a property could have been used instead, always! For example, components coming from IB can be linked by using &lt;tt&gt;IBOutlet&lt;/tt&gt; (or &lt;tt&gt;IBOutletColletion&lt;/tt&gt; if many), and custom components can easily add properties to the class pointing to the UI element that had the tag before. Indeed, even if it sometimes requires a little more effort, the advantages you get worth it:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Compiling time checks&lt;/strong&gt;: When using tags, if you change a &lt;tt&gt;UILabel&lt;/tt&gt; for a &lt;tt&gt;UITextView&lt;/tt&gt;, your code could break and you will not be notified by the compiler because it does not know the type of component that you are setting. Properties are typed, so a compiler error will be thrown.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;No collisions&lt;/strong&gt;: Using tags can result in collisions where more than one component uses the same tag. It might seem irrelevant when you use constants with random values, but if you are reusing components in many different places then you could end up with one because looking for a tag will traverse down all your view hierarchy. There is nothing worse than expect a view to have one specific tag and then find a totally different one because the tag was used somewhere else.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Easier to access&lt;/strong&gt;: Having to look for a specific tag in the view hierarchy is more complicated (and slow) than just accessing a property. Besides, if you move your component out of this hierarchy then you will not be able to retrieve it again, while properties are always accessible and clearly defined.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	Make flexible views&lt;/h4&gt;
&lt;div&gt;
	Views with resizing elements are everywhere. Even if your app is iPhone only and you do not support multiple orientations, you still have to deal with resized views for iPhone5 vs 4S and lower. Even more, your app window could be smaller than expected because the system might be taking some space out of your app window for other purposes (for example, when you are in tethering).&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In order to solve multiple size problems, Apple introduced Springs&amp;amp;Struts (AutoresizingMasks), and more recently Autolayout. In general, AutoresizingMasks should be enough for most views, and therefore I recommend to stick to it when possible. On the other hand, Autolayout gives you finer control, but is way too complex for most cases, making your views more difficult to create and maintain. Anyway, no matter whether you use one or the other, if you use them correctly you should not need to set frames almost anywhere.&lt;/div&gt;
&lt;div&gt;
	For example, if you have code like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;self.pagingView.frame = CGRectMake(self.pagingView.frame.origin.x, screenBounds.size.height-100, self.pagingView.frame.size.width, self.pagingView.frame.size.height);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	or even worst:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;CGRect screenBounds = [[UIScreen mainScreen] bounds];
CGRect frameImageView = welcomeViewController.imageView.frame;
frameImageView.size.height = kImageHeight;
if (screenBounds.size.height == 568)
{
    frameImageView.size.height = kImageHeight + 50;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Then is highly probable that you have set your autoresizing properties wrongly. Review all of them because in 99% of the cases the previous code can be removed by setting proper autoresizing constraints which makes things cleaner, more reusable and future proof for other screen sizes.&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Understand the difference between frame and bounds&lt;/h4&gt;
&lt;div&gt;
	If you are confused with these two you are not the only one. Many experience developers have trouble distinguishing when to use one or the other, or even understanding the difference at all. To keep the explanation simple, the frame references the view position in relation to the parent view, while the bounds express the portion of the view that will be visible on the internal view&amp;rsquo;s coordinate. Checkout &lt;a href="http://developer.apple.com/library/ios/#documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/WindowsandViews/WindowsandViews.html#//apple_ref/doc/uid/TP40009503-CH2-SW9"&gt;Apple&amp;rsquo;s documentation&lt;/a&gt; for more detail.&lt;/div&gt;
&lt;div&gt;
	In general, you should use the view&amp;rsquo;s bounds when you are in a view trying to layout its subviews based on your size, but the frame when you are placing the views under a parent coordinate. Example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;- (void)layoutSubviews {
	[super layoutSubviews];
	CGRect bounds = self.bounds;	
	//Use of frame for setting subview&amp;rsquo;s position but bounds for internal sizing
	subview1.frame = CGRectMake(10, 10, bounds.size.width-20, bounds.size.height-20);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4&gt;
	Set AccessibilityLabels&lt;/h4&gt;
&lt;div&gt;
	I admit, accessibility labels are my most common misused feature. The main problem is that many developers (and testers) do not know they exist or feel reluctant to set them because it requires some extra effort for apparently no gain. However, apart from the obvious benefits that it provides to handicapped people, it also allows UI acceptance testing tools to properly work with your app.&lt;/div&gt;
&lt;div&gt;
	For example, recently we introduced &lt;a href="http://calaba.sh/"&gt;Calabash&lt;/a&gt; in one of our projects that were not using accessibility labels, and even if we could still manage to test without them, the resulting code was so unmaintainable that I decided to add the accessibility labels afterwards to the whole app. Of course, I would have saved time and helped my users if I had done it in first instance.&lt;/div&gt;
&lt;div&gt;
	Conclusion: Always try to remember setting them, you will help people and it will eventually save your time if you plan to do acceptance testing to your app (and you should).&lt;/div&gt;
&lt;h4&gt;
	Explore CALayer, CATransform, CIFilter and others&lt;/h4&gt;
&lt;div&gt;
	Most developers are not used to work with the lower level drawing layers. In particular, explore &lt;tt&gt;CALayer&lt;/tt&gt; masks and &lt;tt&gt;CATransforms&lt;/tt&gt; as they are the most useful ones. They provide excellent tools for making nice effects and animations. I have seen examples of hundreds of complex lines of code that could have been accomplished by just a few ones of &lt;tt&gt;CATransforms&lt;/tt&gt; and masks. Some nice examples of what can be accomplish:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href="http://evandavis.me/blog/2013/2/13/getting-creative-with-calayer-masks"&gt;http://evandavis.me/blog/2013/2/13/getting-creative-with-calayer-masks&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="http://nachbaur.com/blog/fun-shadow-effects-using-custom-calayer-shadowpaths"&gt;http://nachbaur.com/blog/fun-shadow-effects-using-custom-calayer-shadowpaths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	Research useful tools&lt;/h4&gt;
&lt;div&gt;
	When working with views, there are a plethora of alternatives, from open source to licensed ones. However, I like those which are free and open source. Some of the most useful ones:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href="http://revealapp.com/"&gt;Reveal&lt;/a&gt;: Amazing utility for inspecting your app views. A must have if you need to understand how your views are laid out.&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="https://github.com/domesticcatsoftware/DCIntrospect"&gt;DCIntrospect&lt;/a&gt;: Very simple utility to check the position of your views. It lets you inspect your view hierarchy and even change it on the fly. Not as advanced as the previous one but more simple.&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="https://github.com/angelolloqui/AGImageChecker"&gt;AGImageChecker&lt;/a&gt;: Busted! this is my own tool. Nevertheless I think is a nice tool for detecting images that are being resized, modified or blurry. It also has a plugin for uploading/downloading images to Dropbox, which is very effective when working with designers because they can freely modify images in your app and see the result without requiring you to change them in the app.&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="https://github.com/angelolloqui/AGi18n"&gt;AGi18n&lt;/a&gt;: Once again my own library, but it is worth to take a look if you are localizing iOS apps that uses IB files.&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="https://github.com/tombenner/nui"&gt;NUI&lt;/a&gt;: A tool for extracting all your view styling into a CSS like file. Very useful if your app requires lots of customizations and you have CSS skills within your team.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Simulator debug options&lt;/strong&gt;. Is always a good idea to activate this options and reduce the amount of problematic areas pointed out by the tool. Example: Simulator -&amp;gt; Color misaligned images.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;ftxdumperfuser&lt;/strong&gt;: It is common to use custom fonts in your app. Sometimes, these fonts do not come with proper alignment or margins. If that is the case, use ftxdumperfuser as &lt;a href="http://http://www.andyyardley.com/2012/04/24/custom-ios-fonts-and-how-to-fix-the-vertical-position-problem/"&gt;explained here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/28</id>
    <published>2013-03-17T17:29:51Z</published>
    <updated>2013-03-18T20:42:38Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/28-Localization-in-iOS-apps-made-simple"/>
    <title>Localization in iOS apps made simple</title>
    <content type="html">&lt;div&gt;
	Localizing iOS apps with the standard tools is tedious, especially when you use Interface Builder files. To resolve that, I have created a new tool called &lt;a href="https://github.com/angelolloqui/AGi18n"&gt;AGi18n&lt;/a&gt; that makes it extremely easy. But let&amp;rsquo;s first start by analyzing the existing approaches for it together with their problems, to later introduce the library and all the goodies that you get from it.&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Localizing your code (existing solutions)&lt;/h4&gt;
&lt;div&gt;
	When setting a string in a component from code you should use the &lt;tt&gt;NSLocalizedString&lt;/tt&gt; macro. By using it, texts are automatically translated into the user&amp;rsquo;s language on runtime by looking in the &lt;tt&gt;Localizable.strings&lt;/tt&gt; file.&lt;/div&gt;
&lt;div&gt;
	Example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;myLabel.text = NSLocalizedString(@&amp;quot;my text&amp;quot;, @&amp;quot;a tip for translator&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And the corresponding &lt;tt&gt;es.lproj/Localized.strings&lt;/tt&gt; (Spanish translation):&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;/* a tip for translator */
&amp;quot;my text&amp;quot; = &amp;quot;mi texto&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	This makes localizing strings fairly simple, but you still need to create a proper &lt;tt&gt;Localizable.strings&lt;/tt&gt; file for each language. For that, Apple provides a command line utility called &amp;ldquo;&lt;tt&gt;genstrings&lt;/tt&gt;&amp;rdquo; that will look through your code extracting all the &lt;tt&gt;NSLocalizedStrings&lt;/tt&gt; and add them into the &lt;tt&gt;Localizable.strings&lt;/tt&gt; file.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	While this approach works quite well, &lt;tt&gt;genstrings&lt;/tt&gt; utility lacks of some control to merge different versions of the &lt;tt&gt;Localizable.strings&lt;/tt&gt; file, which can make maintenance difficult.&lt;/div&gt;
&lt;h4&gt;
	Localizing your XIB files (existing solutions)&lt;/h4&gt;
&lt;div&gt;
	If localizing your source code is easy, localizing your Interface Builder content is not. There is no direct counterpart for the &lt;tt&gt;NSLocalizedString&lt;/tt&gt; macro when you work with IB. Therefore, the available options are:&lt;/div&gt;
&lt;h5&gt;
	Localize elements from code&lt;/h5&gt;
&lt;div&gt;
	Link all your IB elements to your code through &lt;tt&gt;IBOutlets&lt;/tt&gt; and set the text manually using &lt;tt&gt;NSLocalizedStrings&lt;/tt&gt;. While is a quite simple solution, there is no need to say that this approach results in an enormous waste of time and a very dirty solution. You should always try to avoid it as much as possible.&lt;/div&gt;
&lt;h5&gt;
	Manually Localize XIB files&lt;/h5&gt;
&lt;div&gt;
	Localize your IB files manually by using the localization option provided within XCode. This approach gives you much more control because it lets you resize your IB elements accordingly to the language (for example, resize elements in verbose languages). However, having to manually localize every single XIB file is tedious and it is a terrible way to do it if you need to export the texts for giving it to a third party translator (you need to manually introduce the translations into the localized version of the XIB file). Besides, updating your XIB files with new elements require you to replicate the change in every single language! Ouch! Not a solution at all!&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/17/content_screen_shot_2013-03-17_at_5_31_53_pm.png?1363598445" style="width: 260px; height: 126px;" /&gt;&lt;/div&gt;
&lt;h5&gt;
	Use &lt;tt&gt;ibtool&lt;/tt&gt;&lt;/h5&gt;
&lt;div&gt;
	&lt;tt&gt;ibtool&lt;/tt&gt; is a command line utility that extracts texts and injects them back into your XIB files. You can use it to get a strings file with all your XIB texts in the following format:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;/* Class = &amp;quot;IBUILabel&amp;quot;; text = &amp;quot;Age&amp;quot;; ObjectID = &amp;quot;M3f-at-Qtm&amp;quot;; */
&amp;quot;M3f-at-Qtm.text&amp;quot; = &amp;quot;Edad&amp;quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Then, when you have your files translated, you can inject this texts back into the XIB file using the same tool again.&lt;/div&gt;
&lt;div&gt;
	However, even though this approach is quite better than the previous two, it also has some drawbacks:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;The output file depends on XIB elements, not on&amp;nbsp;content&lt;/strong&gt;: The keys used in the resulting strings file&amp;nbsp;are totally dependent on the IB element instead of the content. This means that if you change a label by a textview then you will need to translate the item again, even if the text is exactly the same. The same problem applies to texts that are repeated multiple times (multiple instances will need to be translated) or if you accidentally remove an element and create it again.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;The format used is different to &lt;tt&gt;Localizable.strings&lt;/tt&gt;&lt;/strong&gt;: It is not a major problem, but having to deal with multiple &lt;tt&gt;Localizable.strings&lt;/tt&gt; formats is annoying and complicates things when working with third party translators.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;It is time consuming&lt;/strong&gt;: Going through every single XIB file in your project, and having to extract/inject content into their localizable versions is too much work. This forces you to use an automated scripting or similar, which turns out to add more complexity to the whole process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	&amp;nbsp;&lt;/h4&gt;
&lt;h4&gt;
	A new approach&lt;/h4&gt;
&lt;div&gt;
	Summing up, the existing solutions give you ways to translate your content, but they are very different depending if you are localizing elements in your code or if they are contained in IB files. Besides, they are complex and maintaining an app updated with new strings introduces even more problems.&lt;/div&gt;
&lt;div&gt;
	Can&amp;rsquo;t we design a way to just localize all our app in the same way, no matter where the text come from (code vs XIB), and that merges the new texts in the existing Localizable strings automatically? Yes! let me introduce you &lt;a href="https://github.com/angelolloqui/AGi18n"&gt;AGi18n&lt;/a&gt; :)&lt;/div&gt;
&lt;div&gt;
	&lt;a href="https://github.com/angelolloqui/AGi18n"&gt;AGi18n&lt;/a&gt; is the last library that I have been working on, and its focus is to provide &lt;strong&gt;a tool to automatically extract and use the localized strings transparently&lt;/strong&gt;, both in your NIB files as well as your code.&lt;/div&gt;
&lt;div&gt;
	All you need to do is run the utility &amp;ldquo;&lt;tt&gt;agi18n&lt;/tt&gt;&amp;rdquo; from the command line (inside your project), and it will go through all your existing languages (folders in the form of &lt;tt&gt;language.lproj&lt;/tt&gt;). For every language, it will extract the code strings running Apple&amp;#39;s &amp;ldquo;&lt;tt&gt;genstrings&lt;/tt&gt;&amp;rdquo;, extract the IB strings by running &amp;ldquo;&lt;tt&gt;genxibstrings&lt;/tt&gt;&amp;rdquo; (built-in utility that outputs the result of &lt;tt&gt;ibtool&lt;/tt&gt; into the same format that the &lt;tt&gt;genstrings&lt;/tt&gt; utility) and merge together the results, removing duplicates and preserving the oldests ones. Isn&amp;rsquo;t that nice?&lt;/div&gt;
&lt;div&gt;
	But of course, extracting the strings from the XIB files is only part of the problem. We still need to inject the translated content back into the XIB files. For that, &lt;a href="https://github.com/angelolloqui/AGi18n"&gt;AGi18n&lt;/a&gt; uses a runtime injector, that will automatically look for every string used in your XIB file and try to translate it seamlessly when the view loads.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In summary, the working flow with &lt;a href="https://github.com/angelolloqui/AGi18n"&gt;AGi18n&lt;/a&gt; would be:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		Install agi18n if you haven&amp;rsquo;t yet&lt;/li&gt;
	&lt;li&gt;
		Use &lt;tt&gt;NSLocalizedString&lt;/tt&gt; for code strings and just regular IB files (without Localized versions) in your project.&lt;/li&gt;
	&lt;li&gt;
		Run &lt;tt&gt;agi18n&lt;/tt&gt;&amp;nbsp;command&lt;/li&gt;
	&lt;li&gt;
		Give the &lt;tt&gt;Localized.strings&lt;/tt&gt; files to translators and import them back when done&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	And that&amp;rsquo;s all! 5 minutes, no need to spend more time on it. You will have a &lt;strong&gt;&lt;tt&gt;Localizable.strings&lt;/tt&gt; file for each language&lt;/strong&gt; with all the existing strings in the &lt;strong&gt;same format&lt;/strong&gt;, &lt;strong&gt;no duplicates&lt;/strong&gt;, and with the &lt;strong&gt;keys sorted&lt;/strong&gt; in alphabetical order to easily find them.&lt;/div&gt;
&lt;div&gt;
	And what if we add new XIB files? or new elements in our existing files? nothing, just run again &lt;tt&gt;agi18n&lt;/tt&gt; and translate the &lt;strong&gt;new strings that will be added&lt;/strong&gt; in your existing&amp;nbsp;&lt;tt&gt;Localizable.strings&lt;/tt&gt; files.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Take a look to this demo video if you want to see how it works:&lt;/div&gt;
&lt;p&gt;
	&lt;iframe allowfullscreen="" frameborder="0" height="315" src="http://www.youtube.com/embed/4Cxv24W2MqA" width="420"&gt;&lt;/iframe&gt;&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/27</id>
    <published>2013-02-28T18:50:40Z</published>
    <updated>2013-09-03T13:48:36Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/27-MVC-in-Objective-C-II-Model"/>
    <title>MVC in Objective-C (II): Model</title>
    <content type="html">&lt;div&gt;
	Today, as part of the &lt;a href="26-MVC-in-Objective-C-I-Introduction"&gt;MVC in Objective-C series&lt;/a&gt;&amp;nbsp;that I am writing, I am going to introduce the best practices that I have found so far when dealing with the Model role in your iOS app. But lets first give a quick introduction about the Model role:&lt;/div&gt;
&lt;div&gt;
	The Model role in MVC is the one responsible for dealing with the state of the app. It encapsulates the code responsible for managing data, applying business rules, etc. This layer is usually the most decouple part of your app as it does not communicate directly with the controllers or views (only indirectly when the other layers request its information).&lt;/div&gt;
&lt;div&gt;
	When implementing the Model in an iOS app you typically have to deal with different kind of problems:&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Formatting (modeling) the information&lt;/h4&gt;
&lt;div&gt;
	Data can be formatted in many different ways. I have seen many developers to often use generic data structures such as dictionaries and arrays to store model information. While this could work for a very simple model, it is a huge issue when the model grows. Instead, use a simple class with just a few properties to access the info, nothing else. It provides developers compilation type checks, it allows you to clearly see what the structure of the stored information is and will help you easily maintaining and extending it in the future.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	For example, if you have user data, use a User class with firstName and lastName properties among others. You could also create a getter for fullName that append both strings together, but a registration method should not be part of it. For God&amp;rsquo;s sake, do not use a dictionary with keys such as &amp;ldquo;name&amp;rdquo;, &amp;ldquo;email&amp;rdquo;,... it will become a mess sooner than you think!&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;NSLog(@&amp;quot;name: %@&amp;quot;, user.name); //YES
NSLog(@&amp;quot;name: %@&amp;quot;, [user objectForKey:@&amp;quot;name&amp;quot;]); //NEVER!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	What looks better? So please help your teammates!&lt;/div&gt;
&lt;h4&gt;
	Managing local data&lt;/h4&gt;
&lt;div&gt;
	Local data can be stored in many different ways. From very simple formats such as csv to more complex ones such as plists or even databases. My personal preference is to use plists for very simple things (configuration files generally) and use SQLite databases for the rest. In particular, even if I was quite sceptical about it at first, I would recommend using CoreData for your data model unless you really need to get something very particular from your datasource. It is true that adding CoreData means dealing with many new problems and even performance issues, but you also get some very nice features such as &lt;a href="http://developer.apple.com/library/ios/#documentation/CoreData/Reference/NSFetchedResultsController_Class/Reference/Reference.html"&gt;NSFetchedResultsController&lt;/a&gt;, lazy load relations, data modeling tools,... that worths the price.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Anyway, leaving the data store aside, an important thing is how you access/modify that data. I have seen many projects making queries or having to populate records from the database outside the Model layer, which is clearly not a good option. You should always provide data accessors for your model, as well as a clear and straightforward way to store or update new objects. How? well, you could have a global factory class, but my personal preference is to create a set of categories for your data model classes providing methods like &amp;ldquo;fetchAllUsingPredicate&amp;rdquo;, &amp;ldquo;createInstance&amp;ldquo;, &amp;ldquo;save&amp;rdquo;,... This categories could be placed inside a different folder, and imported in your .pch file to be available for all classes. Then, of course, generic implementations could be abstracted into a superclass to avoid duplication of similar code.&lt;/div&gt;
&lt;div&gt;
	For example, continuing with the previous User class, the data model could be defined as:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//  User.h
@interface User : NSObject

@property (nonatomic, strong) NSNumber *identifier;
@property (nonatomic, strong) NSString *email;
@property (nonatomic, strong) NSString *firstName;
@property (nonatomic, strong) NSString *lastName;

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	And a simple access model could be:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;
//  User+LocalAccessors.h
@interface User (LocalAccessors)

+ (NSArray *)fetchAll;
+ (NSArray *)fetchAllUsingPredicate:(NSPredicate *)predicate;
+ (User *)createInstance;
- (void)save;
- (void)delete;

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Then use it like this from any other part of the code:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;NSArray *users = [User fetchAll];
NSLog(@&amp;quot;users: %@&amp;quot;, users);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	As you see, there are no other methods in these files (only the corresponding .m implementation) and all the logic behind the data management is hidden from the rest of the app. Even more, you do not need to know the store that the fetch is using underneath! It could be a CoreData model, but it could also be loaded from a simple plist file or even from an in memory cache with no persistent backup. It doesn&amp;rsquo;t matter, the rest of your code will work anyway as long as you implement the defined accessor methods.&lt;/div&gt;
&lt;div&gt;
	Moreover, all this accessor methods could &amp;nbsp;be defined in a protocol and use it in every single model entity to provide uniform accessor methods for all your model.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Being said that, if you are working with CoreData (as I do), I would recommend you the use of &lt;a href="https://github.com/magicalpanda/MagicalRecord"&gt;MagicalRecord&lt;/a&gt;. It defines a very good set of accessor methods and other useful utilities to make the use of CoreData much better. And it is implemented following similar conventions to the ones just explained!&lt;/div&gt;
&lt;h4&gt;
	Managing remote data&lt;/h4&gt;
&lt;div&gt;
	If managing local data can easily mess up your code, managing remote data makes things even worse because networking is essentially the same problem but in an asynchronous and failure prone environment. Besides, most apps provide a caching mechanism that will store the remote information locally to retrieve it faster next times or without Internet connection. Lot of complex stuff to handle, so how should we approach such a thing to do it properly?&lt;/div&gt;
&lt;div&gt;
	Well, the most important problem here is the asynchronism. In an hypothetical synchronous networking environment we could manage errors as in any other place, and we could easily cache responses to allow the offline connections. What is more, we could use the same pattern explained above (in local data management) to provide an abstract way to fetch, update or delete objects. As we explained before, a &amp;ldquo;fetchAll&amp;rdquo; request could be accessing a plist file, as well as an external REST API without any difference. Unfortunately, networking is asynchronous, so we need to solve this issue in an elegant way.&lt;/div&gt;
&lt;div&gt;
	Objective-C uses many different patterns for handling async calls. Three of them are delegates, notifications and &lt;a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/KeyValueCoding.html"&gt;KVO&lt;/a&gt;, which are not particularly bad (well, KVO is), but not really clean to implement. They require you to write custom methods on your classes to receive the notifications/callbacks and they will quickly get complex if you handle multiple networking operations. A better solution though are blocks. By using blocks you can define the exact code that you want to execute when the operation is finished, very much like a synchronous operation. Of course, this freedom can also mean chaos, so we need to create very specific rules on how to design such a solution.&lt;/div&gt;
&lt;div&gt;
	In my case, what I like the most is to follow the exact same approach than the one used in the local (synchronous) data accessors, but this time expose the results within a passed block. Example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;// User+RemoteAccessors.h
typedef void(^UserObjectBlock)(User *user);
typedef void(^UserArrayBlock)(NSArray *results);
typedef void(^UserErrorBlock)(NSError *error);

@interface User (RemoteAccessors)

+ (void)loadAllOnResult:(UserArrayBlock)resultBlock onError:(UserErrorBlock)errorBlock;
+ (void)createInstanceOnResult:(UserObjectBlock)resultBlock onError:(UserErrorBlock)errorBlock;
- (void)saveOnResult:(UserObjectBlock)resultBlock onError:(UserErrorBlock)errorBlock;
- (void)deleteOnResult:(UserObjectBlock)resultBlock onError:(UserErrorBlock)errorBlock;

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	As you can see, the exact same idea applies here, but you need to handle it asynchronously:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;[User loadAllOnResult:^(NSArray *users) {
NSLog(@&amp;quot;users: %@&amp;quot;, users);
} onError:nil];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	But, what if we want to show cached results while the networking operation is running? then, all we need to do is to define the same remote accessors but with a synchronous response as follows:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//  User+RemoteAccessors.h
@interface User (RemoteAccessors)

+ (NSArray *)loadAllOnResult:(UserArrayBlock)resultBlock onError:(UserErrorBlock)errorBlock;

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Which will return an array of cached users immediately and the server response after a while (within the block). Simple and straightforward!&lt;/div&gt;
&lt;div&gt;
	Of course, implementing the RemoteAccessors category this way can be complex, but fortunately there are a plethora of quite good solutions out there to help us with it. To name my two personal favorites:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href="http://afnetworking.com/"&gt;&lt;strong&gt;AFNetworking&lt;/strong&gt;&lt;/a&gt;: It is a general purpose library to perform network operations. It supports blocks and it has a lot of contributions with different features. If you want to implement the mentioned accesors this is probably the best way to go.&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="http://restkit.org/"&gt;&lt;strong&gt;RestKit&lt;/strong&gt;&lt;/a&gt;: This library is lot more complex than AFNetworking. It does not only handle networking operations, but it also takes care of the data mapping, relations and many other issues (including CoreData objects). It is a very good solution if your remote API follows a standard REST and if it is not too complex. However, after working with it in a couple of projects, I found it very hard to make advance stuff such as conditional caching and dynamic mappers, but of course it can be done. Anyway, RESTKit introduces the idea of encapsulating the mapper in a different class than the model that it corresponds to, which I think is a very good idea. For example, this is a mapper that I use in one of my projects that will set all the information needed to transform a simple networking call into an object model:&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;@implementation SDUser (APIConnectorMapping)

+ (NSDictionary *)mappingObjectsByPattern {
    NSMutableDictionary *mappingDict = [NSMutableDictionary dictionary];
    
    RKObjectMapping *mapping = [self attributeMapping];
    [mappingDict setObject:mapping forKey:@&amp;quot;/auth/login&amp;quot;];
    [mappingDict setObject:mapping forKey:@&amp;quot;/auth/register&amp;quot;];
    [mappingDict setObject:mapping forKey:@&amp;quot;/auth/user&amp;quot;];
    return mappingDict;
}

+ (RKObjectMapping *)attributeMapping {
    RKObjectMapping *mapping = [RKObjectMapping mappingForClass:[self class]];
    [mapping mapAttributes:@&amp;quot;customerId&amp;quot;, @&amp;quot;lastName&amp;quot;, @&amp;quot;firstName&amp;quot;, @&amp;quot;email&amp;quot;, @&amp;quot;mobilePhone&amp;quot;, @&amp;quot;street&amp;quot;, @&amp;quot;city&amp;quot;, @&amp;quot;birthday&amp;quot;, nil];
    [mapping mapKeyPathsToAttributes:
     @&amp;quot;id&amp;quot;, @&amp;quot;identifier&amp;quot;,
     @&amp;quot;key&amp;quot;, @&amp;quot;sessionKey&amp;quot;,
     @&amp;quot;created&amp;quot;, @&amp;quot;sessionDate&amp;quot;,
     @&amp;quot;postalCode&amp;quot;, @&amp;quot;postCode&amp;quot;,
     @&amp;quot;number&amp;quot;, @&amp;quot;houseNumber&amp;quot;,
     nil];
     [mapping mapKeyPath:@&amp;quot;defaultDelivery&amp;quot; toRelationship:@&amp;quot;defaultPickupPoint&amp;quot; withMapping:[SDPickupPoint attributeMapping]];

    return mapping;
}

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	In brief, use categories to hide networking logic (or an external data manager if the calls are too complex), provide blocks for handling the asynchronous operations, and encapsulate the mappers in a different piece of code to be able to modify them easily when needed.&lt;/div&gt;
&lt;h4&gt;
	Global events&lt;/h4&gt;
&lt;div&gt;
	So far we have seen how to access information on demand, when we need it. For example, the users example above could be used from a screen displaying a table of users. But what if we need to manage something more global? App events like a login action can be difficult to implement, specially when it can change at any point depending on server conditions or background threads.&lt;/div&gt;
&lt;div&gt;
	The essence of the problem is very similar to the remote data accessing explained above, but the differences are that we might not be the &amp;ldquo;owners&amp;rdquo; of the request, we might not have any control over it and it could affect to many different subscribers.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	For example, following the User example, what if we want to provide a login call? we could do it following the same convention, adding to the category with the remote calls a method to make login and a block to handle the result. However, if the rest of the app needs to get notified, how can we do it? Once again the async handling options we have are delegates, notifications, KVO and blocks. However, this time blocks do not seem to fit so nicely because we should provide a way to register and unregister multiple blocks for the same event (ouch! I love blocks!). A similar problem applies to delegates, and KVO is a messy solution. So, for this kind of application events, I prefer to use notifications. This way you could declare this global events inside you model, your login method will just need to post the notification when is done, while we keep the elegance of the block handling solution expressed above. But use them with caution though! they grow exponentially when you start implementing them! believe me :)&lt;/div&gt;
&lt;div&gt;
	Login example:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;//  User+RemoteOperations.h
static NSString *kUserLoginNotification = @&amp;rdquo;kUserLoginNotification&amp;rdquo;;
@interface User (RemoteOperations)

// This method will fire kUserLoginNotification on success
- (void)performLoginOnResult:(UserObjectBlock)resultBlock onError:(UserErrorBlock)errorBlock;

@end&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Your calling class will perform login as expected:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;[user performLoginOnResult:^(User *user) {
NSLog(@&amp;quot;logged in user: %@&amp;quot;, user);
} onError:nil];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	while other parts of your app could subscribe to changes by:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(loginChanged) name:kUserLoginNotification object:nil];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4&gt;
	Business rules, flows and others&lt;/h4&gt;
&lt;div&gt;
	Not always your model is about accessing and writing information. Sometimes it could require to apply complex business rules or flows. For this cases I like to create a new class (or set of classes) that will perform those activities -as everybody, I guess. I usually suffix it with the word &amp;ldquo;Manager&amp;rdquo; to denote its different nature.&lt;/div&gt;
&lt;div&gt;
	Anyway, what I wanted to comment here is that for this kind of classes I would recommend always to abstract your calls as much as possible and implement &lt;a href="http://en.wikipedia.org/wiki/Inversion_of_control"&gt;IOC (Inversion Of Control) &lt;/a&gt;patterns when appropriate to decouple your code from this specific piece of code -if you do not know much about IOC, &lt;a href="http://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Service_locator_pattern"&gt;service locators&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Factory_pattern"&gt;factory methods&lt;/a&gt; you should look for them now, they are very helpful-. Otherwise, changing your logic in the future will be difficult and tricky. Do things properly from the beginning and it will pay off.&lt;/div&gt;
&lt;h4&gt;
	Conclusion&lt;/h4&gt;
&lt;div&gt;
	iOS apps are usually simple regarding the functionality contained in the model layer. However, the special nature of the apps (distributed and with error prone connections) make the problem quite complex. To avoid having problems I suggest you follow strict conventions inside your model layer, especially isolating the code that handle the data itself (in plain Objective-C classes), the access to a local data source, the access to a remote data source, and the global events. No matter what conventions you use, the implementation details should always be completely hidden from the caller and generic enough to be able to change your implementation details if needed. I posted a few simple examples of interfaces that could help you abstracting the implementation details, and at the same time I mentioned some libraries that could be used to implement their details.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	After all, it would not be strange if after some time of development you need to switch to a different networking library, database manager or change your business rules. For example, I am right in the middle of changing the networking layer in one project and is amazing to see that I do not have to change a single line of code in the controllers or views, only in the implementation details of the networking accessors, and everything just works as it was working before. Remeber, you can implement your model layer in many different ways, but only by following good design principles you can do such a change without compromising the rest of your code -and keeping it clean at the same time-.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Keep tunned for my next post about MVC, the View role.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/26</id>
    <published>2013-02-21T18:16:31Z</published>
    <updated>2015-02-09T20:56:09Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/26-MVC-in-Objective-C-I-Introduction"/>
    <title>MVC in Objective-C (I): Introduction</title>
    <content type="html">&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;div&gt;
	&lt;strong&gt;MVC&lt;/strong&gt; stands for &lt;strong&gt;Model&lt;/strong&gt; &lt;strong&gt;View&lt;/strong&gt; &lt;strong&gt;Controller&lt;/strong&gt;, and it is a pattern that allows developers to differentiate code depending on three different &lt;strong&gt;roles&lt;/strong&gt;. It is extremely popular due to its simplicity and it is implemented in different ways in almost every single technology out there -in different ways though. MVC helps you making your code lot more &lt;strong&gt;reusable&lt;/strong&gt;, &lt;strong&gt;maintainable&lt;/strong&gt; and easier to &lt;strong&gt;extend&lt;/strong&gt;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="MVC image" src="/ckeditor_assets/pictures/16/content_mvc.png?1362172304" style="width: 400px; height: 279px; background-color: rgb(200, 200, 200);" /&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	One important keyword in my definition that many people do not realize is that it is about roles, not about classes. This means that a single role can be implemented by many classes (obvious) but likewise a single class could implement multiple roles! Yeah, 1 class multiple roles, you read it right! it sounds weird because we are using this pattern to isolate code of different roles, and therefore mixing it in the same class looks like not applying the pattern at all. But wait a second, who said that we actually need to mix the code? Objective-C provides categories and a customizable runtime that can help you out dealing with a multirole class without having to mix code.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In this series of posts I am going to explain one by one the purpose of each role, and show some of the &lt;strong&gt;best practices, pitfalls and useful tools&lt;/strong&gt; that I have found so far. You do not have to fully agree with me, you are probably aware of many of them already, but I am pretty sure that some will help you better designing and organizing your code in your next projects!&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	They will be long so have a little patient and keep reading :)&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href="./27-MVC-in-Objective-C-II-Model"&gt;MVC in Objective-C (II): Model&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="./29-MVC-in-Objective-C-III-The-view-layer"&gt;MVC in Objective-C (III): View&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="http://angelolloqui.com/blog/34-MVC-in-Objective-C-IV-The-Controller-layer"&gt;MVC in Objective-C (IV): Controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/25</id>
    <published>2013-01-13T16:18:32Z</published>
    <updated>2015-04-08T08:23:32Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/25-Acceptance-testing-with-Calabash-and-CocoaPods"/>
    <title>Acceptance testing with Calabash and CocoaPods</title>
    <content type="html">&lt;p&gt;
	&lt;cite&gt;NOTE: I am receiving feedback from readers that this solution is not always working. Please, have in mind that this post is old and the content might be outdated.&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;h4&gt;
	Introduction&lt;/h4&gt;
&lt;div&gt;
	This week I have been delighted with a very attractive (and quite new) acceptance testing framework called &amp;ldquo;&lt;a href="http://calaba.sh/"&gt;Calabash&lt;/a&gt;&amp;rdquo;. My experience in acceptance testing is limited, but Calabash quickly took my attention for a few reasons:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;It uses Cucumber&lt;/strong&gt; for defining tests. Cucumber is a &amp;ldquo;language&amp;rdquo; that is very close to real English, making tests very easy to write and read. Lot better than other alternatives, especially if you have to work with non-technical QA.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;It is multiplatform&lt;/strong&gt;. The same tests can be run both in iOS and Android! How cool is that? write tests once and run in multiple platforms.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;It runs on real devices&lt;/strong&gt;. Nothing else to say, tests should always be run in simulator and real devices. Even more, there are some interesting services in the Internet that allow you to run your Calabash app tests in hundreds of real devices, which can be very helpful for Android apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	However, integrating the framework in a project with &lt;a href="http://cocoapods.org/"&gt;CocoaPods&lt;/a&gt; was not as straightforward as I thought. In this article, we are going to see why and how to fix it.&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Why not use the automatic integration tool from Calabash&lt;/h4&gt;
&lt;div&gt;
	Calabash SDK (0.9.126) comes with a very straightforward integration tool that will automatically modify your XCode project to use Calabash. All you need to do is to run the command &amp;ldquo;&lt;tt&gt;calabash-ios setup&lt;/tt&gt;&amp;rdquo; and a new target for calabash with proper configuration will be added. However, this procedure has the following problems:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		If you use the automatic installation tool, &lt;strong&gt;CocoaPods&lt;/strong&gt; (as is in the current version 0.16.0) &amp;nbsp;&lt;strong&gt;does not work anymore&lt;/strong&gt;:
		&lt;pre&gt;
&lt;code&gt;% calabash-ios setup
% pod update
....
### Error

```
[!] Xcodeproj doesn&amp;#39;t know about the following attributes {&amp;quot;FileEncoding&amp;quot;=&amp;gt;&amp;quot;4&amp;quot;} for the &amp;#39;PBXFileReference&amp;#39; isa.&lt;/code&gt;&lt;/pre&gt;
		&lt;span&gt;It looks like CocoaPods have a problem reading the project file due to the virtual links that the library contains. It will be eventually solved, but for now the issue is there.&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;
		The framework is stored inside the project into a calabash.framework folder &lt;strong&gt;not managed by CocoaPods&lt;/strong&gt;. Despite the fact that the framework can be moved, this is still not convenient because it will require you to make a few changes in your project settings and you will still have the framework somewhere else. Besides, when using CocoaPods, you will probably expect that a command like &amp;ldquo;&lt;tt&gt;pod update&lt;/tt&gt;&amp;rdquo; will update all your stuff, including Calabash.&lt;/li&gt;
	&lt;li&gt;
		Additionally, I personally &lt;strong&gt;prefer to avoid automatic tools&lt;/strong&gt; that hide the integration process. It is always good to know and follow the manual installation process at least once to understand what is required.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
	&amp;nbsp;&lt;/h4&gt;
&lt;h4&gt;
	Manual installation with CocoaPods&lt;/h4&gt;
&lt;div&gt;
	To manually install Calabash, you need to follow the steps:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		Duplicate main target&lt;img alt="" src="/ckeditor_assets/pictures/9/content_calabash_1.png" style="width: 650px; height: 271px;" /&gt;&lt;/li&gt;
	&lt;li&gt;
		Rename your new target to use the &amp;ldquo;-cal&amp;rdquo; suffix instead of &amp;ldquo;copy&amp;rdquo;&lt;img alt="" src="/ckeditor_assets/pictures/10/content_calabash_2.png?1357908722" style="width: 527px; height: 269px;" /&gt;&lt;/li&gt;
	&lt;li&gt;
		Rename your schemes to use the &amp;ldquo;-cal&amp;rdquo; suffix instead of &amp;ldquo;copy&amp;rdquo;&lt;img alt="" src="/ckeditor_assets/pictures/11/content_calabash_3.png?1357908756" style="width: 407px; height: 199px;" /&gt;&lt;img alt="" src="/ckeditor_assets/pictures/12/content_calabash_4.png?1357908781" style="width: 650px; height: 471px;" /&gt;&lt;/li&gt;
	&lt;li&gt;
		Rename your info plist file to use the &amp;ldquo;-cal&amp;rdquo; suffix instead of &amp;ldquo;copy&amp;rdquo;&lt;img alt="" src="/ckeditor_assets/pictures/13/content_calabash_5.png?1357908795" style="width: 318px; height: 336px;" /&gt;&lt;/li&gt;
	&lt;li&gt;
		Change the buildsettings to use the new names (look for &amp;quot;copy&amp;quot; string to filter them quickly)&lt;img alt="" src="/ckeditor_assets/pictures/14/content_calabash_6.png?1357908820" style="width: 650px; height: 295px;" /&gt;&lt;/li&gt;
	&lt;li&gt;
		Add Calabash to Podfile inside the proper target.
		&lt;pre&gt;
&lt;code&gt;target &amp;#39;SupermarketDirect-cal&amp;#39;, :exclusive =&amp;gt; false do
  pod &amp;#39;Calabash&amp;#39;, &amp;#39;&amp;gt;= 0.9.126&amp;#39;
end&lt;/code&gt;&lt;/pre&gt;
		&lt;span&gt;As you see, we are importing at least the version 0.9.126. This is because the previous Spec did not work, and so I had to create this new 0.9.126 Spec to handle the installation from CocoaPods. By the moment you read this, it should be already merged into the cocoa specs so no problem should arise.&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;
		Run &amp;ldquo;&lt;tt&gt;pod install&lt;/tt&gt;&amp;rdquo;&lt;/li&gt;
	&lt;li&gt;
		Run your app from the new target.&lt;br /&gt;
		At this point, is highly probable that you get a &amp;ldquo;duplicate symbols&amp;rdquo; linking error. If so, is because you are linking twice the pods library. Just do the following and run again:
		&lt;ul&gt;
			&lt;li&gt;
				Remove libPods.a from target&lt;img alt="" src="/ckeditor_assets/pictures/15/content_calabash_8.png?1357908922" style="width: 650px; height: 167px;" /&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;strong&gt;UPDATE: &lt;/strong&gt;Thanks to Aaron for pointing out that you may need to remove -lPods from &amp;quot;&lt;span style="font-family: arial, sans-serif; font-size: 13px;"&gt;Other Linker Flags&amp;quot;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	If everything goes OK then you should be able to see a log like:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;2013-01-10 14:05:31.901 SupermarketDirect-cal[18764:c07] Started LPHTTP server on port 37265&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Congratulations! your project is ready for Calabash testing!&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	What&amp;rsquo;s next?&lt;/h4&gt;
&lt;div&gt;
	Play with the cucumber tool and write some tests. There are not many tutorials and references about calabash yet, but a few of intereseting resources are:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href="http://calaba.sh/"&gt;Official homepage&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="http://github.com/calabash/calabash-ios/wiki"&gt;Calabash W&lt;/a&gt;&lt;a href="https://github.com/calabash/calabash-ios/wiki"&gt;ikipedia&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="https://groups.google.com/forum/?fromgroups#!forum/calabash-ios"&gt;Calabash Google Group&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href="http://www.moncefbelyamani.com/ios-automated-testing-with-calabash-cucumber-ruby/"&gt;iOS Automated Testing with Calabash, Cucumber and Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/24</id>
    <published>2012-11-29T10:45:12Z</published>
    <updated>2012-11-30T14:27:05Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/24-DRM-for-mobile-devices-I-Introduction-and-alternatives"/>
    <title>DRM for mobile devices (I) - Introduction and alternatives</title>
    <content type="html">&lt;div&gt;
	&lt;strong&gt;DRM&lt;/strong&gt; (&lt;a href="http://en.wikipedia.org/wiki/Digital_rights_management"&gt;Digital Rights Management&lt;/a&gt;), is a set of &lt;strong&gt;access control techniques&lt;/strong&gt; created to avoid illegitimate use of &lt;strong&gt;premium content&lt;/strong&gt;. Any proper DRM solution should deny the ability to view, copy or share the protected content to any other hardware/software that the one that is has been designed for.&lt;/div&gt;
&lt;div&gt;
	Audio/video DRM solutions use &lt;strong&gt;asymmetric encryption&lt;/strong&gt; together with other &lt;strong&gt;obfuscation techniques&lt;/strong&gt; to protect the content. They are mainly composed by two parts:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Server side&lt;/strong&gt;: Delivers the streaming content (Live or On Demand media), with&amp;nbsp;some encryption applied to it, only to allowed users. They usually require the users to register somehow (for example with a login) to recognise valid users from the rest.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Client side&lt;/strong&gt;: Downloads the stream and decrypts it. Because the client side is executed in an unsecured environment (the client), prior to start decrypting they have to implement environment checks to ensure that security has not been compromised. Because of it, DRM clients requiere closed environments where the sourcecode is as protected as possible and where the private key can not be stolen.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Why should I care about DRM?&lt;/h3&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	This is probably off-topic, but I can not write a post about DRM without asking myself -- and sharing it with you -- &amp;nbsp;this question. Especially when you have in mind these two points:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		&lt;strong&gt;Completely secured DRM is an illusion&lt;/strong&gt;: It is both technically and theoretically impossible to create a security mechanism that decrypts content on the client but at the same time hide it from itself. Whenever you&amp;nbsp;deliver&amp;nbsp;content to a client, this client could potentially modify/crack his environment to just bypass all security checks. For example, if I am a trusted user that can play secured content in my iOS app, how can DRM prevent me from, instead of playing it, modifying the app to save it to disk and upload it to Torrent? Sure, DRM solutions will check that I have not altered the app in anyway, that I do not have a jailbroken device and that I am not debugging it (among other things), but absolutely everything can be bypassed or spoofed. So, DRM is not about avoiding unauthorized access, but about making it difficult to an extent that it will not be worthy to crack it down.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Moral concerns&lt;/strong&gt;: I am not going to deep inside this one because it is completely subjective. However, I have to say that I have some reservations regarding it. I understand why so many people think that the content has to be protected in some way, but at the same time I think that the actual business models are completely outdated and that DRM is just a way to try to perpetuate something that does no longer work. Besides, is leading legitimate users to problems with credentials, slowness and unsupported platforms.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Nevertheless, there are a lot of conflicting interests between big media companies and copyright holders that enforce publishers to use DRM even if they would not like to do it, and believe me if I say that it is big business.&lt;/div&gt;
&lt;div&gt;
	For example, I am working for a client who does only have the rights for showing premium content to a reduced set of his app users (his customers). They know that there is no 100% secure solution, but they need to prove that they are using &amp;ldquo;industry standards&amp;rdquo; mechanisms to prevent unauthorized users from viewing the content - and avoid copyright holders from suing them-. They are spending hundreds of thousands of euros just to accomplish that, probably more than in the app itself. An interesting business opportunity.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Different DRM technologies&lt;/h3&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	So, as explained before, providing DRM is more about using accepted standards than really creating a secured way to deliver your content. Therefore, even if you could probably build a pretty secured In-house solution, you will probably be requested to implement an industry known solution. Lets mention some of the existing alternatives, so you have an idea of where you should investigate next to find out what best suits your needs:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://www.microsoft.com/playready/"&gt;PlayReady&lt;/a&gt;&lt;/strong&gt;: PlayReady is a proprietary solution from Microsoft that has been used widely in the industry since 2007. It is considered as one of the most trusted technologies, with client support for almost every existing platform out there and integrated in many DRM-ready servers (&lt;a href="http://www.verimatrix.com/"&gt;Verimatrix&lt;/a&gt;, &lt;a href="http://www.authentec.com/"&gt;Authentec&lt;/a&gt;, &lt;a href="http://irdeto.com/"&gt;Irdeto&lt;/a&gt;,...). It is currently in use by industry leaders such as Netflix, BBC, HBO or Samsung. In order to display in a regular browser it makes use of the Silverlight plugin.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://www.widevine.com/"&gt;Widevine&lt;/a&gt;&lt;/strong&gt;: Widevine is a company and &amp;nbsp;DRM solution recently acquired by Google, and since then increasing popularity. This is the DRM solution adopted by many of the streaming service providers out there (&lt;a href="http://www.brightcove.com/"&gt;BrightCove&lt;/a&gt;, &lt;a href="http://www.ooyala.com/"&gt;Ooyala&lt;/a&gt;, &lt;a href="http://corp.kaltura.com/"&gt;Kaltura&lt;/a&gt;,...), as well as some big companies such as BlockBuster, BestBuy or Samsung. Most platforms are supported, including mobile devices and smart TVs. In order to watch it in a regular browser, you might need to install a custom plugin.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://www.marlin-community.com/"&gt;Marlin&lt;/a&gt;&lt;/strong&gt;: Marlin is a DRM solution created using open standards and coordinated by the MDC (Marlin Developer Community). It is not as adopted as the previous two options, but still has a share of the DRM market. To name a few, it is used as the IPTV standard in Japan and companies such as Sony, Philips or Panasonic are behind the MDC community. An interesting point of this DRM is that any company could potentially become a partner and take part in Marlin development.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://www.adobe.com/products/adobe-access.html"&gt;Adobe Access&lt;/a&gt;&lt;/strong&gt;: Adobe Access is a very common solution due the popularity of flash based videos on the web. For iOS devices, Adobe provides a native SDK to integrate within your apps that handles all the DRM calls for you, whereas regular browsers will use the broadly available FlashPlayer (99% of PCs have it installed)&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Next steps in your decision making&lt;/h3&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Ok, so hopefully you already have an idea of the DRM technology you want to use. However, that is just the beginning. There are a few more things to consider before starting to work on your solution.&lt;/div&gt;
&lt;h4&gt;
	Streaming technology&lt;/h4&gt;
&lt;div&gt;
	How are you going to deliver the content to your mobile client? Traditionally there have been a lot of different streaming technologies that used custom protocols such as &lt;a href="http://en.wikipedia.org/wiki/Real_Time_Messaging_Protocol"&gt;RTMP&lt;/a&gt;, but nowadays the industry is moving towards &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Adaptive_bitrate_streaming"&gt;HTTP adaptive streaming&lt;/a&gt;&lt;/strong&gt; techniques. With HTTP adaptive streaming the video is sliced into chunks and deliver using regular HTTP file downloads. This techniques scale and bypass firewalls better, allowing segment caching, reducing server costs and in general providing a better user experience. Let&amp;rsquo;s enumerate a few of the most common options:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Live_Streaming"&gt;HLS&lt;/a&gt;&lt;/strong&gt; (HTTP Live Streaming): This technology was introduced by Apple, but has also been adopted by other mobile OS like Android. It is an HTTP adaptive streaming protocol that works by slicing the original video into MPEG2-TS segments of about 10 seconds and listing all of them (including different bitrates and qualities) into a M3U8 file. In general, HLS streams have big buffers which provide a very stable streaming but with latencies of about 30 seconds. This is the default streaming protocol for iOS.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://www.iis.net/downloads/microsoft/smooth-streaming"&gt;Smooth Stream&lt;/a&gt;&lt;/strong&gt;: This is a streaming technology property of Microsoft announced in October 2008. It is also an HTTP adaptive streaming solution that works in many senses like HLS. However, due to the use of MPEG4 files and some other internal differences, the Smooth Stream fragment size is typically of 2 seconds, what introduces in general a smaller latency and faster quality switches.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://www.adobe.com/products/hds-dynamic-streaming.html"&gt;HDS&lt;/a&gt;&lt;/strong&gt; (HTTP Dynamic Streaming): HDS is the Adobe&amp;rsquo;s alternative for using Adaptive HTTP Streaming with their products. It was announced in 2009 and first deliver in June 2010. Using MPEG4 files of 2-5 seconds, is a very similar solution to Microsoft&amp;rsquo;s Smooth Stream, and adapts the stream by checking bandwidth and CPU use of the device.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP"&gt;DASH&lt;/a&gt;&lt;/strong&gt; (Dynamic Adaptive Streaming over HTTP): DASH is a streaming technology that was first announced in 2010. The inception of the idea behind this protocol came when &amp;nbsp;observing a bunch of vendor specific HTTP streaming solutions which work in very similar ways but which are totally incompatible between them. DASH tries to gather the best features of all existing HTTP adaptive streaming solutions and create an open standard out of all of them. The specification is still in development but has already received support from many big companies including Apple, Microsoft and Adobe. A promising future, but too early to work with it though.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Of course, these are only a few of the most popular existing options, but there is a plethora of &amp;nbsp;other solutions based and not based on HTTP streaming.&lt;/div&gt;
&lt;h4&gt;
	Client side Library&lt;/h4&gt;
&lt;div&gt;
	What&amp;rsquo;s next? After choosing your prefered DRM and streaming technique, then you have to look for the client side library that supports your desired configuration. Note that it may be hard or even impossible to use all possible configurations, and they will be dependent on the mobile OS to support. For example, PlayStream it is usually adopted together with Smooth Stream, and even if it can also be delivered on top of an HLS streaming you will need to use third party libraries on your iOS device, which will probably make things harder and more expensive.&lt;/div&gt;
&lt;h4&gt;
	Streaming server&lt;/h4&gt;
&lt;div&gt;
	As well as the client side library, you need to look for a streaming server that supports the desired configuration. There are many streaming servers out there that support multiple DRM and streaming techniques. Some examples are &lt;a href="http://www.adobe.com/products/adobe-media-server-family.html"&gt;Adobe Media Server&lt;/a&gt;, &lt;a href="http://www.wowza.com/"&gt;Wowza&lt;/a&gt;, &lt;a href="http://www.red5.org/"&gt;Red5&lt;/a&gt;, &lt;a href="http://www.iis.net/media"&gt;IIS Media Service&lt;/a&gt;,... &amp;nbsp;all of them with many different features, plugins and license models. You will have to look for the one that bests suits your needs.&lt;/div&gt;
&lt;h4&gt;
	Anything else?&lt;/h4&gt;
&lt;div&gt;
	Of course, there are many things that we have not commented - license models and costs, designing your server infrastructure, choosing a CDN, supported video encodings,... - but there is one that might be of special importance: Whenever you are working directly with a DRM solution (and not via an intermediate partner) you will likely need to make a partnership with the organization behind it, and it might get complicated depending on the requested requirements. For example, if you choose the Google&amp;rsquo;s Widevine you will need to pass the CWIP program before getting the iOS SDK. This is mainly because anyone with access to the client decoders could theoretically reverse engineer it, compromising the security of the whole DRM technique, and for that reason they want to control its access.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	Easier alternatives&lt;/h3&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	As we have seen so far, implementing a DRM solution end-to-end is quite complex, especially if you want to support multiple client platforms and mobile devices. There are a lot of things to consider, decisions to take and work to do. Because of that, there are other companies that offer simpler alternatives if you do not mind to pay extra money. Let&amp;rsquo;s see a couple of them:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Packaged DRM Solutions&lt;/strong&gt;: Some companies offer closed packages that include a predefined set of DRM technologies - streaming servers and client libraries- already compiled, protected and ready to use, which will be probably easier to setup and use if you do not mind to pay a good amount of money. A good example of such a closed package is &lt;a href="http://www.verimatrix.com/"&gt;Verimatrix&lt;/a&gt;, which provides an end-to-end service with Marlin and PlayReady DRM that you can install in your own infrastructure and use in your mobile devices with their SDK.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Streaming services on the Cloud&lt;/strong&gt;: Some companies provide the full streaming service on the cloud to help you setting up everything as fast as possible with proven scalability and quality. This approach frees you from installing the server software, managing the infrastructure to scale on consumption peaks, they provide many different streaming protocols, simple web CMS, and even sometimes they also provide DRM and client side libraries ready to use out of the box. Of course, this companies sell their services as a SaaS, and it will probably cost you more money if you make a heavy use of it, but can be a very good solution if your users and resources are limited. Some notable examples are &lt;a href="http://www.brightcove.com/"&gt;BrightCove&lt;/a&gt;, &lt;a href="http://www.ooyala.com/"&gt;Ooyala&lt;/a&gt;, &lt;a href="http://corp.kaltura.com/"&gt;Kaltura&lt;/a&gt;, &lt;a href="https://www.windowsazure.com/en-us/home/features/media-services/"&gt;Azure Media Service&lt;/a&gt; or &lt;a href="http://www.vmix.com/"&gt;Vmix&lt;/a&gt;, but as usual many other options exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3&gt;
	What&amp;rsquo;s next&lt;/h3&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In the next post we will have a look to the Secure HLS technology proposed by Apple, and analyze why this can not be considered a full DRM solution. We will also take a look to DRM from a Webapp perspective. Keep tuned.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/23</id>
    <published>2012-11-02T09:43:00Z</published>
    <updated>2012-11-02T11:48:31Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/23-ARC-III-ARC-Optimizations"/>
    <title>ARC (III) - ARC Optimizations</title>
    <content type="html">&lt;div&gt;
	In my previous two posts about ARC (&lt;a href="http://angelolloqui.com/blog/21-ARC-I-Introduction-to-ARC-and-how-it-works-internally"&gt;post I&lt;/a&gt; and &lt;a href="http://angelolloqui.com/blog/22-ARC-II-Advantages-drawbacks-and-false-myths"&gt;post II&lt;/a&gt;) I have talked about the optimizations and how ARC can perform as fast (or even faster) as manual memory management. This is quite clear when working with simple alloc/retain/release examples because it is exactly equivalent to manual memory management but using C calls (which are faster). However, I haven&amp;rsquo;t explain &lt;strong&gt;how it does it when dealing with methods that return autoreleased memory&lt;/strong&gt;. So, it is time to have some fun.&lt;/div&gt;
&lt;div&gt;
	First, lets copy again the resulting ARC compiled code seen in &lt;a href="http://angelolloqui.com/blog/21-ARC-I-Introduction-to-ARC-and-how-it-works-internally"&gt;the first post&lt;/a&gt;:&lt;/div&gt;
&lt;!--more--&gt;
&lt;pre&gt;
&lt;code&gt;- (Foo *)foo {
      return objc_retainAutoreleaseReturnValue(foo_);
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;Foo *foo = objc_retainAutoreleasedReturnValue([self foo]);
[foo something];
objc_release(foo);
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
	As commented in &lt;a href="http://angelolloqui.com/blog/22-ARC-II-Advantages-drawbacks-and-false-myths"&gt;the previous post&lt;/a&gt;, at a first glance this seems to introduce some overhead. It calls &lt;tt&gt;objc_retainAutoreleaseReturnValue&lt;/tt&gt; function for presumably retaining and autoreleasing a variable (to ensure the memory is returned autoreleased without modifying the retain count). Then, the receiver calls to &amp;nbsp;&lt;tt&gt;objc_retainAutoreleasedReturnValue&lt;/tt&gt; (note is &lt;strong&gt;not&lt;/strong&gt; the same method than &lt;tt&gt;objc_retainAutoreleaseReturnValue&lt;/tt&gt;) which seems to retain the autoreleased object (and protect it from premature release due to a pool drain) and finally the memory is released (to keep the retain count balance). In brief, the performed memory calls seems to be:&lt;/div&gt;
&lt;pre&gt;
  +1 retain      //objc_retainAutoreleaseReturnValue(foo_);
  -1 autorelease //objc_retainAutoreleaseReturnValue(foo_);
  +1 retain      //objc_retainAutoreleasedReturnValue([self foo]);
  -1 release     //objc_release(foo);
&lt;/pre&gt;
&lt;div&gt;
	Everything looks correct in this assumption, and by doing it this way we can ensure that memory will be valid on every single instruction shown, even if we release the original foo variable inside our code. However, it introduces some &lt;strong&gt;extra memory calls that could potentially make things slower.&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
	Can we improve it? Yes, we can. Why not instead of doing the second and third call (autorelease + retain) we skip it completely? will this still guarantee memory safety?&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	And the answer is YES. We can indeed remove these two calls and everything will continue working. Moreover, not only we remove 2 calls, but also one of them is an autorelease call, which in case of being executed will postpone the actual deallocation until the pool is drained (with the obvious impact in performance and memory use).&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	That is an amazing improvement! &lt;strong&gt;If we can remove these two instructions&lt;/strong&gt; then we can release the memory as soon as it is no longer needed, achieving a &lt;strong&gt;better performance and decreasing memory&lt;/strong&gt; use by making less use of memory pools. Even more, code like this:&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;
NSArray *myArray = [[NSArray alloc] init];
//Do something
[myArray release];
&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
	Will indeed be equivalent to&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;
NSArray *myArray = [NSArray array];
//Do something
&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
	Because the memory returned by the array method will no longer be allocated/autoreleased but allocated/released in both cases.&lt;/div&gt;
&lt;div&gt;
	However, removing these lines is quite &lt;strong&gt;difficult&lt;/strong&gt; for a reason: The &lt;strong&gt;two calls are in different methods&lt;/strong&gt; (one in the caller and the other in the receiver method). Even more, it could potentially be in different libraries, or even in non-ARC compatible code! And of course, if we apply the optimization and one of the involved methods is not using ARC or is doing things differently for any reason, then our memory retain count balance is broken and we will end up with an app leaking or crashing. Not good!&lt;/div&gt;
&lt;h4&gt;
	How ARC &amp;ldquo;removes the two calls&amp;rdquo;&lt;/h4&gt;
&lt;div&gt;
	OK, it is not easy to remove the mentioned two calls, but let me advance you that ARC does something pretty equivalent. How? well, if we check the official documentation we can see that the call to &lt;tt&gt;objc_retainAutoreleaseReturnValue&lt;/tt&gt; is doing a &lt;tt&gt;objc_retain&lt;/tt&gt; (as expected) followed by an &lt;tt&gt;objc_autoreleaseReturnValue&lt;/tt&gt;. There is where the magic starts! According to &lt;a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#runtime.objc_retainAutoreleaseReturnValue"&gt;the Clang documentation&lt;/a&gt;:&lt;/div&gt;
&lt;div&gt;
	&lt;cite&gt;&lt;strong&gt;8.4. id objc_autoreleaseReturnValue(id value);&lt;/strong&gt;&lt;br /&gt;
	Precondition: value is null or a pointer to a valid object.&lt;br /&gt;
	If value is null, this call has no effect. Otherwise, it makes a best effort to hand off ownership of a retain count on the object to a call toobjc_retainAutoreleasedReturnValue for the same object in an enclosing call frame. If this is not possible, the object is autoreleased as above.&lt;br /&gt;
	Always returns value.&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	&lt;cite&gt;&lt;strong&gt;8.15. id objc_retainAutoreleasedReturnValue(id value);&lt;/strong&gt;&lt;br /&gt;
	Precondition: value is null or a pointer to a valid object.&lt;br /&gt;
	If value is null, this call has no effect. Otherwise, it attempts to accept a hand off of a retain count from a call to objc_autoreleaseReturnValue on value in a recently-called function or something it calls. If that fails, it performs a retain operation exactly like objc_retain.&lt;br /&gt;
	Always returns value.&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	Awesome!!! What this means is that instead of just calling the autorelease + retain, these functions do their &amp;ldquo;best attempt&amp;rdquo; to avoid it, and if it can not then it just does the autorelease + retain cycle! exactly the kind of improvement that we wanted! It will make things faster when possible and still will work when dealing with non-optimized or non-ARC code.&lt;/div&gt;
&lt;div&gt;
	However, the documentation doesn&amp;rsquo;t tell much about how it can actually make such a thing. For that reason, &lt;a href="http://www.mikeash.com/pyblog/friday-qa-2011-09-30-automatic-reference-counting.html"&gt;Mike Ash gives a really good explanation in his blog&lt;/a&gt; (which I am going to copy because I could not explain it better):&lt;/div&gt;
&lt;div&gt;
	&lt;cite&gt;&amp;ldquo;When objc_retainAutoreleaseReturnValue runs, it looks on the stack and grabs the return address from its caller. This allows it to see exactly what will happen after it finishes. When compiler optimizations are turned on, the call to objc_retainAutoreleaseReturnValue will be subject to tail-call optimization, and the return address will point to the call to objc_retainAutoreleasedReturnValue.&lt;br /&gt;
	With this crazy return-address examination, the runtime is able to see that it&amp;#39;s about to perform some redundant work. It therefore eliminates the autorelease, and sets a flag that tells the caller to eliminate its retain. The whole sequence ends up doing a single retain in the getter and a single release in the calling code, which is both completely safe and efficient.&lt;br /&gt;
	Note that this optimization is fully compatible with non-ARC code. In the event that the getter doesn&amp;#39;t use ARC, the flag won&amp;#39;t be set and the caller will perform a full retain/release combination. In the event that the getter uses ARC but the caller does not, the getter will see that it&amp;#39;s not returning to code that immediately calls the special runtime function, and will perform a full retain/autorelease combination. Some efficiency is lost, but correctness is preserved.&amp;rdquo;&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	There it is! so this memory calls are not simply doing a retain/autorelease operation, but &lt;strong&gt;checking if the next instruction &lt;/strong&gt;to be executed is the opposite one. And it does that by &lt;strong&gt;examining the return address of the function&lt;/strong&gt;!!&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Amazingly clever!!! Congratulations to the ARC team for this optimization!!!&lt;/div&gt;
&lt;h4&gt;
	Still not satisfied? Want more?&lt;/h4&gt;
&lt;div&gt;
	Then check out this great &lt;a href="http://www.galloway.me.uk/2012/02/how-does-objc_retainautoreleasedreturnvalue-work/"&gt;post of Matt Galloway about objc_retainAutoreleasedReturnValue&lt;/a&gt; where he explains everything in full detail. Worth reading!.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/22</id>
    <published>2012-10-26T12:10:08Z</published>
    <updated>2012-11-02T11:52:01Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/22-ARC-II-Advantages-drawbacks-and-false-myths"/>
    <title>ARC (II) - Advantages, drawbacks and false myths</title>
    <content type="html">&lt;div&gt;
	&lt;a href="http://angelolloqui.com/blog/21-ARC-I-Introduction-to-ARC-and-how-it-works-internally"&gt;In my previous post I analyzed the fundamentals of ARC&lt;/a&gt;. Today, I am going to write a quick post about some general advantages, problems and myths around it. I warn you that I will not enter in details, but it will be useful as an introduction to the next (and probably last) post of the series.&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Advantages&lt;/h4&gt;
&lt;div&gt;
	There are many advantages of using it, but I would summarize them on the following:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;It Keeps it Simple Stupid (KISS)&lt;/strong&gt;! Working with ARC makes your code easier to write, read and maintain. Therefore, your code will be less error prone and you could actually save some time writing (specially in &lt;span style="font-family:courier new,courier,monospace;"&gt;dealloc&lt;/span&gt; methods).&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Safer&lt;/strong&gt;: Do you think your code is secure without ARC? Yes, you know how to retain your instance variables, but, let me ask you if you always retain your temporal variables. Probably not always, right? In the end, if it is a temporal variable there is little point on retaining a variable and releasing it a few lines later right? Well, then check out the last example exposed in my previous post! You can never be absolutely sure if an autoreleased returned value will be available the full variable life time, so you should retain always autoreleased variables to be 100% sure it will work. ARC variables by default are strong, which means that they will be retained, and the compiler never forgets :). Besides that, the introduction of weak references can also help a lot in solving problems with released pointed objects (usually delegates).&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Less leaks&lt;/strong&gt;: If you are a master of iOS development you probably have few memory leaks or even not at all. However, even if that is the case is common to work with different people who might not be as experienced as you are. The use of ARC ensures that there is no leak due to an incorrect use of retain/release. However, be careful with the memory retain cycles! they are still there.&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Reduces autorelease pools&lt;/strong&gt;: This one is pretty interesting because I thought that ARC would make heavy use of autoreleasing pools. However, that&amp;rsquo;s part of a false myth and we will take a look to it later. For now, all you need to know is that it actually reduces the amount of autoreleases in your code (if everything is ARC compatible though), which could make your apps to actually execute faster if your code produces&amp;nbsp;heavy memory pools.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Problems&lt;/h4&gt;
&lt;div&gt;
	Even if the advantages of using ARC are enough to encourage any developer to move to it, there are some issues when working with ARC that you still need to consider:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Less experienced programmers&lt;/strong&gt;: Because ARC is easy, it can make developers to not care about memory at all. This could eventually create problems such as memory retain cycles. Remember, ARC helps you writing better code,&amp;nbsp;but you still need to know the basics of memory management.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Working with Foundation objects, C returned data, structs, and other low level data&lt;/strong&gt;: ARC knows how to handle memory if the object is an Objective-C class (an instance of NSObject), but what about other allocated memory? things such as C structs or arrays can not be managed by ARC, so this force you to take care by yourself. It&amp;rsquo;s not that ARC introduces overhead if you use such kind of data types, but it certainly make it a littler more difficult because, against the general idea of ARC, this time you have to handle it yourself. For dealing with this issue, ARC introduces the concept of bidges, which allows developers to tell ARC how to move objects in and out of ARC control. A quickly explanation of existing bridges:&lt;/li&gt;
&lt;/ul&gt;
&lt;ul style="margin-left: 40px; "&gt;
	&lt;li&gt;
		&lt;tt&gt;__bridge&lt;/tt&gt; simply transfers a pointer between ARC and non-ARC with no transfer of ownership.&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;__bridge_transfer&lt;/tt&gt; moves a non-Objective-C pointer to Objective-C and also transfers ownership, such that ARC will release the value for you.&lt;/li&gt;
	&lt;li&gt;
		&lt;tt&gt;__bridge_retained&lt;/tt&gt; moves an Objective-C pointer to a non-Objective-C pointer and also transfers ownership, such that you, the programmer, are responsible for later calling CFRelease or otherwise releasing ownership of the object.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	In general, I would say that if your project uses a lot of non-ARC compatible libraries which can not be ported (third party libraries, C/C++ based or Foundation) then I would not move to ARC. It will make your code dirtier with bridges and it could also lead to bigger memory pools. Otherwise (most projects), ARC will give you enough advantages to give it a try.&lt;/div&gt;
&lt;h4&gt;
	False myths&lt;/h4&gt;
&lt;div&gt;
	Now that we have a general idea of how everything works, I think is the perfect moment to introduce some false myths that I have seen so far:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;It is a garbage collector&lt;/strong&gt;: Completely false. A garbage collector is some kind of external entity that runs while your app does and checks for memory that is no longer valid. ARC on the other hand is a compile time tool, which introduces memory management calls in the resulting binary of your app. There is no process profiling your memory, and that is one of the reasons why it can be so fast. The pitfall, of course, is that it can not provide some of the advanced features that some garbage collectors give, like detection of memory retain cycles.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;You don&amp;rsquo;t have to worry about any aspect of memory management&lt;/strong&gt;: As stated in the previous bullet, ARC is not a garbage collector, and therefore it can not detect memory retain cycles. You still have to worry to set your strong variables carefully or you could end up with two objects that retains each other. Besides that, manual memory management has to be done for non-ARC objects as we showed previously.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;ARC only works on iOS5 and later&lt;/strong&gt;: I am not sure why this myth is so common, but I guess that&amp;nbsp;is due to weak references. Weak references only work on iOS5+, but the rest of ARC is fully iOS4 compatible, which nowadays is enough for most projects. If you need to support iOS4 just do not use weak variables and you are done! Afterall, weak references were not available before ARC so you should not miss anything in your old projects when moving to ARC.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;It is slower than manual memory management&lt;/strong&gt;: This one is my favorite because I indeed believed it when I started with ARC, but it is also false. You might think that in order to make secure code, ARC needs to make a lot of unuseful &lt;span style="font-family:courier new,courier,monospace;"&gt;retain/release&lt;/span&gt; calls and probably abuse of &lt;span style="font-family:courier new,courier,monospace;"&gt;autorelease&lt;/span&gt;. After All, we have seen in the previous post all the calls that ARC does to retain objects and how it autoreleases the returned objects of your methods. This should definitely be slower right? Well, on the hand hand ARC memory calls are pure C functions, which are slightly faster than standard Objective-C calls. However, the real reason for ARC being so fast has little to do with that. Do you want to know why? Then keep reading the &lt;a href="http://angelolloqui.com/blog/23-ARC-III-ARC-Optimizations"&gt;next post of the serie, where I explain&amp;nbsp;some of the nice magic going on under the hood&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/21</id>
    <published>2012-10-11T10:32:05Z</published>
    <updated>2012-10-28T09:14:44Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/21-ARC-I-Introduction-to-ARC-and-how-it-works-internally"/>
    <title>ARC (I) - Introduction to ARC and how it works internally</title>
    <content type="html">&lt;div&gt;
	It has been about a year since Apple released &lt;a href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html"&gt;ARC&lt;/a&gt;, and even if there is a lot of good information out there I still see some misconceptions, false myths and reluctances to adopt it . Because of that, I am going to write a set of posts about it, but focusing in explaining how it works under the hood and why some of the myths out there are not really true.&lt;/div&gt;
&lt;div&gt;
	So today, lets start by presenting ARC.&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	What is ARC and where does it come from?&lt;/h4&gt;
&lt;div&gt;
	Since the very beginning, Objective-C defined a few good &lt;a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html#//apple_ref/doc/uid/10000011i"&gt;rules regarding memory management&lt;/a&gt;. One of them is called &lt;strong&gt;Ownership&lt;/strong&gt; convention, which is there to define who should retain and release what. With it, if you are the owner of an object, you are responsible of releasing it, and you can pass ownership to the calling method by using some special words on your method names (&lt;span style="font-family:courier new,courier,monospace;"&gt;allocXXX&lt;/span&gt;, &lt;span style="font-family:courier new,courier,monospace;"&gt;newXXX&lt;/span&gt;, &lt;span style="font-family:courier new,courier,monospace;"&gt;copyXXX&lt;/span&gt;). Thanks to this convention, the developer doesn&amp;rsquo;t need to check the internals of a method looking for whether it returns an autoreleased or retained object. Everything he needs to know is defined in the method name.&lt;/div&gt;
&lt;div&gt;
	Of course, the developer is not the only one who could check such a thing, and XCode introduced a tool to analyze the code and look for incorrect uses of the ownership pattern (named Analyzer).&lt;/div&gt;
&lt;div&gt;
	At that point, the XCode Analyzer was a good tool, but many of us wondered how difficult would it be to improve it to the next level and let it fix the code. Of course, fixing code is not only adding or removing calls to retain/release. Analyzer should be able to know a few more contextual information and things like accessing ivars could easily break it down if they are not managed somehow by it.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Of course, Apple was already working on such a tool, and it was released with the name of ARC (Automatic Reference Counting) about a year ago.&lt;/div&gt;
&lt;h4&gt;
	Basic differences of ARC compatible code&lt;/h4&gt;
&lt;div&gt;
	With ARC, developers are banned from using &lt;span style="font-family:courier new,courier,monospace;"&gt;retain&lt;/span&gt;/&lt;span style="font-family:courier new,courier,monospace;"&gt;release&lt;/span&gt;/&lt;span style="font-family:courier new,courier,monospace;"&gt;autorelease&lt;/span&gt;, because the compiler will take care of that, inserting the missing memory statements wherever they are needed. ARC also adds some new qualifiers in variables and properties, which are somehow equivalent to the non-ARC counterparts, but with some exceptions. Let&amp;rsquo;s take a look:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;span style="font-family:courier new,courier,monospace;"&gt;__autoreleasing&lt;/span&gt;: This qualifiers indicates that the variable will be released with the next pool drain. Internally it retains and autoreleases the object. Note that this qualifier has no sense in a property, and therefore it is not allowed.&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-family:courier new,courier,monospace;"&gt;__strong&lt;/span&gt;: Equivalent to &lt;span style="font-family:courier new,courier,monospace;"&gt;retain&lt;/span&gt; qualifier in non-ARC.&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-family:courier new,courier,monospace;"&gt;__unsafe_unretained&lt;/span&gt;: Implies the object is not retained. Equivalent to &lt;span style="font-family:courier new,courier,monospace;"&gt;assign&lt;/span&gt; qualifier in non-ARC.&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-family:courier new,courier,monospace;"&gt;__weak&lt;/span&gt;: Similar to &lt;span style="font-family:courier new,courier,monospace;"&gt;assign&lt;/span&gt; qualifier in the way that it does not retain the object, but weak variables are also nullified when the object that it points to is released. It works atomically &amp;nbsp;to guarantee the correctness of releasing and nullifying.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Besides defining new qualifiers, there are a few more changes introduced by ARC when comparing to non-ARC code:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		Every variable is declared as &lt;strong&gt;strong by default&lt;/strong&gt;. This is especially important in ivars as they used to be defaulted to &lt;span style="font-family:courier new,courier,monospace;"&gt;assign&lt;/span&gt;&amp;nbsp;when no qualifier present. This means that with ARC you can safely assign an object to an ivar with using the property, it will be retained.&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-family:courier new,courier,monospace;"&gt;__block&lt;/span&gt; qualifiers in ARC &lt;strong&gt;retains&lt;/strong&gt; the object, while it doesn&amp;rsquo;t in non-ARC environments. Be especially cautious when dealing with blocks, otherwise it&amp;nbsp;could lead you to retain cycles (the compiler will probably warn you anyway).&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-family:courier new,courier,monospace;"&gt;deallocs&lt;/span&gt; are &lt;strong&gt;no&amp;nbsp;longer needed&lt;/strong&gt;. ARC will release any variable that loses the scope, which also includes the ivars. Dealloc is still available in case you need to free other objects such as structs or make operations such as close a file or interrupt a communication. However, you should not call &lt;span style="font-family:courier new,courier,monospace;"&gt;[super dealloc]&lt;/span&gt; explicitly.&amp;nbsp;No more nullifying nightmare in deallocs.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Lastly, there are also a few more things to take in mind when working with ARC, such as bridges, but will treat them later.&lt;/div&gt;
&lt;h4&gt;
	ARC internals&lt;/h4&gt;
&lt;div&gt;
	OK, we have seen a very basic introduction, but we want to know more. How does it work internally? well, let&amp;rsquo;s take a look to some code examples:&lt;/div&gt;
&lt;div&gt;
	A simple assignment in non-ARC:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Foo *foo = [[Foo alloc] init];
[foo something];
[foo release];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	ARC counterpart:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Foo *foo = [[Foo alloc] init];
[foo something];&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	What ARC compiles:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Foo *foo = [[Foo alloc] init];
[foo something];
objc_release(foo);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Quite similar right? except for the fact that &lt;span style="font-family:courier new,courier,monospace;"&gt;obj_release&lt;/span&gt; is a pure C function, they are completely equivalent.&lt;/div&gt;
&lt;div&gt;
	An assignement with an autoreleased method call &amp;nbsp;(both ARC and non-ARC codes are equivalent):&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Foo *foo = [self foo];
[foo something];&lt;/code&gt;&lt;/pre&gt;
	&lt;pre&gt;
&lt;code&gt;- (Foo *)foo {
	return foo_;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	What ARC compiles:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Foo *foo = objc_retainAutoreleasedReturnValue([self foo]);
[foo something];
objc_release(foo);&lt;/code&gt;&lt;/pre&gt;
	&lt;pre&gt;
&lt;code&gt;- (Foo *)foo {
		return objc_retainAutoreleaseReturnValue(foo_);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	In this case, we can see a small difference between both versions. In ARC, the compiler is &lt;strong&gt;extremely paranoid&lt;/strong&gt; and will retain the autoreleased object received from &lt;span style="font-family:courier new,courier,monospace;"&gt;[self foo]&lt;/span&gt; and release it afterwards, when it is out of scope (remember that variables are strong by default). This may seem an unuseful overhead, but we will see later that &lt;strong&gt;ARC does some magic in there to solve the overhead &lt;/strong&gt;and will indeed have a better performance that the non-ARC version. Besides, the extra &lt;span style="font-family:courier new,courier,monospace;"&gt;retain&lt;/span&gt;/&lt;span style="font-family:courier new,courier,monospace;"&gt;release&lt;/span&gt; is not completely unuseful. Check out the following piece:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;Foo *foo = [self foo];
[foo bar];
[self setFoo: newFoo];
[foo bar]; // bang! non-ARC code crashes!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	In this example, assigning a new value to &lt;span style="font-family:courier new,courier,monospace;"&gt;[self foo]&lt;/span&gt; will release its memory and the second call to &lt;span style="font-family:courier new,courier,monospace;"&gt;[foo bar]&lt;/span&gt; will make it &lt;strong&gt;crash in a non-ARC&lt;/strong&gt; environment. This snippet may seem very obvious, but the point is that the call to &lt;span style="font-family:courier new,courier,monospace;"&gt;[self setFoo]&lt;/span&gt; could be performed by a different method or thread, even from inside of &lt;span style="font-family:courier new,courier,monospace;"&gt;bar&lt;/span&gt;, which may not look so obvious but will equally crash. On the other hand, the ARC counterpart will efficiently solve the problem because the object will still be retained until the variable is out of scope.&lt;/div&gt;
&lt;h4&gt;
	What&amp;rsquo;s next?&lt;/h4&gt;
&lt;div&gt;
	&lt;a href="http://angelolloqui.com/blog/22-ARC-II-Advantages-drawbacks-and-false-myths"&gt;In my next post&lt;/a&gt; I&amp;rsquo;ll analyze some false myths about ARC as well as some of the advantages and drawbacks that you could encounter when working with it.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/20</id>
    <published>2012-09-28T11:47:40Z</published>
    <updated>2014-05-05T09:56:45Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/20-iPhone5-568h-image-loading"/>
    <title>iPhone5 -568h image loading</title>
    <content type="html">&lt;div&gt;
	With the introduction of the retina displays, Apple implemented a few changes when loading images that allowed the SDK to look for the corresponding retina image (named with a &lt;tt&gt;@2x&lt;/tt&gt; convention) automatically. This was a relief for developers, as they do not needed to change the code in their apps. All an iOS developer needs to do is provide the corresponding &lt;tt&gt;@2x &lt;/tt&gt;images of the non-retina ones.&lt;/div&gt;
&lt;div&gt;
	Nowadays, with the introduction of iPhone5 and its bigger display, some images such as backgrounds should also be loaded from a different file or otherwise the image will be stretched. I expected that Apple would make a similar trick, this time with the &lt;tt&gt;-568h&lt;/tt&gt; convention that they imposed for the Default screen. However, in this case, &lt;strong&gt;they do not seem to do that&lt;/strong&gt;. WTF! Why? well, I don&amp;#39;t know exactly why but if I try to guess I would say that it is because checking so many paths on runtime introduces a &lt;strong&gt;considerable lag&lt;/strong&gt;, and in contrast with the retina version, the 568 counterparts are &lt;strong&gt;used rarely&lt;/strong&gt;. They will only be applied in backgrounds and similar images, but not in small images such as icons.&amp;nbsp;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	So, what can we do?&lt;/h4&gt;
&lt;div&gt;
	Well, thanks to the runtime libraries of Objective-C we can provide a clean solution based on &lt;strong&gt;MethodSwizzling&lt;/strong&gt; &amp;nbsp;that actually makes the same trick without changing the code.&lt;/div&gt;
&lt;div&gt;
	There are already a few implementations of such a utility:
	&lt;ul&gt;
		&lt;li&gt;
			&lt;a href="http://www.sourcedrop.net/FY53a14b0127f"&gt;http://www.sourcedrop.net/FY53a14b0127f&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;
			&lt;a href="https://gist.github.com/3711077"&gt;https://gist.github.com/3711077&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;
			&lt;a href="https://gist.github.com/3742463"&gt;https://gist.github.com/3742463&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;
			&lt;a href="http://odoruinu.net/blog/2012/09/26/automatically-loading-iphone-5-sized-images-where-required/"&gt;http://odoruinu.net/blog/2012/09/26/automatically-loading-iphone-5-sized-images-where-required/&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
	However, they all seem to have some problems. For example:
	&lt;ul&gt;
		&lt;li&gt;
			They swizzle the &lt;tt&gt;imageNamed&lt;/tt&gt; method without checking if it is an iPhone5, introducing an overhead that is not needed for iPads and iPhone4S (and previous versions).&lt;/li&gt;
		&lt;li&gt;
			They do not support loading files into bundles. For example, the image @&amp;quot;MyBundle.bundle/picture.png&amp;quot; will not load properly.&lt;/li&gt;
		&lt;li&gt;
			They have problems if the image name has the extension in it. An image called @&amp;quot;picture.png&amp;quot; will not load properly.&lt;/li&gt;
		&lt;li&gt;
			The &lt;tt&gt;scale&lt;/tt&gt; property is not correctly set to 2.0.&lt;/li&gt;
		&lt;li&gt;
			They do not support XIB file loading&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;h4&gt;
	The solution&lt;/h4&gt;
&lt;div&gt;
	Because of that, I created a new category based on the previous code, but with a few improvements to solve the commented problems.&lt;/div&gt;
&lt;div&gt;
	Here is the snippet:&lt;/div&gt;
&lt;div&gt;
	&lt;a href="https://gist.github.com/3799648"&gt;https://gist.github.com/3799648&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
	&lt;tt&gt;UImage+H568.m&lt;/tt&gt;
	&lt;pre&gt;
&lt;code&gt;//
//  UIImage+H568.m
//
//  Created by Angel Garcia on 9/28/12.
//  http://angelolloqui.com/blog/20-iPhone5-568h-image-loading
//

#import &amp;quot;UIImage+H568.h&amp;quot;
#import &amp;lt;objc/runtime.h&amp;gt;

@implementation UIImage (H568)


+ (void)load {
    if  ((UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) &amp;amp;&amp;amp;
        ([UIScreen mainScreen].bounds.size.height &amp;gt; 480.0f)) {
        
        //Exchange XIB loading implementation
        Method m1 = class_getInstanceMethod(NSClassFromString(@&amp;quot;UIImageNibPlaceholder&amp;quot;), @selector(initWithCoder:));
		Method m2 = class_getInstanceMethod(self, @selector(initWithCoderH568:));
		method_exchangeImplementations(m1, m2);
        
        //Exchange imageNamed: implementation
        method_exchangeImplementations(class_getClassMethod(self, @selector(imageNamed:)),
                                       class_getClassMethod(self, @selector(imageNamedH568:)));
    }
}

+ (UIImage *)imageNamedH568:(NSString *)imageName {
    return [UIImage imageNamedH568:[self renameImageNameForH568:imageName]];
}

- (id)initWithCoderH568:(NSCoder *)aDecoder {
	NSString *resourceName = [aDecoder decodeObjectForKey:@&amp;quot;UIResourceName&amp;quot;];
    NSString *resourceH568 = [UIImage renameImageNameForH568:resourceName];
    
    //If no 568h version, load as default
    if ([resourceName isEqualToString:resourceH568]) {
        return [self initWithCoderH568:aDecoder];
    }
    //If 568h exists, load with [UIImage imageNamed:]
    else {
        return [UIImage imageNamedH568:resourceH568];
    }    
}

+ (NSString *)renameImageNameForH568:(NSString *)imageName {
    
    NSMutableString *imageNameMutable = [imageName mutableCopy];
    
    //Delete png extension
    NSRange extension = [imageName rangeOfString:@&amp;quot;.png&amp;quot; options:NSBackwardsSearch | NSAnchoredSearch];
    if (extension.location != NSNotFound) {
        [imageNameMutable deleteCharactersInRange:extension];
    }
    
    //Look for @2x to introduce -568h string
    NSRange retinaAtSymbol = [imageName rangeOfString:@&amp;quot;@2x&amp;quot;];
    if (retinaAtSymbol.location != NSNotFound) {
        [imageNameMutable insertString:@&amp;quot;-568h&amp;quot; atIndex:retinaAtSymbol.location];
    } else {
        [imageNameMutable appendString:@&amp;quot;-568h@2x&amp;quot;];
    }
    
    //Check if the image exists and load the new 568 if so or the original name if not
    NSString *imagePath = [[NSBundle mainBundle] pathForResource:imageNameMutable ofType:@&amp;quot;png&amp;quot;];
    if (imagePath) {
        //Remove the @2x to load with the correct scale 2.0
        [imageNameMutable replaceOccurrencesOfString:@&amp;quot;@2x&amp;quot; withString:@&amp;quot;&amp;quot; options:NSBackwardsSearch range:NSMakeRange(0, [imageNameMutable length])];
        return imageNameMutable;
    } else {
        return imageName;
    }
}

@end
&lt;/code&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	All you need to do is import the code into your project. It will automatically load the swizzled methods in iPhone5 and will look for an image named &lt;tt&gt;xxx-568h@2x.png&lt;/tt&gt; before loading the standard retina image. If none is found, then it falls back to the standard loading mechanism. No changes in your code required.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Known issues&lt;/h4&gt;
&lt;div&gt;
	&lt;strike&gt;Despite the problems resolved, there is still one main issue that I do not know how to solve:&lt;/strike&gt;
	&lt;ul&gt;
		&lt;li&gt;
			&lt;strike&gt;&lt;strong&gt;Interface Builder loaded images&lt;/strong&gt;. They do not use &lt;tt&gt;imageNamed&lt;/tt&gt; or &lt;tt&gt;initWithContentsOfFile&lt;/tt&gt; methods for loading images. If anyone knowns the method that IB &amp;nbsp;calls&amp;nbsp;I will be happy to build a similar solution for IB loaded images. I have played a lot with this issue&amp;nbsp;for my &lt;a href="https://github.com/angelolloqui/AGImageChecker"&gt;AGImageChecker&lt;/a&gt; library and I finally managed to solve it by replacing the image when the &lt;tt&gt;UIImageView&lt;/tt&gt; is loaded, but it is too&amp;nbsp;complicated for something that should be simplier.&lt;/strike&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
&lt;div&gt;
	&lt;strike&gt;Besides the known issues, note that this trick only applies to images loaded with &lt;tt&gt;imageNamed&lt;/tt&gt; method.&amp;nbsp;&lt;/strike&gt;&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Update (25 of July 2013)&lt;/h4&gt;
&lt;div&gt;
	Last updated version of the code now includes support for automatic XIB file -568h image loading. Thanks to &lt;a href="http://alexzak.me"&gt;Alex Zak &lt;/a&gt;for pointing out a solution and to&amp;nbsp;&lt;a href="https://github.com/mrdepth"&gt;Artem Shimanski&lt;/a&gt; for creating the trick for XIB files for his own utility.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;h4&gt;
		Update (5 of May 2014)&lt;/h4&gt;
&lt;/div&gt;
&lt;p&gt;
	Some people have asked me about the license. This piece of code is so small that it makes no sense to me to add any license. No need to request permission, name me or anything else. Just remember I am not responsible of any issue or malfuntion it might create, so use it under your own risk.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/19</id>
    <published>2012-09-14T10:08:24Z</published>
    <updated>2012-10-11T13:25:35Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/19-Oddities-working-with-images-in-iOS"/>
    <title>Oddities working with images in iOS</title>
    <content type="html">&lt;div&gt;
	For the last 10 days I have been working in a &lt;a href="https://github.com/angelolloqui/AGImageChecker"&gt;new library to check iOS images&lt;/a&gt;&amp;nbsp;on runtime. I will make another post to explain it in a future, but today I wanted to remark some oddities that I found when working so tightly with the UIImageView class (it is funny that I haven&amp;rsquo;t realized on most these oddities after almost 3 years working with them)&lt;/div&gt;
&lt;h4&gt;
	UIImageView&lt;/h4&gt;
&lt;div&gt;
	UIImageView, as any other view in iOS, extends UIView. This characteristic would make everyone think that UIImageView have all the functionality and behave as any other view. However, there are some interesting considerations when working with this component:&lt;/div&gt;
&lt;!--more--&gt;
&lt;h5&gt;
	drawRect is not called&lt;/h5&gt;
&lt;p&gt;
	One interesting point contained in the &lt;a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIImageView_Class/Reference/Reference.html"&gt;official documentation&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;
	&lt;tt&gt;The UIImageView class is optimized to draw its images to the display. UIImageView will not call drawRect: a subclass. If your subclass needs custom drawing code, it is recommended you use UIView as the base class.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;
	This is pretty strange, but it also means that you can not override or swizzle the drawRect to perform your custom drawing in UIImageViews because it will never be invoked.&amp;nbsp;&lt;/p&gt;
&lt;h5&gt;
	userInteractionEnabled&lt;/h5&gt;
&lt;p&gt;
	This field is used to configure whether the view should receive interaction and it is defined in UIView as a boolean with a default value of YES. However, in UIImageView, the default value is set to NO, which means that by default images will not receive interaction such as touches. This is important for example if you plan to add a gesture to an image or subclass it. You need to remember to set this property to YES or play with the parent view instead.&lt;/p&gt;
&lt;h5&gt;
	contentModeCenter&lt;/h5&gt;
&lt;p&gt;
	UIImageView allows many different content modes to set the image within it. One of them is UIViewContentModeCenter, which allows you to place the image in the exact center of the view (vertically and horizontally) as expected. Which might be not expected is that this exact center can be a floating point number. This may cause blurry images, as aligning a view/image in a .5 position causes the antialias to run. For example, if you have a view of 15x15 and an image of 10x10, setting the mode center will position the image in (2.5, 2.5), rendering it blurry (on non-retina devices). This is especially important when dealing with external images, as it is common to receive different image sizes.&amp;nbsp;&lt;/p&gt;
&lt;h4&gt;
	Interface Builder&lt;/h4&gt;
&lt;div&gt;
	Besides the oddities related to the UIImageView class, Interface Builder also adds some interesting behaviour when working with them.&lt;/div&gt;
&lt;h5&gt;
	accessibilityLabel&lt;/h5&gt;
&lt;p&gt;
	When you add an UIImageView in a IB file and set an image in it, &lt;strike&gt;IB will automatically set its accessibilityLabel property to the imageName&lt;/strike&gt;. This is indeed very useful, as this property helps improving accessibility and may be useful to debug it later, but remember that this will only work if you set the image from IB. You still need to do it manually when setting images programmatically.&lt;/p&gt;
&lt;p&gt;
	&lt;span style="font-family:tahoma,geneva,sans-serif;"&gt;&lt;strong&gt;EDIT&lt;/strong&gt;: This is indeed false. To accomplish such a functionality you need to activate your accesibility. Check out an example here:&amp;nbsp;&lt;a href="https://gist.github.com/3872250"&gt;https://gist.github.com/3872250&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h5&gt;
	Missing image&lt;/h5&gt;
&lt;p&gt;
	Have you ever seen a log message like this?&lt;/p&gt;
&lt;p&gt;
	&lt;tt&gt;Could not load the &amp;quot;MissingImageName&amp;quot; image referenced from a nib in the bundle with identifier &amp;quot;your.bundle.id&amp;quot;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;
	It is the default message that is logged when you try to load an image from an IB file that doesn&amp;rsquo;t exists. The message itself is useful, but there are some derived consequences not so pleasant if you dig into it.&lt;/p&gt;
&lt;p&gt;
	First of all, apart from displaying such a message, IB also adds a transparent image to your imageview. WTF?! Yes! that is right. Not only it doesn&amp;rsquo;t set the image to nil, but also it adds a non-empty (but transparent) 1x1px image to it! This is of course a tremendous pain if you need to somehow check whether all images are loaded. I still can not understand the reason for making a 1x1 image instead of nullifying it or setting it at least with a 0px image, but it is how it is. If you want to make such a check, then you will have to find if the 1x1 image is totally transparent, and then assume that it comes from the IB. I haven&amp;rsquo;t found any other property so far that can be used to detect missing images loaded from IB. Please, tell me if you know any other way.&lt;/p&gt;
&lt;p&gt;
	Secondly, the presence of such a message could make you think that it will also be displayed when trying to load a missing image programmatically, but this will not happen. Only IB images show it and behave as explained above. Keep that in mind.&lt;/p&gt;
&lt;h4&gt;
	Others&lt;/h4&gt;
&lt;h5&gt;
	UIButtons use UIImageView&lt;/h5&gt;
&lt;p&gt;
	When you set an image or background in a UIButton, the internals of this class uses UIImageView to display it. It may not surprise you, but I was expecting UIButtons and other similar components to render the images directly by using draw primitives, but they don&amp;rsquo;t. They use a composite pattern, at least on iOS5 (we&amp;rsquo;ll see if something changes in future iOS versions).&lt;/p&gt;
&lt;p&gt;
	This is actually not really interesting for most developers, but it is a blessing for my library that by swizzling UIImageView methods work also in buttons.&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/18</id>
    <published>2012-08-15T17:55:50Z</published>
    <updated>2012-08-15T18:09:04Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/18-Restkit-addition-Cache-Control"/>
    <title>Restkit addition: Cache-Control</title>
    <content type="html">&lt;div&gt;
	Today I am not going to explain anything new but to add a small patch to &lt;a href="http://restkit.org/"&gt;RestKit&lt;/a&gt;. If you still haven&amp;rsquo;t worked with RestKit before give it a try. It is a very useful library to manage connection to external APIs.&lt;/div&gt;
&lt;div&gt;
	RestKit, between many other things, have a feature to set the cache policy that you want to use when interacting with the external WebServices. However, if you take a look to the defined policies, you may see (if nothing has changed since I wrote this post) that none of them give you the option to read the &amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo; header of the HTTP response. And that is exactly what I have added in my pull request &lt;a href="https://github.com/RestKit/RestKit/pull/888"&gt;https://github.com/RestKit/RestKit/pull/888&lt;/a&gt;. Nevertheless, the pull request has not been merged yet, so here you have a temporary solution:&lt;/div&gt;
&lt;div&gt;
	&lt;a href="https://gist.github.com/3360769"&gt;https://gist.github.com/3360769&lt;/a&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	Installation&lt;/h4&gt;
&lt;div&gt;
	The code above uses &lt;a href="http://angelolloqui.com/blog/15-Method-Swizzling"&gt;MethodSwizzling&lt;/a&gt; to add the specific&amp;nbsp;&amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo;&amp;nbsp;behaviour on runtime, which makes it completely transparent for the developer. You don&amp;rsquo;t need to change your code, just import the two files in your project and you are done! the swizzling will do the rest. It will also work even if you are using subclasses of RKRequest.&lt;/div&gt;
&lt;h4&gt;
	Use&lt;/h4&gt;
&lt;div&gt;
	Whenever you want a request to use the new&amp;nbsp;&amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo;&amp;nbsp;policy, just add the import to the &lt;tt&gt;RKRequest+CacheControl.h&lt;/tt&gt; file and use it as any other standard policy. Example:
	&lt;pre&gt;
&lt;code&gt;RKObjectManager *manager = [RKObjectManager sharedManager];
manager.client.cachePolicy = RKRequestCachePolicyControlMaxAge;&lt;/code&gt;
&lt;/pre&gt;
	Or even add the cache policy to the default like this:
	&lt;pre&gt;
&lt;code&gt;manager.client.cachePolicy = RKRequestCachePolicyDefault | RKRequestCachePolicyControlMaxAge;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4&gt;
	What about the&amp;nbsp;&lt;span style="font-family: monospace; "&gt;&amp;quot;Expires&amp;quot;&lt;/span&gt;&amp;nbsp;header?&lt;/h4&gt;
&lt;div&gt;
	The &lt;tt&gt;&amp;quot;Expires&amp;quot;&lt;/tt&gt; header is an alternative way to control caching from the server side, but it is older and it lacks of the simplicity of the&amp;nbsp;&amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo;&amp;nbsp;header. With&amp;nbsp;&lt;span style="font-family: monospace; "&gt;&amp;quot;Expires&amp;quot;&lt;/span&gt;, the code should convert the retrieved timestamp into a valid date, and adjust it based on the time difference between the date registered on the device and the one sent by the server (devices could have incorrect dates). Besides,&amp;nbsp;&amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo;&amp;nbsp;has priority over&amp;nbsp;&lt;span style="font-family: monospace; "&gt;&amp;quot;Expires&amp;quot;&lt;/span&gt;, so it will only work if no&amp;nbsp;&amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo;&amp;nbsp;is found.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	For all that, I don&amp;rsquo;t find&amp;nbsp;&lt;span style="font-family: monospace; "&gt;&amp;quot;Expires&amp;quot;&lt;/span&gt;&amp;nbsp;worth enough to spend time on it, but it could also be done. If you plan to add support for it&amp;nbsp;to my current implementation of&amp;nbsp;&amp;ldquo;&lt;tt&gt;Cache-Control&lt;/tt&gt;&amp;rdquo; please contact me. I could help you and post the resulting code here for everyone.&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/17</id>
    <published>2012-07-05T18:51:29Z</published>
    <updated>2012-07-06T11:36:11Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/17-CocoaPods-a-great-tool-for-library-dependency-management"/>
    <title>CocoaPods: a great tool for library dependency management</title>
    <content type="html">&lt;div&gt;
	Have you ever needed to use a third party library which needs other third party libraries and wondered why the hell they are so complicated to integrate within your iOS project? well, if that is your case then you will like this post and you will love &lt;a href="http://cocoapods.org/"&gt;CocoaPods&lt;/a&gt;.&lt;/div&gt;
&lt;div&gt;
	But first, let me tell you that before writting this article I have worked with it for a couple of months in real projects. Thus, it is long enough to write some experiences that I had with it, but let&amp;rsquo;s start from the beginning.&lt;/div&gt;
&lt;h4&gt;
	What is CocoaPods?&lt;/h4&gt;
&lt;div&gt;
	CocoaPods is a tool written in Ruby that allows you to &lt;strong&gt;manage library dependencies in Objective-C&lt;/strong&gt; projects. It is very simple to use, specially if you are used to Ruby Gems. The only thing you have to do is install it in your machine and then create a file called &lt;strong&gt;Podfile&lt;/strong&gt; in your project, which will contain a list with the project dependencies to other libraries. For example:&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;dependency &amp;#39;DCIntrospect&amp;#39;
dependency &amp;#39;MGSplitViewController&amp;#39;
dependency &amp;#39;TouchXML&amp;#39;
dependency &amp;#39;Reachability&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	After that, all you need to do is to run &lt;tt&gt;&amp;ldquo;pod install&lt;/tt&gt;&amp;rdquo; (or &amp;ldquo;&lt;tt&gt;pod setup&lt;/tt&gt;&amp;rdquo; if it is the first time).&lt;/div&gt;
&lt;div&gt;
	CocoaPods will download the code associated to all the libraries into a Pods directory, and even the dependencies that these libraries could have with third party ones or Apple frameworks. All sources will be included and built in a new project called Pods, which will be imported in a workspace together with your project. Whenever you build your project, CocaPods will be built first and included as a static library to your project code.&lt;/div&gt;
&lt;div&gt;
	Another important thing to know before continue reading this post is that the tool is just a bunch of installing routines, but the libraries are declared in simple txt files called &lt;strong&gt;specs&lt;/strong&gt; where you define things such us the url, version number, other dependencies,... The specs are (almost) publicly available for editing.&lt;/div&gt;
&lt;h4&gt;
	Why to use it?&lt;/h4&gt;
&lt;div&gt;
	There are many reasons why you should try to keep your code dependencies as clean as possible: code maintainability, avoid conflicts with other team members or between libraries, save time,...&lt;/div&gt;
&lt;div&gt;
	CocoaPods almost solves all of them, and does it with a &lt;strong&gt;very little effort &lt;/strong&gt;from the developers, which is great! &amp;nbsp;With CocoaPods you will waste almost no time configuring frameworks and everything should work without problems! It is such a step forward in dependency management that you should at least give it a try.&lt;/div&gt;
&lt;h4&gt;
	Issues&lt;/h4&gt;
&lt;div&gt;
	However, not everything is as good as it seems. There are also some problems and concerns that you should keep in mind when using this library:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;Maturity&lt;/strong&gt;: The project is at this moment (July 2012) very new, but it is been built in such a fast way that it is almost impossible to keep the pace. Among the obvious problems related to immature software, one of the most annoying ones when working with CocoaPods is that you may find &lt;strong&gt;specs using new features&lt;/strong&gt; that are not implemented in your installed version. This will give you more than a headache because it will crash your &amp;ldquo;&lt;tt&gt;pod install&lt;/tt&gt;&amp;rdquo; command and will force you to update, which in fact may introduce new problems. This &lt;strong&gt;will&amp;nbsp;eventually be solved&lt;/strong&gt;, but right now it is a serious concern if you have a working project.&lt;br /&gt;
		&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Quality of libraries&lt;/strong&gt;: Everyone can create a new spec for his library in CocoaPods, which is great, but it also introduces a lot of uncertainty and bugs. Right now there are at least 300 libraries (and increasing every day); many of them with more than one version, and &lt;strong&gt;some with bugs or other issues&lt;/strong&gt;. This problem is not directly caused by CocoaPods (it is a problem of the libraries themselves), but CocoaPods makes it more dangerous. Why? well, because it is so easy to install libraries, it is also easy to add the unstable ones. Besides, CocoaPods hides the version of the library that you use and their dependencies, and you may find yourself using something that you did not want to use, &lt;strong&gt;or an older or newer version than expected&lt;/strong&gt;. For example, just by installing RestKit you will find other 5 or 6 dependent libraries installed, which are supposed to work properly, but make you lose some control of your project.&lt;br /&gt;
		&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Autoupdate&lt;/strong&gt;: Whenever you run &amp;ldquo;&lt;tt&gt;pod install&lt;/tt&gt;&amp;rdquo; the tool &lt;strong&gt;recreates the Pod project&lt;/strong&gt; and downloads any &lt;strong&gt;updates related to your libraries&lt;/strong&gt;. In a perfect world this would be a bless! you could be updated at any time just by running one command! However, we do not live in such a perfect world, but in one where the libraries often &lt;strong&gt;drop backward compatibility&lt;/strong&gt; when upgrading or where things that are compatible do not work in the same way from one version to the next one! And believe me, people will update the specs of your libraries to new versions! This problem could mean your complete failure if you don&amp;rsquo;t have a perfect unit testing (with in practice is impossible) or you do not &lt;strong&gt;expend time checking&lt;/strong&gt; that everything works as it is supposed to work, not only in one platform but in all of them (any combination between device and iOS) whenever you run your updates. So, what can we do? well, there are &lt;strong&gt;many solutions&lt;/strong&gt; for this problem, but you definitely have to think of something that works in your case. For example, you could add the Pods directory to your CMS to at least be aware when new changes come and test them thoroughly; you could create your own specs repository to control when a new library or upgrade should be included (explained later); or you could just prevent your developers from running the &amp;ldquo;pod install&amp;rdquo; command somehow! Choose whatever suits best for you, but do something or you will find lots of unexpected problems and crashes!&lt;br /&gt;
		&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Code tracking&lt;/strong&gt;: Linked to the previous problem, if you do not keep the status of your Pods in your CMS you may face a problem when trying to recompile an old version of an app. You should always&lt;strong&gt; keep a copy of all your project files&lt;/strong&gt; (in the exact state that they were) when you build a release version, or otherwise you could be unable to reproduce a bug if something goes wrong later. Once again, there are many solutions, which are similar to the ones exposed in the previous paragraph, but it is something else you have in mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
	A different approach&lt;/h4&gt;
&lt;div&gt;
	After facing many problems related to the issues explained before, in &lt;a href="http://xaton.com/"&gt;Xaton&lt;/a&gt;&amp;nbsp;&lt;strong&gt;we are taking a different approach&lt;/strong&gt; to CocoaPods. We think that the tool is very useful, but we also think that it &lt;strong&gt;fails often just due to incorrect specs&lt;/strong&gt;. So, what can we do with it? well, CocoaPods is the tool, but the specs live in a Git repository which can be forked and edited as you want. Therefore, what we are doing is &lt;strong&gt;creating a completely new specs repository&lt;/strong&gt;, including only libraries that we know that are working fine. With this approach we can have full control of the libraries included in our projects, and we can &lt;strong&gt;guarantee that everything works&lt;/strong&gt; just by having a proper control on the specs. Moreover, we can also &lt;strong&gt;add our internal libraries&lt;/strong&gt; to the specs to be installed as any other public spec.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	This way we hope to get the best out of CocoaPods; we expect very easy and fast library integration, with conflict resolving mechanisms and with our internal libraries.&lt;/div&gt;
&lt;div&gt;
	As you may see, I am talking in future because we are right in the middle of the switch, but I am really excited with this new idea because I think it will solve almost all of the issues we have found so far. I&amp;rsquo;ll keep you updated with any interesting experiences in future posts.&lt;/div&gt;
&lt;h4&gt;
	Conclusion&lt;/h4&gt;
&lt;div&gt;
	CocoaPods is not perfect, but it really &lt;strong&gt;helps with a problem that is very hard to solve&lt;/strong&gt;. The &lt;strong&gt;community&lt;/strong&gt; (which I have the pleasure to be part of) &lt;strong&gt;is awesome&lt;/strong&gt; and extremely active. If you use it you may find problems at first, but I am sure that in a very short time it will be one of the &amp;ldquo;must have&amp;rdquo; tools for any iOS developer.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;strong&gt;My suggestion&lt;/strong&gt;: give it a try with a new project which is non critical from a business point of view, and you will see how things get integrated nicely. Specially, use it if you are planning a POC or a quick project. Then, I am sure that you will want to use it in almost every project, but just remind all the things explained in the previous paragraphs or you could face very disgusting problems later. Use it wisely and help improving the quality and popularity of this amazing tool!&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h3 style="color:blue;"&gt;
	&lt;span style="color:#99ccff;"&gt;Edit: Eloy Dur&amp;aacute;n (@alloy) has replied to the post at:&amp;nbsp;&lt;/span&gt;&lt;a href="https://gist.github.com/3059399"&gt;&lt;span style="color:#99ccff;"&gt;https://gist.github.com/3059399&lt;/span&gt;&lt;/a&gt;&lt;span style="color:#99ccff;"&gt;. Thanks Elloy for your time and for creating this awesome tool. Please, check out his comments.&lt;/span&gt;&lt;/h3&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/16</id>
    <published>2012-06-02T08:25:40Z</published>
    <updated>2012-08-31T13:48:33Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/16-Advance-debugging-in-XCode"/>
    <title>Advance debugging in XCode</title>
    <content type="html">&lt;div&gt;
	Today I am going to talk about &lt;strong&gt;advanced debugging techniques in XCode&lt;/strong&gt;. I am not going to spend much time on explaining the different options that you can find in the IDE, how to set breakpoints, or stuff like that. You can find basic techniques in many resources on the Internet.&lt;/div&gt;
&lt;div&gt;
	But before starting, I want to remark two things:&lt;/div&gt;
&lt;ul&gt;
	&lt;li&gt;
		This is a real example, where the standard breakpoints and console outputs are not enough to detect where the bug is. I haven&amp;rsquo;t&amp;nbsp;activated the Exception Breakpoint because this option sometimes&amp;nbsp;destroys the only information we have of the stack trace. My suggestion is to give it a try, but if you can not find your bug with it then disable it and continue reading this post. You will find a different way of debuging and you need as much information as possible.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/4/content_exception.png?1338569085" style="width: 267px; height: 97px; " /&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		There are many debugging techniques. Do not blame me if I am doing something in a way slightly more difficult or different to &amp;ldquo;your way&amp;rdquo;. It is not a guide of how to do it right, but how to get the information we need in some easy steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
	So, having said that, let&amp;#39;s start!&lt;/div&gt;
&lt;!--more--&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	1. Reproducing the bug and first inspection&lt;/h4&gt;
&lt;div&gt;
	First thing to do when debugging is &lt;strong&gt;being able to reproduce the bug and inspect the error&lt;/strong&gt;. In this case, this is what I get when running my app.&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/5/content_1.png?1338569131" style="width: 720px; height: 448px; " /&gt;&lt;/div&gt;
&lt;div style="text-align: right; "&gt;
	&lt;cite&gt;Screenshot 1&lt;/cite&gt;&lt;/div&gt;
&lt;div&gt;
	As you can see, there is not much information, but some ideas:&lt;/div&gt;
&lt;ol style=""&gt;
	&lt;li&gt;
		The console shows that the problem is caused because we are calling the method &amp;ldquo;&lt;tt&gt;allKeys&lt;/tt&gt;&amp;rdquo; on a &lt;tt&gt;NSArray&lt;/tt&gt;, which is not part of it. Sometimes the method name is rare enough to look for it on the source code and find where the bug is, but not in this case because it is too generic.&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		The trace on the left panel doesn&amp;rsquo;t show the line of code where the error occurred. There are many causes for it, but it is very common when you work with blocks and asynchronous tasks. This is not going to help us much.&amp;nbsp;&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	At this point, we need to dig inside the previous information if we want a hint about the bug. Let&amp;#39;s first take a look to the object which produced the error to see if we can guess where it comes from. Just type &amp;ldquo;&lt;tt&gt;&lt;strong&gt;po objectName/address&lt;/strong&gt;&lt;/tt&gt;&amp;rdquo; on the console:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
(lldb) po 0x5746290
(int) $0 = 91513488 &amp;lt;__NSArrayM 0x5746290&amp;gt;(

)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	No luck! an empty array!&lt;/div&gt;
&lt;div&gt;
	And what about the backtrace? let&amp;#39;s take a look at it by typing &amp;ldquo;&lt;tt&gt;&lt;strong&gt;bt&lt;/strong&gt;&lt;/tt&gt;&amp;rdquo;&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
(lldb) bt
* thread #1: tid = 0x1c03, 0x36f6032c libsystem_kernel.dylib`__pthread_kill + 8, stop reason = signal SIGABRT
    frame #0: 0x36f6032c libsystem_kernel.dylib`__pthread_kill + 8
    frame #1: 0x330c620e libsystem_c.dylib`pthread_kill + 54
    frame #2: 0x330bf29e libsystem_c.dylib`abort + 94
    frame #3: 0x307b7f6a libc++abi.dylib`abort_message + 46
    frame #4: 0x307b534c libc++abi.dylib`_ZL17default_terminatev + 24
    frame #5: 0x327b6356 libobjc.A.dylib`_objc_terminate + 146
    frame #6: 0x307b53c4 libc++abi.dylib`_ZL19safe_handler_callerPFvvE + 76
    frame #7: 0x307b5450 libc++abi.dylib`std::terminate() + 20
    frame #8: 0x307b6824 libc++abi.dylib`__cxa_rethrow + 88
    frame #9: 0x327b62a8 libobjc.A.dylib`objc_exception_rethrow + 12
    frame #10: 0x33c1a50c CoreFoundation`CFRunLoopRunSpecific + 404
    frame #11: 0x33c1a36c CoreFoundation`CFRunLoopRunInMode + 104
    frame #12: 0x33198438 GraphicsServices`GSEventRunModal + 136
    frame #13: 0x3590fe7c UIKit`UIApplicationMain + 1080
    frame #14: 0x00136f4e XXXX`main + 70 at main.m:14
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	No luck either! The information dumped is the same that the one shown on the left sidebar. Nothing interesting rather than system calls!&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	2. Disassembling the code&lt;/h4&gt;
&lt;div&gt;
	By following the previous steps you usually get enough information to find the bug. However, in this case it is not enough. So, what&amp;rsquo;s next? Up to this point, we have to go deeper in our search. What we want to find is the line of code that produced the exception, and even if we don&amp;rsquo;t know it yet, it is right there, in front of our eyes. Take a look again to the error printed on the console (&lt;cite&gt;Screenshot 1&lt;/cite&gt;):&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/6/content_exception2.png?1338569389" style="width: 531px; height: 52px; " /&gt;&lt;/div&gt;
&lt;div&gt;
	As you can see, the first 5 numbers are similar, all of them in the range of 0x32-0x33. Then, the following 3 numbers are in a different range (0x1d), and after that again the first range of 0x32-0x33 until the last 3 numbers which seem different.&lt;/div&gt;
&lt;div&gt;
	What is all this? well, they may seem random numbers, but they are not. In fact, all of them are &lt;strong&gt;references to code lines &lt;/strong&gt;in the binary, a trace of our execution stack.&lt;br /&gt;
	The first group of numbers are references to the iOS frameworks, the second group of them to our source-code, the third one back again to the iOS, and so on.&lt;/div&gt;
&lt;div&gt;
	So, ok, we have the line references. If we assume that the iOS frameworks have no bugs, the &lt;strong&gt;last executed line in our code&lt;/strong&gt; is the &lt;strong&gt;0x1dc345&lt;/strong&gt;. It seems a good starting point to check out, but how?&lt;/div&gt;
&lt;div&gt;
	Well, in GDB we had an amazing &amp;ldquo;&lt;tt&gt;&lt;strong&gt;info&lt;/strong&gt;&lt;/tt&gt;&amp;rdquo; command that gave us the source file and line number in our code, but &amp;nbsp;it is not longer available in LLVM. If we inspect the LLVM help, we can find another command that looks very similar to what we are looking for: &amp;ldquo;&lt;strong&gt;&lt;tt&gt;source info&lt;/tt&gt;&lt;/strong&gt;&amp;rdquo;.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Unfortunately, by running this command in the current version of XCode (4.3.2) we get this annoying message:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
(lldb) source info 0x1dc345
error: Not yet implemented
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	WTF!!! But wait, there is another command. It is called &amp;ldquo;&lt;tt&gt;&lt;strong&gt;disassemble&lt;/strong&gt;&lt;/tt&gt;&amp;rdquo; and might also help us! Let&amp;#39;s run it:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
(lldb) di -s 0x1dc345
XXXX`-[FacebookActivityManager synchronizeActions:ofType:] + 305 at FacebookActivityManager.m:210:
   0x1dc345:  ldrb   r1, [r1, #5]
   0x1dc347:  lsrs   r4, r0, #5
   0x1dc349:  lsls   r0, r5, #9
   0x1dc34b:  ldr    r2, [sp, #964]
   0x1dc34d:  subs   r4, r5, #3
   0x1dc34f:  ldm    r0, {r0, r3, r4, r7}
   0x1dc351:  movs   r0, #97
   0x1dc353:  lsls   r0, r3
   0x1dc355:  lsrs   r0, r5, #29
   0x1dc357:  asrs   r2, r3, #6
   0x1dc359:  lsrs   r0, r5, #17
   0x1dc35b:  lsls   r2, r3, #10
   0x1dc35d:  str    r0, [sp, #964]
   0x1dc35f:  subs   r4, r5, #3
   0x1dc361:  ldm    r2!, {r0, r3, r4, r7}
   0x1dc363:  lsrs   r1, r5, #29
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	This is exactly what we wanted! Ignoring the dumped assembler code, we have a &lt;strong&gt;reference to a source line in our code&lt;/strong&gt;! &amp;ldquo;&lt;tt&gt;FacebookActivityManager.m:210&lt;/tt&gt;&amp;rdquo;&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/7/content_4.png?1338569482" style="width: 720px; height: 449px; " /&gt;&lt;/div&gt;
&lt;div&gt;
	We check out the indicated line, and it actually makes an &amp;quot;&lt;tt&gt;allKeys&lt;/tt&gt;&amp;quot; operation with something that comes from Facebook and has not been validated! this is clearly the problem!&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Isn&amp;rsquo;t that amazing??? let&amp;#39;s continue!!&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	3. Fixing the bug&lt;/h4&gt;
&lt;div&gt;
	OK, we have the problem detected, so we could actually just place an if-statement to check that the data object is a &lt;tt&gt;NSDictionary&lt;/tt&gt; and protect it from crashing. That&amp;rsquo;s all, right? wrong!&lt;/div&gt;
&lt;div&gt;
	There is still something strange about it. In this snippet of code we expect Facebook to reply always with an &lt;tt&gt;NSDictionary&lt;/tt&gt; in our app, so we should try to see why sometimes gives a different data structure. &lt;strong&gt;It could be related to another bug&lt;/strong&gt; in our code which sends incorrect data to Facebook.&lt;/div&gt;
&lt;div&gt;
	So, what can we do now?&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Well, the first idea is setting a breakpoint in it and inspect the data. However, we have hundreds of &amp;ldquo;actions&amp;rdquo; in our example, and just a few of them (maybe one) fails. It could take forever to find it!&lt;/div&gt;
&lt;div&gt;
	The second idea is putting the if-statement and place a breakpoint in it to check only the incorrect ones. Even if it is perfectly fine for this example, it requires modifying the code, which sometimes could mean changing how is produced. We should always &lt;strong&gt;try to change as little as possible&lt;/strong&gt; when debugging, including NSLogs, variables, conditions,...&lt;/div&gt;
&lt;div&gt;
	So, I am going to do it with a breakpoint, like the first idea, but with a special &lt;strong&gt;stop condition&lt;/strong&gt; that will only be true when the data is incorrect. This approach will do the trick &lt;strong&gt;without modifying any code&lt;/strong&gt; and will give as the &lt;strong&gt;possibility to change the conditions on runtime&lt;/strong&gt; if needed. This is possible in XCode by editing the breakpoint as follows:&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/8/content_5.png?1338569651" style="width: 720px; height: 452px; " /&gt;&lt;/div&gt;
&lt;div&gt;
	where the stop condition in our case is:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
!((BOOL)[[actionDict objectForKey:@&amp;quot;data&amp;quot;] respondsToSelector:@selector(allKeys)])&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	This will tell the debugger to stop only when the condition is true, and therefore when our data is invalid.&lt;/div&gt;
&lt;div&gt;
	By the way, we are not going to use them in this example, but some of the breakpoint options are really worthy to take a look at. Especially, the combination between the &amp;ldquo;action&amp;rdquo; and the &amp;ldquo;automatically continue&amp;rdquo; checkbox can help us a lot when debugging complicated code. You should take a look to them if they are new for you (when you finish with this post of course hehehe).&lt;/div&gt;
&lt;div&gt;
	We run it again and we get the following information from the actionDict:&lt;/div&gt;
&lt;div&gt;
	&lt;pre&gt;
(lldb) po actionDict
(NSDictionary *) $82 = 0x05be73d0 {
    application =     {
        id = 00000000000001;
        name = xxxxxx;
    };
    comments =     {
        count = 0;
    };
    data =     (
    );
    &amp;quot;end_time&amp;quot; = &amp;quot;2012-04-03T09:16:17+0000&amp;quot;;
    from =     {
        id = 100003278335919;
        name = &amp;quot;Tester Xaton&amp;quot;;
    };
    id = 184349868350956;
    likes =     {
        count = 0;
    };
    &amp;quot;publish_time&amp;quot; = &amp;quot;2012-04-03T09:16:17+0000&amp;quot;;
    &amp;quot;start_time&amp;quot; = &amp;quot;2012-04-03T09:16:17+0000&amp;quot;;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;
	Well, I am pretty sure that this will not say a lot to you with the information exposed in this post about the app, but in fact I can assure you that thanks to this trace (and a couple more) I actually found another bug within the Facebook integration, the one that caused the incorrect data to be sent. It is a different topic that involves server side, so I am not going to continue there, but I wanted to point out the importance of debugging the problems until you find the root cause, not just fixing it in your breaking line. If we had stopped when fixing the problem and not continued investigating why the empty data was there, I would not have found the real bug until later, when it would have been more difficult to solve without a doubt. Always continue until the real root cause!!&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	4. The code fixed&lt;/h4&gt;
&lt;div&gt;
	&lt;pre&gt;
&lt;code&gt;    FacebookUsersManager *usersManager = [[FacebookManager mainFacebookManager] usersManager];     
    for (NSDictionary *actionDict in actionsArray) {
        if (([[actionDict objectForKey:@&amp;quot;data&amp;quot;] isKindOfClass:[NSDictionary class]]) &amp;amp;&amp;amp; 
            ([[actionDict objectForKey:@&amp;quot;from&amp;quot;] isKindOfClass:[NSDictionary class]])){
            
            NSString *userId = [[actionDict objectForKey:@&amp;quot;from&amp;quot;] objectForKey:@&amp;quot;id&amp;quot;];
            NSString *actionId = [actionDict stringForKey:@&amp;quot;id&amp;quot;];
            NSString *objectType = [[[actionDict objectForKey:@&amp;quot;data&amp;quot;] allKeys] lastObject];
            NSString *objectId = [[[actionDict objectForKey:@&amp;quot;data&amp;quot;] objectForKey:objectType] stringForKey:@&amp;quot;id&amp;quot;];
            NSString *objectUrl = [[[actionDict objectForKey:@&amp;quot;data&amp;quot;] objectForKey:objectType] stringForKey:@&amp;quot;url&amp;quot;];
            NSString *startTimeStr = [actionDict stringForKey:@&amp;quot;start_time&amp;quot;];
            NSString *endTimeStr = [actionDict stringForKey:@&amp;quot;end_time&amp;quot;];
            
            FacebookUser *user = [usersManager userWithId:userId];                
            if (user) {        
                FacebookAction *action = [self actionWithId:actionId];   
                if (!action) {
                    action = [NSEntityDescription insertNewObjectForEntityForName:kFacebookActionEntity
                                                           inManagedObjectContext:self.managedObjectContext];
                    action.fbID = actionId;            
                }   
                action.user = user;
                action.type = type;
                action.startTime = [self.dateFormatter dateFromString:startTimeStr];
                action.endTime = [self.dateFormatter dateFromString:endTimeStr];
                action.objectType = objectType;
                action.objectFbID = objectId;
                action.objectUrl = objectUrl;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/15</id>
    <published>2012-05-18T17:39:04Z</published>
    <updated>2012-05-18T18:37:36Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/15-Method-Swizzling"/>
    <title>Method Swizzling</title>
    <content type="html">&lt;div&gt;
	Hoy voy a hablar sobre methodSwizzling, para m&amp;iacute; una de las t&amp;eacute;cnicas m&amp;aacute;s apasionantes de Objective-C. Eso s&amp;iacute;, aviso para navegantes, estas t&amp;eacute;cnicas son complejas y, seg&amp;uacute;n el uso que les des, pueden tambi&amp;eacute;n ser peligrosas. Vamos a verlo!&lt;/div&gt;
&lt;h4&gt;
	Qu&amp;eacute; es MethodSwizzling?&lt;/h4&gt;
&lt;div&gt;
	Probablemente nunca hayas o&amp;iacute;do hablar de MethodSwizzling antes, o si lo hab&amp;iacute;as hecho, no sepas exactamente qu&amp;eacute; es o para qu&amp;eacute; puede servir. Pues bien, ese nombre se usa para referirse simplemente a la t&amp;eacute;cnica de &lt;strong&gt;intercambiar m&amp;eacute;todos en runtime.&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;
	Es decir, se trata de que m&amp;eacute;todos que ya existan sean cambiados por otros nuevos durante ejecuci&amp;oacute;n, incluso en clases que no has prgramado t&amp;uacute; (del sistema por ejemplo). A nivel conceptual puedes entenderlo como una category o una herencia que reemplaza m&amp;eacute;todos del padre, pero el MethodSwzzling, al ser en runtime, va mucho mas all&amp;aacute;. Ahora veremos por qu&amp;eacute;....&lt;/div&gt;
&lt;!--more--&gt;
&lt;h4&gt;
	C&amp;oacute;mo funciona?&lt;/h4&gt;
&lt;div&gt;
	Me encantar&amp;iacute;a deternerme a explicar como funciona esto por dentro, pero habr&amp;iacute;a que analizar muchos aspectos de Objective-C a bajo nivel, as&amp;iacute; que dar&amp;eacute; una explicaci&amp;oacute;n muy r&amp;aacute;pida y me apunto el tema para otro post donde tratarlo como merece.&lt;/div&gt;
&lt;div&gt;
	La idea importante a alto nivel es que Objective-C es un superconjunto de C. En &amp;eacute;l, las clases no son m&amp;aacute;s que estructuras donde parte de su informaci&amp;oacute;n contiene un listado de los m&amp;eacute;todos de la clase con el nombre, par&amp;aacute;metros,&amp;hellip; mientras que los m&amp;eacute;todos son funciones C con un par de par&amp;aacute;metros extra sobre los declarados en Obj-C (el objeto y el nombre del m&amp;eacute;todo ejecutado).&lt;/div&gt;
&lt;div&gt;
	Cuando tu c&amp;oacute;digo hace una llamada tipo:&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;[myVar myMethod];&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
	esto se traduce en tiempo de compilaci&amp;oacute;n por algo similar a:&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;objc_msgSend(myVar, @selector(myMethod));&lt;/code&gt;
&lt;/pre&gt;
&lt;div&gt;
	Optimizaciones aparte, lo que har&amp;aacute; el c&amp;oacute;digo de objc_msgSend es buscar e invocar la funci&amp;oacute;n que corresponde a la clase y selector pasados por par&amp;aacute;metros.&lt;/div&gt;
&lt;div&gt;
	Y aqu&amp;iacute; viene la gracia! Ya que esta informaci&amp;oacute;n reside en memoria, es posible cambiarla. De hecho, no solo es posible mediante hacking, sino que el propio &lt;strong&gt;Objective-C viene con herramientas &lt;/strong&gt;que te lo ponen muy f&amp;aacute;cil: &lt;a href="https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html"&gt;ObjCRuntime&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
	Pero veamos c&amp;oacute;mo se puede hacer en un ejemplo sencillo:&lt;/div&gt;
&lt;pre&gt;
&lt;code&gt;@implementation UIPopoverController (MyCustomPopover)
+ (void)load  
{  
    Class thisClass = [UIPopoverController class];
    
    Method presentPopoverFromRectCustom = class_getInstanceMethod(thisClass, @selector(presentPopoverFromRectCustom:inView:permittedArrowDirections:animated:));
    Method presentPopoverFromRect = class_getInstanceMethod(thisClass, @selector(presentPopoverFromRect:inView:permittedArrowDirections:animated:));
    method_exchangeImplementations(presentPopoverFromRect, presentPopoverFromRectCustom);    
}  
- (void)presentPopoverFromRectCustom:(CGRect)rect inView:(UIView *)view permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated {
    NSLog(@&amp;quot;Custom popover called&amp;quot;);
    [self presentPopoverFromRectCustom:rect inView:view permittedArrowDirections:arrowDirections animated:animated];
}

@end&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
	El c&amp;oacute;digo anterior hace uso del m&amp;eacute;todo load, que se ejecuta autom&amp;aacute;ticamente durante el arranque de tu app (incluso siendo una category), para hacer lo siguiente:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		Obtiene el puntero al m&amp;eacute;todo presentPopoverFromRectCustom:::: (l&amp;iacute;nea 6)&lt;/li&gt;
	&lt;li&gt;
		Obtiene el puntero al m&amp;eacute;todo presentPopoverFromRect:::: (l&amp;iacute;nea 7)&lt;/li&gt;
	&lt;li&gt;
		Los intercambia (l&amp;iacute;nea 8)&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	De esta forma, si incluyes el c&amp;oacute;digo anterior en tu proyecto, cada vez que abras un popover ver&amp;aacute;s que se te invoca tu m&amp;eacute;todo presentPopoverFromRectCustom, y &amp;eacute;ste al invocar presentPopoverFromRectCustom desde dentro &lt;strong&gt;estar&amp;aacute; invocando el presentPopoverFromRect original &lt;/strong&gt;(l&amp;iacute;nea 12: recuerda que los punteros se han cambiado, pero en tiempo de ejecuci&amp;oacute;n, por lo que la llamada a Custom ser&amp;aacute; la llamada al original y viceversa). Todo esto sin tener que cambiar absolutamente nada en tu c&amp;oacute;digo, y sirviendo tambi&amp;eacute;n para los popovers que se abren desde librer&amp;iacute;as de terceros.&lt;/div&gt;
&lt;h4&gt;
	Diferencia con una Category y Herencia&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;strong&gt;La diferencia con la herencia&lt;/strong&gt; es evidente: el cambio se aplica en la clase original, mientras que con herencia tendr&amp;iacute;as que crear una subclase y hacer que el c&amp;oacute;digo use tu subclase (donde se sobrescribir&amp;aacute;n los m&amp;eacute;todos). Esto requiere &lt;strong&gt;much&amp;iacute;simos cambios a nivel de c&amp;oacute;digo &lt;/strong&gt;y en muchos casos &lt;strong&gt;ni siquiera es posible&lt;/strong&gt; ya que puede invocarse desde &lt;strong&gt;librer&amp;iacute;as de terceros&lt;/strong&gt; o desde el propio sistema.&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;La diferencia con las categories&lt;/strong&gt; es mas sutil, pero igualmente clara. Si pretendes hacer lo anterior (popover) con una category sobrescribiendo el m&amp;eacute;todo presentPopoverFromRect, &lt;strong&gt;pierdes la referencia al m&amp;eacute;todo original&lt;/strong&gt;, y por tanto, no puedes reproducir el comportamiento base. Esto es tremendamente peligros ya que la clase puede depender de cosas hechas en ese m&amp;eacute;todo y est&amp;aacute; l&amp;oacute;gicamente &lt;strong&gt;desaconsejado por el propio Apple&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;div&gt;
	En cambio, el &lt;strong&gt;Method Swizzling&lt;/strong&gt; te permite tener una funcionalidad similar a la category pero sin perder el m&amp;eacute;todo original, y por tanto, permitiendo al mismo tiempo &lt;strong&gt;inyectar tu c&amp;oacute;digo&lt;/strong&gt;, hacer la &lt;strong&gt;llamada al c&amp;oacute;digo base &lt;/strong&gt;para que nada se rompa y &lt;strong&gt;no cambiar nada &lt;/strong&gt;en tu proyecto ni librer&amp;iacute;as externas.&lt;/div&gt;
&lt;h4&gt;
	Ejemplos basados en hechos reales&lt;/h4&gt;
&lt;div&gt;
	Si hay una forma de ver el poder de esto es con ejemplos reales. Voy a suponer y analizar dos escenarios basados en situaciones vividas por m&amp;iacute; mismo, y que se pueden presentar a cualquier developer sin demasiada dificultad:&lt;/div&gt;
&lt;h5&gt;
	Caso 1: La navbar customizada&lt;/h5&gt;
&lt;div&gt;
	Hasta iOS5 no hab&amp;iacute;a una forma sencilla de personalizar cosas tan simples como el background de la navbar. Sin embargo, a pesar de los nuevos m&amp;eacute;todos de UIAppearance, es frecuente que lo que quieras hacer no este implementado en el SDK o que tengas que dar soporte a iOS antiguos. En este caso, supondremos que queremos una navBar donde simplemente el t&amp;iacute;tulo est&amp;eacute; rotado 20&amp;ordm; cuando se cumplen ciertos requisitos.&lt;/div&gt;
&lt;h5&gt;
	Caso 2: Feedback de red&lt;/h5&gt;
&lt;div&gt;
	En este caso, supondremos que la app debe dar al usuario feedback mediante un spinner en el centro de la ventana sobre el estado de la conexi&amp;oacute;n de red, anim&amp;aacute;ndolo cada vez que se hace uso de la red con cualquier motivo (descarga de im&amp;aacute;genes, sincronizaci&amp;oacute;n de datos,&amp;hellip;)&lt;/div&gt;
&lt;div&gt;
	En cualquiera de los 3 casos anteriores, un developer que no conozca MethodSwizzling optar&amp;iacute;a por alguna de las siguientes alternativas (o soluciones derivadas de estas) seg&amp;uacute;n su experiencia:&lt;/div&gt;
&lt;h5&gt;
	Alternativa 1 - Hacer las llamadas a mano donde sea necesario&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;
		Soluci&amp;oacute;n al &lt;strong&gt;Caso 1&lt;/strong&gt;: Modificar los controladores de tu app para que en el viewWillAppear se rote o enderece el title de la navBar.&lt;/li&gt;
	&lt;li&gt;
		Soluci&amp;oacute;n al&amp;nbsp;&lt;strong&gt;Caso 2&lt;/strong&gt;: Buscar las peticiones a Internet para que se aumente alg&amp;uacute;n tipo de contador mediante la llamada a una funci&amp;oacute;n y se decremente cuando acabe.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;div&gt;
	Este enfoque es el m&amp;aacute;s junior. El c&amp;oacute;digo estar&amp;aacute; muy lejos de ser mantenible, requiere muchos cambios, esta sujeto a error humano (qu&amp;eacute; f&amp;aacute;cil es olvidarse de hacer alguna llamada) y totalmente acoplado a la soluci&amp;oacute;n customizada que tenemos. Tampoco podremos llegar a c&amp;oacute;digo de terceros por lo que no ser&amp;aacute; totalmente universal. Es decir, &lt;strong&gt;una aut&amp;eacute;ntica chapuza&lt;/strong&gt;.&lt;/div&gt;
&lt;h5&gt;
	Alternativa 2: Herencia&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;
		Soluci&amp;oacute;n al&amp;nbsp;&lt;strong&gt;Caso 1&lt;/strong&gt;: Crear tu propia navBar que eval&amp;uacute;e las condiciones y rote el title si debe hacerlo. Modificar el c&amp;oacute;digo para que se cree tu nueva navbar en vez de la que aporta el sistema por defecto.&lt;/li&gt;
	&lt;li&gt;
		Soluci&amp;oacute;n al&amp;nbsp;&lt;strong&gt;Caso 2&lt;/strong&gt;: Crear una subclase de NSURLConnection que lleve el conteo de conexiones y activaci&amp;oacute;n del spinner. Modificar el c&amp;oacute;digo para que todos aquellos allocs de NSURLConnection pasen a utilizar tu subclase.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;div&gt;
	Este enfoque, aunque mejora sensiblemente el anterior en cuanto a mantenibilidad, &lt;strong&gt;sigue siendo bastante malo&lt;/strong&gt;. El principal problema es que igualmente est&amp;aacute; sujeto a error humano y requiere modificar bastantes l&amp;iacute;neas de c&amp;oacute;digo en tu proyecto. Adem&amp;aacute;s, al igual que el anterior, tampoco podemos llegar a c&amp;oacute;digo de terceros, por lo que por ejemplo la comunicaci&amp;oacute;n desde librer&amp;iacute;as no activar&amp;aacute; nuestro spinner.&lt;/div&gt;
&lt;h5&gt;
	Alternativa 3: Categories&lt;/h5&gt;
&lt;ul&gt;
	&lt;li&gt;
		Soluci&amp;oacute;n al&amp;nbsp;&lt;strong&gt;Caso 1&lt;/strong&gt;: sobrescribir el m&amp;eacute;todo drawRect o similar de la UINavigationBar para que pinte el title girado&lt;/li&gt;
	&lt;li&gt;
		Soluci&amp;oacute;n al&amp;nbsp;&lt;strong&gt;Caso 2&lt;/strong&gt;: sobrescribir el m&amp;eacute;todo de conexi&amp;oacute;n, o incluso ir m&amp;aacute;s alla y combinado con la alternativa 2 sobrescribir el m&amp;eacute;todo de alloc para que &amp;eacute;ste genere un objeto de nuestra subclase en vez de NSUrlConnection.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;div&gt;
	Este enfoque ser&amp;iacute;a &lt;strong&gt;ideal si funcionase&lt;/strong&gt;: Permite llegar a toda la app y librer&amp;iacute;as, sin modificar c&amp;oacute;digo, sin error humano, contenido en uno o dos ficheros que simplemente agregando y quitando dar&amp;aacute;n/quitar&amp;aacute;n la funcionalidad a todo el proyecto. El problema es que &lt;strong&gt;no funciona&lt;/strong&gt;. Por qu&amp;eacute;? bueno, como hemos dicho, con la category estamos sobrescribiendo el m&amp;eacute;todo original. Esto significa que en el caso de la navbar no podremos pintar el t&amp;iacute;tulo por defecto y en el caso 2 no podremos invocar un alloc por defecto. Podr&amp;iacute;amos tratar de simular el comportamiento del m&amp;eacute;todo est&amp;aacute;ndar, pero ser&amp;aacute; muy complejo conseguir el mismo comportamiento y ser&amp;aacute; tremendamente peligroso con las nuevas actualizaciones del iOS (las cosas pueden funcionar de forma distinta).&lt;/div&gt;
&lt;div&gt;
	Y entonces, que nos queda??? el &lt;strong&gt;MethodSwizzling&lt;/strong&gt;!!! hemos dicho que esta t&amp;eacute;cnica es parecida a las categories, pero con la ventaja de que pueden llamar al m&amp;eacute;todo original (problema en alternativa 3); y a la herencia, pero con la ventaja de que cambiamos la clase original (problema de la alternativa 2).&lt;/div&gt;
&lt;div&gt;
	La idea, tal y como ya he mostrado en el ejemplo del Popover del principio, pasa por generar una category donde implementamos un nuevo m&amp;eacute;todo para pintar el t&amp;iacute;tulo, conectar a Internet,&amp;hellip; Luego, en el load hacemos que el m&amp;eacute;todo original y el nuestro se intercambien, y desde el nuestro nos aseguramos invocar el m&amp;eacute;todo original antes de hacer nuestra l&amp;oacute;gica.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Con esto conseguiremos la funcionalidad que quer&amp;iacute;amos para los dos casos, todo ello contenido en un &lt;strong&gt;&amp;uacute;nico fichero&lt;/strong&gt; y con muy pocas l&amp;iacute;neas de c&amp;oacute;digo. Lo podremos &lt;strong&gt;exportar a otros proyectos o eliminar&lt;/strong&gt; de este si no lo queremos m&amp;aacute;s,&amp;nbsp;&lt;strong&gt;sin cambios en nuestro c&amp;oacute;digo&lt;/strong&gt;, y afectar&amp;aacute; a todas las clases, incluidas las de terceros o incluso el sistema. Y lo que es m&amp;aacute;s importante, si lo has hecho correctamente y con m&amp;eacute;todos p&amp;uacute;blicos, el c&amp;oacute;digo no deber&amp;iacute;a romperse en nuevas versiones de iOS ya que, como digo, siempre se llama al m&amp;eacute;todo original.&lt;/div&gt;
&lt;h4&gt;
	Un gran poder conlleva una gran responsabilidad&lt;/h4&gt;
&lt;div&gt;
	Si despu&amp;eacute;s de leer esto est&amp;aacute;s pensando en usarlo, primero debes saber que, precisamente debido a su potencia, tambi&amp;eacute;n &lt;strong&gt;puede ser un instrumento muy peligroso&lt;/strong&gt;. Es como un bistur&amp;iacute;: en manos de un aprendiz el resultado puede ser terrible, pero en las entrenadas manos de un buen cirujano puede salvar vidas. Por este motivo, si buscas en Internet sobre este tema ver&amp;aacute;s a much&amp;iacute;sima gente promulgando que el MethodSwizzling es muy peligroso o que incluso no deber&amp;iacute;a utilizarse nunca en proyectos reales. Mi consejo, como siempre, es que lo &lt;strong&gt;uses con cuidado&lt;/strong&gt;, pero que le des una oportunidad si eres un develper con experiencia. Debes estar seguro de lo que est&amp;aacute;s haciendo, tomar medidas necesarias y nunca abusar de ello. Si te interesa saber m&amp;aacute;s sobre los peligros y c&amp;oacute;mo evitarlos, hay un muy buen post sobre esto en &lt;a href="http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c"&gt;http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c&lt;/a&gt;&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/14</id>
    <published>2012-05-13T11:26:19Z</published>
    <updated>2013-03-01T18:39:53Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/14-GIT-vs-SVN"/>
    <title>GIT vs SVN</title>
    <content type="html">&lt;p&gt;
	Hace ya mucho que no escribo, y la verdad es que despu&amp;eacute;s de todo este tiempo tengo una larga lista de temas. Por eso, he decidido empezar con un tema no muy t&amp;eacute;cnico como este para ir calentando motores :)&lt;/p&gt;
&lt;h4&gt;
	Principales diferencias entre GIT y SVN&lt;/h4&gt;
&lt;div&gt;
	Antes de nada, tengo que advertir que todav&amp;iacute;a soy principiante en GIT, ya que lo he estado usando durante los ultimos 3 meses nada m&amp;aacute;s, y tampoco tengo experiencia con otros SCM como Mercurial o CVS. No obstante, creo que dispongo de una visi&amp;oacute;n suficiente como para escribir algunas de las cosas que, acostumbrado a SVN, me han chocado en mi cambio, as&amp;iacute; como algunas de las ventajas de este nuevo sistema de control de versiones.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Os advierto que, aunque parezca que no, hay mucha chicha que contar y explicar. &amp;nbsp;Por eso no me voy a entretener con informaci&amp;oacute;n de background &amp;nbsp;ni tampoco va a ser un tutorial para iniciarse (puedes buscar en Google para esto que hay muchos y muy buenos tutoriales).&amp;nbsp;Voy directo a discutir algunas de las mayores diferencias:&lt;/div&gt;
&lt;!--more--&gt;
&lt;h5&gt;
	Distribuido&lt;/h5&gt;
&lt;div&gt;
	Lo primero que te dice todo el mundo cuando preguntas por GIT es que es &lt;strong&gt;descentralizado&lt;/strong&gt;, as&amp;iacute; que yo no voy a ser menos. Que significa esto? pues que a diferencia de otros entornos donde los ficheros se encuentran alojados en un repositorio central (SVN Server por ejemplo), aqu&amp;iacute; cada uno es su propio servidor (al estilo P2P). Esto puede sonar raro, pero a medida que vayamos descubriendo c&amp;oacute;mo funciona GIT en los pr&amp;oacute;ximos apartados, veremos que esto es esencial para poder hacer algunas de las cosas que permite GIT.&lt;/div&gt;
&lt;div&gt;
	Esta caracter&amp;iacute;stica tiene algunas consecuencias inmediatas que probablemente ya se te estar&amp;aacute;n ocurriendo:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		Si es local, cuando hago un commit&amp;nbsp;no me sincronizo con otros usuarios no?: Correcto! cuando haces un commit &amp;nbsp;lo haces en tu GIT local, y por tanto, el resto de usuarios no ven tu cambio. Para sincronizarte con el resto de usuarios, deber&amp;iacute;as &amp;ldquo;conectarte&amp;rdquo; con sus GIT y &amp;ldquo;bajarte&amp;rdquo; los cambios (ellos deber&amp;aacute;n hacer lo mismo con el tuyo). Para ello, GIT dispone del concepto de &lt;strong&gt;remotes&lt;/strong&gt;, que no es m&amp;aacute;s que una URL a otro GIT. As&amp;iacute; contado parece un desastre para equipos grandes (trabajo extra y conflictos), pero espera un poco porque luego veremos que funciona genial gracias a otras caracter&amp;iacute;sticas de GIT.&lt;/li&gt;
	&lt;li&gt;
		Si es local, puedo hacer &lt;strong&gt;commit sin conexi&amp;oacute;n&lt;/strong&gt;?: Correcto de nuevo! puedes hacer los commits que quieras sin conexi&amp;oacute;n, y estos ser&amp;aacute;n id&amp;eacute;nticos a los que hagas con conexi&amp;oacute;n (fecha y conjunto de cambios).&lt;/li&gt;
	&lt;li&gt;
		Si es local, significa que tengo toda la informaci&amp;oacute;n (incluido hist&amp;oacute;rico de cambios) en mi disco? esto no ocupar&amp;aacute; mucho?: S&amp;iacute;, tienes toda la informaci&amp;oacute;n en tu disco, pero luego veremos que los commits en GIT son unidades muy peque&amp;ntilde;itas que realmente ocupan muy poco espacio, por lo que no es un problema. Adem&amp;aacute;s, en caso de serlo tienes comandos para hacer limpieza :)&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;
	Commits&lt;/h5&gt;
&lt;div&gt;
	En GIT un commit no es m&amp;aacute;s que una secuencia de cambios aplicados sobre una versi&amp;oacute;n anterior, una fecha, un autor y un identificador. No hay mucho m&amp;aacute;s. Puede ser que pienses que en SVN es igual, pero la gran ventaja de GIT es que tiene un control mucho m&amp;aacute;s fino. Los cambios no son ficheros completos que luego se comparan para ver diferencias, sino l&amp;iacute;neas de texto agregadas/eliminadas (un cambio es una eliminaci&amp;oacute;n+agregaci&amp;oacute;n), excepto si el fichero es binario. En general, en SVN es com&amp;uacute;n pensar en un commit como un Snapshot de un proyecto en un momento determinado, mientras que en GIT es dif&amp;iacute;cil verlo como otra cosa que no sea un peque&amp;ntilde;o parche sobre la versi&amp;oacute;n anterior. Es una diferencia sutil, pero ahora cuando veamos como se trabaja a nivel de branch veremos la potencia (y gran ventaja para mi gusto) de todo esto trabajando junto.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/2/content_git1.png" style="width: 650px; height: 265px; " /&gt;&lt;/div&gt;
&lt;address style="text-align: right; "&gt;
	Contenido de un commit &amp;nbsp;(verde l&amp;iacute;neas agregadas, rojo eliminadas)&lt;/address&gt;
&lt;h5&gt;
	Branches, rebases y patches&lt;/h5&gt;
&lt;div&gt;
	Aqu&amp;iacute; est&amp;aacute; para m&amp;iacute; la gran diferencia entre ambos sistemas y lo m&amp;aacute;s complicado. Como acabo de comentar, en GIT un commit es una unidad muy peque&amp;ntilde;a, tanto que incluso &lt;strong&gt;se puede mover libremente&lt;/strong&gt; por tus branches y repositorios! S&amp;iacute; s&amp;iacute;, lo que has le&amp;iacute;do, un commit puede moverse de una rama a otra, duplicarse o llevarse a un repositorio diferente! c&amp;oacute;mo es posible? bueno, porque como he dicho, un commit no es m&amp;aacute;s que un &amp;ldquo;parche&amp;rdquo; (ya se va viendo la sutil diferencia con SVN??). De nuevo, esto tiene consecuencias muy importantes en la forma de trabajo y capacidades de GIT:&lt;/div&gt;
&lt;ol&gt;
	&lt;li&gt;
		El concepto de &lt;strong&gt;branch&lt;/strong&gt; cambia: En SVN un branch es, a nivel de usuario, un nuevo directorio donde reside una copia que se tom&amp;oacute; en un determinado momento de otra rama, donde aplicas cambos, y que en un momento posterior puede volverse a unir sobre otra rama resolviendo los conflictos que puedan surgir por ficheros modificados en ambos branches.&amp;nbsp;En GIT esta historia cambia. El concepto de&lt;strong&gt; branch en GIT no es m&amp;aacute;s que una secuencia temporal de commits&lt;/strong&gt;, pero no existe un nuevo directorio ni ideas similares. En un repositorio GIT tienes un conjunto de commits, los cuales pueden estar aplicados (uno tras otro) en una o &lt;strong&gt;muchas branches al mismo tiempo&lt;/strong&gt;.&amp;nbsp;&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;Cambiar de rama significa deshacer los commits&lt;/strong&gt; de tu rama (hasta el commit com&amp;uacute;n con la rama a la que te cambias) &lt;strong&gt;y aplicar&lt;/strong&gt; los commits de esta nueva rama secuencialmente. No hay descarga de ficheros ni ning&amp;uacute;n otro cambio.&lt;/li&gt;
	&lt;li&gt;
		Los &lt;strong&gt;branches puede moverse&lt;/strong&gt;: podemos jugar con los branches como queramos, incluido el reposicionar (rebase) un branch encima de cualquier commit. El mecanismo es similar al cambio de rama, pero cambia la estructura del repositorio: se deshacen los commits hasta donde sea necesario y se vuelven a aplicar siguiendo la l&amp;iacute;nea nueva, todo autom&amp;aacute;ticamente! Por supuesto, si movemos nuestro branch podemos encontrarnos conflictos, pero en general GIT los resuelve mucho mas eficientemente que otros entornos precisamente gracias al concepto de commit como un parche.&lt;/li&gt;
	&lt;li&gt;
		Podemos &lt;strong&gt;aplicar commits sueltos&lt;/strong&gt;: GIT permite coger un commit suelto y aplicarlo en nuestro stage (espacio de trabajo) como si fuera un simple parche. Es m&amp;aacute;s, podemos exportar el commit y aplicarlo en cualquier otra rama o repositorio. Esto es especialmente &amp;uacute;til cuando arreglas un bug que afecta a muchas ramas, ya que puedes aplicar el mismo commit a todas ellas sin tener que replicar el cambio (incluso aunque los ficheros afectados hayan cambiado entre ramas).&lt;/li&gt;
	&lt;li&gt;
		Al ser un repositorio local, puede haber ramas que existan en los GIT locales de algunos usuarios y no en el de otros.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	La consecuencia negativa de todo esto, como puedes imaginar, es que se producen complicados cruces de commits entre ramas. No obstante, existen muchas herramientas que ayudan a visualizarlos como l&amp;iacute;neas temporales para ver gr&amp;aacute;ficamente en que punto te encuentras.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	&lt;img alt="" src="/ckeditor_assets/pictures/3/content_git2.png?1336909332" style="width: 650px; height: 570px; " /&gt;&lt;/div&gt;
&lt;address style="text-align: right; "&gt;
	Vista de cruces de distintos branches&lt;/address&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h5&gt;
	Github y remotes&lt;/h5&gt;
&lt;div&gt;
	Todo lo anterior est&amp;aacute; muy bien, pero si tenemos un equipo de varias personas y todas ellas tienen que sincronizarse con todas las dem&amp;aacute;s cada d&amp;iacute;a ser&amp;iacute;a inviable usarlo. Para estos casos, se suele utilizar un repositorio centralizado que recoge los commits de todos los usuarios, de forma que cada usuario solo necesite sincronizarse con este repositorio central (al estilo SVN). Pero una vez m&amp;aacute;s, con GIT puedes utilizar una mejora muy grande sobre este concepto: en lugar de dar a cada usuario permiso para escribir en el repositorio central, se les da s&amp;oacute;lo de lectura, y se les facilita un mecanismo para que soliciten &amp;ldquo;integrar&amp;rdquo; cambios al repositorio central. Alguien, encargado de preservar la calidad del proyecto, aprueba o desaprueba los cambios que le lleguen antes de que estos pasen a estar disponibles para el resto de usuarios. Este &amp;ldquo;mecanismo&amp;rdquo; son servicios como&amp;nbsp;&lt;a href="http://github.com"&gt;GitHub&lt;/a&gt;&amp;nbsp;o &lt;a href="https://bitbucket.org/"&gt;BitBucket&lt;/a&gt;, que b&amp;aacute;sicmanete son portales desde los que puedes gestionar tu copia de un proyecto (&lt;strong&gt;fork&lt;/strong&gt;), pedir integrar tus cambios en el repositorio principal (&lt;strong&gt;pull request&lt;/strong&gt;), hacer cambios desde el entorno Web, seguir usuarios,.... Este mecanismo es tremendamente potente especialmente cuando trabajas con muchos colaboradores o en proyectos de &lt;strong&gt;OpenSource&lt;/strong&gt; donde cualquiera puede contribuir con una mejora. No es casualidad la inmensa cantidad de proyectos que se encuentran en GitHub, y cada d&amp;iacute;a m&amp;aacute;s! ahora entender&amp;aacute;s por qu&amp;eacute;!&lt;/div&gt;
&lt;h5&gt;
	Stashes&lt;/h5&gt;
&lt;div&gt;
	Un stash es algo muy sencillo pero a la vez pr&amp;aacute;ctico: un commit temporal. Se utiliza cuando est&amp;aacute;s en medio de una serie de cambios (sin acabar) y por alguna raz&amp;oacute;n quieres cambiar de rama o hacer un revert sin perder el trabajo (en mi caso me suele pasar cuando viene un cliente que no esperaba y me pide que le instale alguna versi&amp;oacute;n de algo que estoy cambiando). Muy simple, pero muy c&amp;oacute;modo: creas stash, te mueves al commit que quieras y cuando acabes vuelves a moverte y aplicar stash. Menos de 30 segundos y problema resuelto.&lt;/div&gt;
&lt;h5&gt;
	Subm&amp;oacute;dulos&lt;/h5&gt;
&lt;div&gt;
	GIT proporciona un mecanismo bastante potente para incluir subm&amp;oacute;dulos de otros repositorios. Por ejemplo, si tu proyecto hace uso de librer&amp;iacute;as de terceros puedes agregarlas como m&amp;oacute;dulos y as&amp;iacute; permanecer&amp;aacute;s siempre actualizado (si apuntas al HEAD) y no tienes que andar descargando c&amp;oacute;digo. Adem&amp;aacute;s, si este subm&amp;oacute;dulo requiere otros subm&amp;oacute;dulos estos se incluir&amp;aacute;n tambi&amp;eacute;n autom&amp;aacute;ticamente si lo deseas.&lt;/div&gt;
&lt;h5&gt;
	Integracion con herramientas&lt;/h5&gt;
&lt;div&gt;
	Tanto SVN como GIT tienen multitud de herramientas y plugins para integrarse con diferentes entornos. No obstante, en mi caso (que uso XCode), el IDE viene con una vista GIT donde puedes trabajar sin necesidad de instalar plugins ni similares y que adem&amp;aacute;s trae un gestor de conflictos para los projects files bastante potente.&lt;/div&gt;
&lt;h5&gt;
	Gitflow&lt;/h5&gt;
&lt;div&gt;
	No quiero entrar mucho en esto ya que es un tema avanzado (no hace falta usarlo), pero s&amp;iacute; me gustar&amp;iacute;a mencionar que GitFlow es un &amp;ldquo;workflow&amp;rdquo; y un conjunto de scripts que te ayudan a mantener el orden en proyectos con m&amp;uacute;ltiples ramas en paralelo y developers. No conozco nada parecido en SVN, aunque quiz&amp;aacute; exista.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Por qu&amp;eacute; cambiar a GIT?&lt;/h4&gt;
&lt;div&gt;
	Despu&amp;eacute;s de todo lo anterior creo que no es necesario extenderme mucho en esto, pero claramente GIT es un sistema mucho m&amp;aacute;s nuevo y renovado, que le da un nuevo enfoque a un problema presente en todos los desarrollos de software.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Es mucho m&amp;aacute;s completo y potente que otras alternativas, y puede ayudar enormemente a aumentar la calidad de tus proyectos si tienes a un buen gestor del repositorio principal que haga revisiones de las pull request.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	Habr&amp;aacute; quien piense que no hay nada de lo que he dicho que realmente no se pueda hacer con SVN, pero lo cierto es que algunas cosas que he contado anteriormente son tremendamente f&amp;aacute;ciles de hacer con GIT, a un nivel que SVN ni se acerca (adem&amp;aacute;s de que en otras cosas como la gesti&amp;oacute;n de conflictos es objetivamente mejor).&lt;/div&gt;
&lt;div&gt;
	Creo que la pregunta no es &amp;ldquo;por qu&amp;eacute; cambiar a GIT&amp;rdquo; sino &amp;ldquo;por qu&amp;eacute; no est&amp;aacute;s usando ya GIT&amp;rdquo;.&lt;/div&gt;
&lt;div&gt;
	&amp;nbsp;&lt;/div&gt;
&lt;h4&gt;
	Mi experiencia personal&lt;/h4&gt;
&lt;div&gt;
	Mi opini&amp;oacute;n es claramente favorable, si bien es cierto que he encontrado algunos problemas. El diferente concepto de ramas, su complejidad, sus cruces, etc. me llevaron al principio a no ver un verdadero motivo para usar este SCM en vez de seguir con el tradicional SVN, mucho m&amp;aacute;s sencillo. No obstante, una vez superada la tormenta inicial (un par de semanas), tengo que decir que el cambio merece la pena.&amp;nbsp;&lt;/div&gt;
&lt;div&gt;
	La capacidad de hacer y deshacer trabajo, de cambiar ramas, de compartir c&amp;oacute;digo con otros developers o de controlar la calidad del proyecto es algo que compensa con creces el tiempo de aprendizaje donde todo resulta mas lento, complejo y pesado. Si vas a empezar con ello, h&amp;iacute;nchate de energ&amp;iacute;a, pasar&amp;aacute;s malos momentos, pero poco a poco empezar&amp;aacute;s a ver la luz y a enamorarte de c&amp;oacute;mo funciona GIT. Despu&amp;eacute;s de eso mirar&amp;aacute;s hacia atr&amp;aacute;s y pensar&amp;aacute;s que SVN est&amp;aacute; anticuado :)&lt;/div&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/13</id>
    <published>2012-05-13T11:20:32Z</published>
    <updated>2012-07-05T21:15:31Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/13-Welcome-to-my-new-blog-"/>
    <title>Welcome to my new blog!</title>
    <content type="html">&lt;p&gt;
	I have created this blog to post technical articles and close my previous one at &lt;a href="http://angelolloqui.blogspot.com"&gt;angelolloqui.blogspot.com&lt;/a&gt;. Keep tuned because I will add new features and some interesting articles that I am still finishing writing about iOS and other technical stuff!&lt;/p&gt;
&lt;p&gt;
	Next features will include things like:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
		Comments&lt;/li&gt;
	&lt;li&gt;
		Facebook/Twitter share&lt;/li&gt;
	&lt;li&gt;
		Deep multilingual integration (for now, use the Google Translator widget on the top right corner)&lt;/li&gt;
	&lt;li&gt;
		Better source-code formatting&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	Any other suggestions are welcome!&lt;/p&gt;
&lt;p&gt;
	I also want to comment that most of my posts wil be written in Spanish due to two facts:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
		&lt;strong&gt;Spanish is my native language&lt;/strong&gt;, which makes&amp;nbsp;it easier. This way I can focus on writing a good explanation rather than a good English :).&lt;/li&gt;
	&lt;li&gt;
		&lt;strong&gt;English is everywere!&lt;/strong&gt; there are thousands of resources in English to check out, but there are not so many in Spanish, specially regarding technical topics such the ones I will write about here. By writing in Spanish I believe my contribution will be higher.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
	Nevertheless, I would also like to make the shift to English step by step, so there will be some posts in English among the Spanish ones.&lt;/p&gt;
&lt;p&gt;
	Lastly, if you have a topic that you would like to discuss just contact me and I will take a look at it. If I consider it to be interesting and I feel that I have enough knowledge I will probably write about it.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	See you soon!&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/12</id>
    <published>2011-03-08T16:14:03Z</published>
    <updated>2012-05-13T10:46:48Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/12-Manteniendo-compatibilidad-con-versiones-anteriores-de-iOS"/>
    <title>Manteniendo compatibilidad con versiones anteriores de iOS</title>
    <content type="html">&lt;p&gt;
	Es muy habitual encontrarnos con la necesidad de dar soporte a usuarios que no est&amp;eacute;n actualizados con el &amp;uacute;ltimo iOS en nuestras aplicaciones iPhone o iPad, pero los SDKs nuevos dan soporte &amp;uacute;nicamente para un conjunto muy reducido de versiones anteriores, lo que normalmente no es suficiente.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;
	Ante esto, muchos developers no tienen muy claro como conseguirlo, y recurren a soluciones muy poco pr&amp;aacute;cticas (y con varios problemas). La m&amp;aacute;s habitual es tener diferentes SDKs instalados en su m&amp;aacute;quina, para compilar usando uno u otro dependiendo del iOS al que quieran dar compatibilidad. Esta soluci&amp;oacute;n, adem&amp;aacute;s de ser poco elegante, ocupar mucho espacio en disco y dar problemas a la hora de subir la app al AppStore, tiene otros dos problemas muy grandes:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;
		La arquitectura de los simuladores cambia cada cierto tiempo. Esto hace que una librer&amp;iacute;a compilada para un simulador en la 4.3 por ejemplo, no pueda ejecutarse en un simulador en la 3.0. Si usamos librer&amp;iacute;as de terceros (como Flurry por ejemplo) podemos vernos en un problema para conseguir ejecutar nuestra aplicaci&amp;oacute;n en un simulador. Seguimos pudiendo ejecutar en dispositivo, pero la falta de simulador puede hacer el desarrollo mucho m&amp;aacute;s lento.&lt;/li&gt;
	&lt;li&gt;
		No podemos utilizar funcionalidad agregada en SDKs posteriores. Esto parece de perogrullo, pero si compilamos con un SDK3.0 no podremos hacer uso de cosas como FastApp Switching y similares.&lt;/li&gt;
&lt;/ol&gt;
&lt;br /&gt;
&lt;p&gt;
	Todo esto tiene una soluci&amp;oacute;n mucho m&amp;aacute;s sencilla y elegante, que es &lt;span style="font-weight: bold;"&gt;utilizando el llamado &amp;quot;Deployment Target&amp;quot;.&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	Pero antes de nada, voy a explicar la diferencia entre algunos conceptos que no siempre est&amp;aacute;n claros y pueden mezclarse:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;span style="font-weight: bold;"&gt;Versi&amp;oacute;n de iOS&lt;/span&gt;: iOS es el sistema operativo que corre en el dispositivo del usuario. Aqu&amp;iacute; caben much&amp;iacute;simas opciones, y nuestros usuarios estar&amp;aacute;n en una u otra. As&amp;iacute; pues, si nuestra aplicaci&amp;oacute;n da soporte para versiones iOS3.0 o posterior, cualquier usuario con una versi&amp;oacute;n iOS3.0 o posterior podr&amp;aacute; ejecutar nuestra app. Seg&amp;uacute;n la versi&amp;oacute;n de su iOS, el usuario podr&amp;aacute; tener unas funcionalidades u otras (por ejemplo, los mapas se introdujeron en la 3.0 o el FastAppSwitch en la 4.0).&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-weight: bold;"&gt;Versi&amp;oacute;n de SDK instalada&lt;/span&gt;: Este concepto se refiere a la versi&amp;oacute;n del SDK de desarrollo que te descargaste e instalaste en tu m&amp;aacute;quina. Si te lo has bajado de la p&amp;aacute;gina de Apple, ser&amp;aacute; la &amp;uacute;ltima versi&amp;oacute;n disponible. (Por ejemplo, ahora mismo estamos en la 4.3)&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-weight: bold;"&gt;Base SDK&lt;/span&gt;: Establece con que versi&amp;oacute;n de SDK se va a compilar un proyecto. El BaseSDK siempre tiene que ser igual o inferior a tu versi&amp;oacute;n de SDK instalada. Normalmente, un SDK incluye varios Base SDKs anteriores, por si el usuario desea compilar con alguno previo.&lt;/li&gt;
	&lt;li&gt;
		&lt;span style="font-weight: bold;"&gt;Deployment Target&lt;/span&gt;: Establece a partir de qu&amp;eacute; versi&amp;oacute;n de iOS podr&amp;aacute; ejecutarse tu aplicaci&amp;oacute;n. El deployment target por defecto se establece igual al BaseSDK utilizado, pero puede cambiarse a uno anterior.&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;p&gt;
	Una vez explicados estos conceptos, que en muchos casos parecen iguales o pueden resultar confusos, voy a tratar de explicar como solucionar el problema de dar soporte a usuarios con versiones previas de forma elegante , sin perder la compatibilidad con librer&amp;iacute;as compiladas para simulador y pudiendo dar a usuarios con versiones avanzadas de iOS una funcionalidad extra de los nuevos SDKs.&lt;br /&gt;
	El truco est&amp;aacute; en configurar correctamente el DeploymentTarget. Para ello, basta con ir a las propiedades del proyecto (abre XCode, pincha en la raiz del proyecto con el bot&amp;oacute;n derecho, &amp;quot;Get Info&amp;quot;, Pesta&amp;ntilde;a &amp;quot;Build&amp;quot;) y busca el campo &amp;quot;iOS Deployment Target&amp;quot;. Ver&amp;aacute;s que te da un listado de versiones de iOS mucho m&amp;aacute;s extenso del que tienes en las opciones del BaseSDK. Seleccionas tu deployment target deseado y listo.&lt;br /&gt;
	&lt;br /&gt;
	La dificultad de esta soluci&amp;oacute;n viene cuando tu app usa alguna funcionalidad que se introdujo en alguna versi&amp;oacute;n de SDK posterior a la que has seleccionado en Deployment Target.&lt;br /&gt;
	Digamos que pretendes usar Notificaciones locales (introducidas en el 4.2), pero quieres dar soporte a usuarios que sigan en la 3.0. En este caso, puedes compilar con un BaseSDK 4.2 y configurar el Deployment Target a la 3.0. Hasta aqu&amp;iacute; todo bien (el compilador se lo traga y todo parece funcionar bien en simulador y en un dispositivo con iOS 4.2 o posterior). El problema est&amp;aacute; en que en el momento en que tu app trate de ejecutar el c&amp;oacute;digo asociado a las notificaciones locales, la app se cerrar&amp;aacute; si el iOS del usuario no es el 4.2 o posterior, ya que no ser&amp;aacute; capaz de ejecutar ese c&amp;oacute;digo.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;&amp;iquest;C&amp;oacute;mo nos protegemos?&lt;/span&gt; la soluci&amp;oacute;n pasa por estar muy atento a qu&amp;eacute; m&amp;eacute;todos utilizas que no estuviesen presentes en el SDK 3.0, para comprobar si existen antes de usarlos en tiempo de ejecuci&amp;oacute;n. Para ello, en caso de ser una clase, debes comprobar si la clase existe antes de usarla mediante la ejecuci&amp;oacute;n de &amp;quot;NSClassFromString&amp;quot;, mientras que deber&amp;aacute;s usar el &amp;quot;respondsToSelector&amp;quot; en caso de tratarse de un m&amp;eacute;todo.&lt;br /&gt;
	&lt;br /&gt;
	Ej. 1 - Comprobaci&amp;oacute;n de clases - &amp;iquest;Dispositivo soporta Local Notifications?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
if (NSClassFromString(@&amp;quot;UILocalNotification&amp;quot;)!=nil) {
	// Soporta LocalNotifications
}
else {
	// No soporta Local Notifications
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;
	Ej. 2 - Comprobaci&amp;oacute;n de m&amp;eacute;todos - &amp;iquest;Dispositivo soporta multitasking:?&lt;/p&gt;
&lt;div class="wp_syntax"&gt;
	&lt;div class="code"&gt;
		&lt;pre&gt;&lt;code&gt;
if ([[UIDevice currentDevice] respondsToSelector:@selector(isMultitaskingSupported)]) {
	// Soporta multitasking
}
else {
	// No soporta multitasking
}
&lt;/code&gt;&lt;/pre&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
	Si el usuario no soporta la funcionalidad, depender&amp;aacute; de t&amp;iacute; decidir que hacer (le muestras un mensaje, no haces nada, le das otra alternativa,...), pero por lo menos garantizas que la app se ejecuta correctamente en todos los iOS y que los usuarios con versiones avanzadas podr&amp;aacute;n disponer de toda la funcionalidad. Y ya de paso, permites compilar para simulador aunque est&amp;eacute;s usando librer&amp;iacute;as de terceros y te ahorras los muchos GBs que ocupa cada SDK :)&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/11</id>
    <published>2011-03-07T16:08:44Z</published>
    <updated>2012-05-12T16:08:44Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/11--C-mo-afectar-a-los-desarrolladores-el-nuevo-dispositivo-de-Apple-"/>
    <title>¿Cómo afectará a los desarrolladores el nuevo dispositivo de Apple?</title>
    <content type="html">Hoy me han pedido en el trabajo que escribiese sobre esto. Como ya está hecho el trabajo, aprovecho y dejo por aquí el link al post:&lt;br /&gt;
&lt;br /&gt;
&lt;a href="http://www.mobivery.com/blog/general/%C2%BFcomo-afecta-el-ipad2-a-los-desarrolladores-analizamos-el-nuevo-dispositivo-de-apple/"&gt;http://www.mobivery.com/blog/general/%C2%BFcomo-afecta-el-ipad2-a-los-desarrolladores-analizamos-el-nuevo-dispositivo-de-apple/&lt;/a&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/10</id>
    <published>2010-11-06T16:07:10Z</published>
    <updated>2013-01-10T10:15:48Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/10-Facebook-Like-Button-on-iOS"/>
    <title>Facebook Like Button on iOS</title>
    <content type="html">&lt;h3&gt;
	&lt;span style="color:#b22222;"&gt;Important Note &lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;
	&lt;cite&gt;Some people are still asking me for this. Please, note that this post is too old and that it was a hack at that time, so it is very likely to fail nowadays. Nevertheless, the idea behind this hack should still work: Embeb a webview with the official FB like button and capture the login redirect to display a proper dialog to the user.&amp;nbsp;&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	&lt;span style="font-size: 130%; font-weight: bold;"&gt;The problem&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	Some days ago a client asked us for including a Like Facebook button in one of his iPad applications. We have previously used Facebook iOS SDK (&lt;a href="https://github.com/facebook/facebook-ios-sdk"&gt;https://github.com/facebook/facebook-ios-sdk&lt;/a&gt;) for including things like the user&amp;#39;s profile photo, friends, and so on so we were pretty sure that this button would be easy to implement.&lt;br /&gt;
	Upppssss, what an error! Facebook iOS API doesn&amp;#39;t include a FB Like button, and the Rest API either. The only way that Facebook seems to give to developers is a HTML button or iframe, both of them thinked for being in a web enviroment. Of course we have the chance to include a webview in the iPad app to include this button, but we should take care of the login process and some other issues, so I did some research and I found this:&lt;br /&gt;
	&lt;!--more--&gt;&lt;br /&gt;
	&lt;a href="http://petersteinberger.com/2010/06/add-facebook-like-button-with-facebook-connect-iphone-sdk/"&gt;http://petersteinberger.com/2010/06/add-facebook-like-button-with-facebook-connect-iphone-sdk/&lt;/a&gt;&lt;br /&gt;
	&lt;br /&gt;
	This web has the solution that I was looking for, but, after including it&amp;#39;s code (with a minor change due to a miss method), it didn&amp;#39;t work as expected. The FB login dialog opens and then immediatly closes.&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-size: 130%; font-weight: bold;"&gt;The solution&lt;/span&gt;&lt;br /&gt;
	Here are the changes and improvements I have done for resolving it, with the complete code:&lt;br /&gt;
	&lt;br /&gt;
	First, we have to customize a FBDialog for taking care of the login process:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
//FBCustomLoginDialog.h
@interface FBCustomLoginDialog : FBDialog {
}
@end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;
//FBCustomLoginDialog.m
@implementation FBCustomLoginDialog
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
	NSURL* url = request.URL;
	if ([[url absoluteString] rangeOfString:@&amp;quot;login&amp;quot;].location == NSNotFound) {
		[self dialogDidSucceed:url];
		return NO;
	} 
	else if (url != nil) {
		[_spinner startAnimating];
		[_spinner setHidden:NO];
		return YES;
	}
	return NO;
}
@end
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;
	As you may see, I changed the method &amp;quot;containsString&amp;quot; by &amp;quot;rangeOfString&amp;quot; because the first doesn&amp;#39;t exists on iOS SDK. Another minor change I made is that I included a few sentences for start the spinner animation after the user submits the login form, and I had to put and extra &amp;quot;if&amp;quot; because sometimes the URL is null and it can&amp;#39;t be loaded.&lt;br /&gt;
	&lt;br /&gt;
	OK, so now we have a customized login view, but we need to make the button view for the &amp;quot;I like&amp;quot; UI. In order to build this view, my first option was to inherit my view directly from UIWebView, but after a while I decided to use a UIView over it because it gives me the chance to disable the webview scroll (the webpage generated for the FB Like button usually is heigher that the view itself, resulting in an awful scroll).&lt;br /&gt;
	I also made some additions for customizing a little the colors showed in the webview, but I found a problem because the CSS of the page are loaded asynchronously with AJAX, so I can&amp;#39;t know the exact moment in which I have to inject my javascript that changes the colors. This may be improved overriden the AJAX onreadystate to do it at the exact moment, but I didn&amp;#39;t have so much time to investigate on this to only change a color, so I finally took the easy way, injecting the javascript a while after the page loads (3 secs in the code below). If you find a better solution for this I would appreciate if you post your code :)&lt;br /&gt;
	&lt;br /&gt;
	Anyway, this is my final code:&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
//FBLikeButton.h
#define FB_LIKE_BUTTON_LOGIN_NOTIFICATION @&amp;quot;FBLikeLoginNotification&amp;quot;

typedef enum {
	FBLikeButtonStyleStandard,
	FBLikeButtonStyleButtonCount,
	FBLikeButtonStyleBoxCount
} FBLikeButtonStyle;

typedef enum {
	FBLikeButtonColorLight,
	FBLikeButtonColorDark
} FBLikeButtonColor;

@interface FBLikeButton : UIView {
	UIWebView *webView_;
	UIColor *textColor_;
	UIColor *linkColor_;
	UIColor *buttonColor_;
}
@property(retain) UIColor *textColor;
@property(retain) UIColor *linkColor;
@property(retain) UIColor *buttonColor;

- (id)initWithFrame:(CGRect)frame andUrl:(NSString *)likePage andStyle:(FBLikeButtonStyle)style andColor:(FBLikeButtonColor)color;
- (id)initWithFrame:(CGRect)frame andUrl:(NSString *)likePage;

@end
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;pre&gt;
&lt;code&gt;
//FBLikeButton.m
//LoginDialog es estatica para abrir unicamente un login en toda la app
static FBDialog *loginDialog_;

@implementation FBLikeButton

@synthesize textColor = textColor_, buttonColor = buttonColor_, linkColor = linkColor_;

- (id)initWithFrame:(CGRect)frame andUrl:(NSString *)likePage andStyle:(FBLikeButtonStyle)style andColor:(FBLikeButtonColor)color {
	if ((self = [super initWithFrame:frame])) {
		NSString *styleQuery=(style==FBLikeButtonStyleButtonCount? @&amp;quot;button_count&amp;quot; : (style==FBLikeButtonStyleBoxCount? @&amp;quot;box_count&amp;quot; : @&amp;quot;standard&amp;quot;));
		NSString *colorQuery=(color==FBLikeButtonColorDark? @&amp;quot;dark&amp;quot; : @&amp;quot;light&amp;quot;);
		NSString *url =[NSString stringWithFormat:@&amp;quot;http://www.facebook.com/plugins/like.php?layout=%@&amp;amp;show_faces=true&amp;amp;width=%d&amp;amp;height=%d&amp;amp;action=like&amp;amp;colorscheme=%@&amp;amp;href=%@&amp;quot;,
styleQuery, (int) frame.size.width, (int) frame.size.height, colorQuery, likePage];

		//Creamos una webview muy alta para evitar el scroll interno por la foto del usuario y otras cosas
		webView_ = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, 300)];
		[self addSubview:webView_];
		[webView_ loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:url]]];
		webView_.opaque = NO;
		webView_.backgroundColor = [UIColor clearColor];
		webView_.delegate = self;
		webView_.autoresizingMask = UIViewAutoresizingFlexibleWidth;
		[[webView_ scrollView] setBounces:NO];
		self.backgroundColor=[UIColor clearColor];
		self.clipsToBounds=YES;

		[[NSNotificationCenter defaultCenter] addObserver:webView_ selector:@selector(reload) name:FB_LIKE_BUTTON_LOGIN_NOTIFICATION object:nil];
	}
	return self;
}

- (id)initWithFrame:(CGRect)frame andUrl:(NSString *)likePage{
	return [self initWithFrame:frame andUrl:likePage andStyle:FBLikeButtonStyleStandard andColor:FBLikeButtonColorLight];
}

- (void)dealloc {

	[[NSNotificationCenter defaultCenter] removeObserver:webView_ name:FB_LIKE_BUTTON_LOGIN_NOTIFICATION object:nil];

	[webView_ stopLoading];
	webView_.delegate=nil;
	[webView_ removeFromSuperview];
	[webView_ release]; webView_=nil;

	self.linkColor=nil;
	self.textColor=nil;
	self.buttonColor=nil;

	[super dealloc];
}


- (void) configureTextColors{
	NSString *textColor=[textColor_ hexStringFromColor];
	NSString *buttonColor=[buttonColor_ hexStringFromColor];
	NSString *linkColor=[linkColor_ hexStringFromColor];

	NSString *javascriptLinks = [NSString stringWithFormat:@&amp;quot;{&amp;quot;
		&amp;quot;var textlinks=document.getElementsByTagName(&amp;#39;a&amp;#39;);&amp;quot;
		&amp;quot;for(l in textlinks) { textlinks[l].style.color=&amp;#39;#%@&amp;#39;;}&amp;quot;
		&amp;quot;}&amp;quot;, linkColor];

	NSString *javascriptSpans = [NSString stringWithFormat:@&amp;quot;{&amp;quot;
		&amp;quot;var spans=document.getElementsByTagName(&amp;#39;span&amp;#39;);&amp;quot;
		&amp;quot;for(s in spans) { if (spans[s].className!=&amp;#39;liketext&amp;#39;) { spans[s].style.color=&amp;#39;#%@&amp;#39;; } else {spans[s].style.color=&amp;#39;#%@&amp;#39;;}}&amp;quot;
		&amp;quot;}&amp;quot;, textColor, (buttonColor==nil? textColor : buttonColor)];

	//Lanzamos el javascript inmediatamente
	if (linkColor)
		[webView_ stringByEvaluatingJavaScriptFromString:javascriptLinks];
	if (textColor)
		[webView_ stringByEvaluatingJavaScriptFromString:javascriptSpans];

	//Programamos la ejecucion para cuando termine
	if (linkColor)
		[webView_ stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@&amp;quot;setTimeout(function () %@, 3000)&amp;quot;, javascriptLinks]];
	if (textColor)
		[webView_ stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@&amp;quot;setTimeout(function () %@, 3000)&amp;quot;, javascriptSpans]];
}

///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark UIWebViewDelegate

- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {

	if (loginDialog_!=nil)
		return NO;

	// if user has to log in, open a new (modal) window
	if ([[[request URL] absoluteString] rangeOfString:@&amp;quot;login.php&amp;quot;].location!=NSNotFound){
		loginDialog_= [[[FBCustomLoginDialog alloc] init] autorelease];
		[loginDialog_ loadURL:[[request URL] absoluteString] get:nil];
		loginDialog_.delegate = self;
		[loginDialog_ show];
		[loginDialog_.delegate retain]; //Retenemos el boton que ha abierto el login para que pueda recibir la confirmacion correctamente
		return NO;
	}
	if (([[[request URL] absoluteString] rangeOfString:@&amp;quot;/connect/&amp;quot;].location!=NSNotFound) || ([[[request URL] absoluteString] rangeOfString:@&amp;quot;like.php&amp;quot;].location!=NSNotFound)){
		return YES;
	}

	NSLog(@&amp;quot;URL de Facebook no contemplada: %@&amp;quot;, [[request URL] absoluteString]);

	return NO;
}

- (void)webViewDidFinishLoad:(UIWebView *)webView{
	[self configureTextColors];
}

///////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark -
#pragma mark Facebook Connect

- (void)dialogDidSucceed:(FBDialog*)dialog {
	[loginDialog_.delegate release];
	loginDialog_.delegate=nil;
	loginDialog_=nil;

	//Lanzamos la notificacion para que se actualicen los botones
	[[NSNotificationCenter defaultCenter] postNotificationName:FB_LIKE_BUTTON_LOGIN_NOTIFICATION object:nil];
}

/**
* Called when the dialog succeeds and is about to be dismissed.
*/
- (void)dialogDidComplete:(FBDialog *)dialog{
	[self dialogDidSucceed:dialog];
}

/**
* Called when the dialog succeeds with a returning url.
*/
- (void)dialogCompleteWithUrl:(NSURL *)url{
	[self dialogDidSucceed:loginDialog_];
}

/**
* Called when the dialog get canceled by the user.
*/
- (void)dialogDidNotCompleteWithUrl:(NSURL *)url{
	[self dialogDidSucceed:loginDialog_];
}

/**
* Called when the dialog is cancelled and is about to be dismissed.
*/
- (void)dialogDidNotComplete:(FBDialog *)dialog{
	[self dialogDidSucceed:loginDialog_];
}

/**
* Called when dialog failed to load due to an error.
*/
- (void)dialog:(FBDialog*)dialog didFailWithError:(NSError *)error{
	[self dialogDidSucceed:loginDialog_];
}

@end
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;p&gt;
	You may notice that I added a lot of code and methods to the original example. Almost all of them are for customizing the UI and make a proper use of our customized login dialog (the FBDialogDelegate methods).&lt;br /&gt;
	The only important changes are the use of the NSNotificationCenter for sending notifications when the dialog success (and so every existing Like button could refresh with the new credentials) and the static reference to the FBCustomDialog to avoid multiple login popups at the same time.&lt;br /&gt;
	&lt;br /&gt;
	The UIColor extensions used on the code above can be found here:&lt;br /&gt;
	&lt;a href="http://arstechnica.com/apple/guides/2009/02/iphone-development-accessing-uicolor-components.ars"&gt;http://arstechnica.com/apple/guides/2009/02/iphone-development-accessing-uicolor-components.ars&lt;/a&gt;&lt;br /&gt;
	&lt;br /&gt;
	Finally, you would see a method that doesn&amp;#39;t exists on a standard UIWebView:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
[[webView_ scrollView] setBounces:NO];
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;
	this method is a little hack I use sometimes to disable the scroll or bounces of the webview, but it may fail on future iOS versions. Anyway, if you still want to use it, this is what it does (I have it in a UIWebView category)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
- (UIScrollView *) scrollView {
	NSArray *subviews = [self subviews];
	for (UIView *view in subviews){
		if ([view isKindOfClass:[UIScrollView class]])
			return (UIScrollView *) view;
	}
	return nil;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	And thats all! with these 2 classes you are able to include your FB Like buttons in your views in an easy way, just with something like the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
FBLikeButton *likeButton = [[FBLikeButton alloc] initWithFrame:frame andUrl:@&amp;quot;www.mylikeurl.com&amp;quot;];
[view addSubview:likeButton];
[likeButton release];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	or even with customized colors:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
FBLikeButton *likeButton = [[FBLikeButton alloc] initWithFrame:frame andUrl:@&amp;quot;www.mylikeurl.com&amp;quot;];
[likeButton setTextColor:COLOR_DARK_GRAY];
[likeButton setLinkColor:COLOR_CLEAR_GRAY];
[view addSubview:likeButton];
[likeButton release];
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;
	I hope it helps you all!&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-size: 130%; font-weight: bold;"&gt;Known issues&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Login Dialog has a double title bar, the FBDialog title and the FB webpage title. I don&amp;#39;t think there is an easy solution for this, but I consider it as a minor issue.&lt;/li&gt;
	&lt;li&gt;
		FBCustomLoginDialog and FBLoginDialog uses different login methods, so the user have to make login twice if you use the FB iOS SDK for other staff. I don&amp;#39;t think there is a workaround for this issue.&lt;/li&gt;
	&lt;li&gt;
		UI colors may change a little time after the button loads, as commented before, and it may stop working on the future if FB changes it&amp;#39;s webpage structure.&lt;/li&gt;
	&lt;li&gt;
		There is no easy way for customizing layout or even alignment of the elements.&lt;/li&gt;
	&lt;li&gt;
		UIWebview have a little render delay as it loads remote content.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/9</id>
    <published>2010-07-16T15:51:15Z</published>
    <updated>2012-05-12T15:52:20Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/9-Las-ventajas-de-nil-en-Objective-C"/>
    <title>Las ventajas de nil en Objective-C</title>
    <content type="html">&lt;p&gt;
	Para los que venimos de lenguajes como Java o C++ donde un objeto null es un peligro, cuando llegamos a Objective-C descubrimos la gran ventaja que tenemos en este lenguaje.&lt;br /&gt;
	&lt;br /&gt;
	En objective-C, un puntero apuntando a nil es un objeto sobre el que se pueden invocar m&amp;eacute;todos.&lt;br /&gt;
	&lt;br /&gt;
	Es decir, cualquiera de las siguientes l&amp;iacute;neas son perfectamente v&amp;aacute;lidas:&lt;/p&gt;
&lt;!--more--&gt;
&lt;pre&gt;&lt;code&gt;
id objeto = nil;
[objeto metodo];
[nil metodo];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	Quiz&amp;aacute; te preguntes que pasa si se ejecuta un m&amp;eacute;todo sobre nil? pues nada, cualquier ejecuci&amp;oacute;n sobre nil simplemente devuelve a su vez un nil. Por ejemplo, en este c&amp;oacute;digo:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
id objeto1= [nil metodo];
id objeto2 = [objeto1 metodo];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	En ambos casos, objeto1 y objeto2 ser&amp;aacute;n nil a su vez, pero ning&amp;uacute;n error habr&amp;aacute; ocurrido (en vez de los &amp;quot;Null pointer exception&amp;quot; que tendr&amp;iacute;amos en Java).&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	Quiz&amp;aacute; pienses que esto tampoco aporta nada, ya que simplemente con hacer una comprobaci&amp;oacute;n de si objeto1 es nil antes de invocar nada sobre &amp;eacute;l ser&amp;iacute;a suficiente, pero lo cierto es que se convierte en algo muy pr&amp;aacute;ctico, c&amp;oacute;modo y sobre todo robusto frente a errores. No significa que nunca tengas que comprobar si algo es nil, ya que es probable que en muchos casos tengas que hacer una ejecuci&amp;oacute;n diferente en un caso o en el otro, pero s&amp;iacute; ahorra muchas comprobaciones innecesarias y por tanto c&amp;oacute;digo, adem&amp;aacute;s de reducir los errores por un &amp;quot;descuido de comprobaci&amp;oacute;n de null&amp;quot;.&lt;br /&gt;
	&lt;br /&gt;
	Un ejemplo muy claro de este buen uso es en las properties y en los deallocs. Por ejemplo, un dealloc t&amp;iacute;pico podr&amp;iacute;a ser algo como:&lt;br /&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
- (void)dealloc {
	[titleLabel_ release]; titleLabel_ = nil;
	[subtitleLabel_ release]; subtitleLabel_ = nil;
	[introLabel_ release]; introLabel_ = nil;
	[authorLabel_ release]; authorLabel_ = nil;
	[dateLabel_ release]; dateLabel_ = nil;
	[commentsLabel_ release]; commentsLabel_ = nil;
	[textLabels_ release]; textLabels_ = nil;
	[contentScroll_ release]; contentScroll_ = nil;
	[multimediaView_ release]; multimediaView_ = nil;
	[remoteImageView_ release]; remoteImageView_ = nil;
	[multimediaFooterLabel_ release]; multimediaFooterLabel_ = nil;
	[twitterAlertViewController_ release]; twitterAlertViewController_ = nil;
	[bannerView_ release]; bannerView_ = nil;
	[super dealloc];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
	Imaginate la cantidad de l&amp;iacute;neas extras que llevar&amp;iacute;a el dealloc anterior si tenemos que comprobar cada variable antes de liberarla para evitar provocar un &amp;quot;null pointer exception&amp;quot; sobre variables que no est&amp;eacute;n creadas!&lt;br /&gt;
	Por cierto, puedes ver que despu&amp;eacute;s de cada release hago una igualaci&amp;oacute;n a nil. Esto no es obligatorio pero s&amp;iacute; es una muy buena pr&amp;aacute;ctica porque si este release se hace en otro punto es bueno que el puntero lo apuntemos a nil para que no de errores en un hipot&amp;eacute;tico uso posterior.&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Consideraciones&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	A pesar de que la ejecuci&amp;oacute;n de m&amp;eacute;todos sobre nil sea correcta, no significa que lo sea por fuerza en los par&amp;aacute;metros de un m&amp;eacute;todo. Por ejemplo, en un array no podemos agregar un nil como objeto ya que lanza un error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
[array addObject:nil]; // Error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	Por esto, aunque podemos relajarnos con las comprobaciones a nil al invocar m&amp;eacute;todos, hay que tener cuidado cuando se usa como par&amp;aacute;metro de un m&amp;eacute;todo de otro objeto. El nil es mucho mejor que el null de Java, pero no perfecto ;)&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/8</id>
    <published>2010-07-07T15:44:08Z</published>
    <updated>2012-07-05T21:16:11Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/8-Gesti-n-de-memoria-en-iPhone-SDK"/>
    <title>Gestión de memoria en iPhone SDK</title>
    <content type="html">&lt;p&gt;
	El desarrollo de aplicaciones para iPhone o iPad, a diferencia de Android y otras plataformas, tiene un tema bastante espinoso y que a la gente le suele parecer complicado al principio: la gesti&amp;oacute;n de memoria. Debido a que la aplicaci&amp;oacute;n es compilada a c&amp;oacute;digo nativo, sin m&amp;aacute;quinas virtuales de por medio, no contamos con un recolector de basura que nos haga la limpieza de memoria de las variables en desuso. En esta entrada tratar&amp;eacute; de exponer las convenciones y consideraciones que debes tener en cuenta al enfrentarte a este tipo de desarrollos.&lt;br /&gt;
	&lt;br /&gt;
	&lt;!--more--&gt;&lt;br /&gt;
	Como dec&amp;iacute;a anteriormente, lo m&amp;aacute;s importante es saber que aunque en Objective-C puede existir un recolector de basura cuando programamos para MacOs, no existe en iPhone o iPad, por lo que toda la gesti&amp;oacute;n es manual. &amp;iquest;Qu&amp;eacute; significa manual? pues que toda memoria que quieras utilizar tienes que crearla (normalmente mediante alloc), retenerla si es necesario (lo veremos despu&amp;eacute;s), y liberarla cuando dejes de necesitarla (con release). Esta forma de trabajar es chocante si vienes de lenguajes donde no sea necesario, tales como los interpretados (Java, .Net,...) o los de scripting (ruby, php,...).&lt;br /&gt;
	&lt;br /&gt;
	Si no hacemos la gesti&amp;oacute;n de memoria de forma correcta pueden ocurrir dos cosas:&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;1.- Se queda memoria sin liberar&lt;/span&gt;: el iPhone emepezar&amp;aacute; a quedarse sin memoria con cada uso de la aplicaci&amp;oacute;n, y ser&amp;aacute; necesario reiniciar el dispositivo pasados unos cuantos usos seg&amp;uacute;n la cantidad de memoria dejada. A este tipo de lagunas de memoria los llamamos &amp;quot;leaks&amp;quot;.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;2.- Se libera la memoria antes de tiempo&lt;/span&gt;: cuando el c&amp;oacute;digo trate de acceder a un &amp;aacute;rea de memoria que ya ha sido liberada, la aplicaci&amp;oacute;n lanzar&amp;aacute; una excepci&amp;oacute;n y se cerrar&amp;aacute;.&lt;br /&gt;
	&lt;br /&gt;
	Como veis, ambas cosas con muy preocupantes y hay que evitarlas por todos los medios.&lt;br /&gt;
	&lt;br /&gt;
	Para facilitarnos la vida, Apple nos ha aportado un mecanismo de &amp;quot;reference counting&amp;quot; en el objeto NSObject y ha creado dos convenciones que deber&amp;aacute;s seguir si quieres hacer esta gesti&amp;oacute;n de memoria de forma correcta, y que te ayudar&amp;aacute;n a determinar qu&amp;eacute; clase debe hacer que retain/release y en que momento.&lt;br /&gt;
	&lt;br /&gt;
	Pero expliquemos por partes:&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Reference counting.&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	El reference counting es un mecanismo por el cu&amp;aacute;l los objetos llevan algo parecido a un contador de punteros que le apuntan. De esta forma, si un objeto est&amp;aacute; apuntado por varios otros, no podemos liberarlo hasta que deje de ser apuntado por el resto. La diferencia con otros entornos con Garbage Collector es que en Objective-C este conteo se realiza de forma manual, realiz&amp;aacute;ndose m&amp;aacute;s o menos de esta forma:&lt;br /&gt;
	R.1.- Cuando reservamos un objeto mediante su m&amp;eacute;todo &amp;quot;alloc&amp;quot; o &amp;quot;copy&amp;quot;, el nuevo objeto (llam&amp;eacute;mosle MiObjeto) pasa a tener un contador de +1.&lt;br /&gt;
	R.2.- A partir de este momento, cuando otro objeto apunta a MiObjeto debe indicarselo mediante la invocaci&amp;oacute;n del m&amp;eacute;todo &amp;quot;retain&amp;quot;. El m&amp;eacute;todo &amp;quot;retain&amp;quot; sumar&amp;aacute; un +1 al contador de referencias de MiObjeto.&lt;br /&gt;
	R.3.- Cuando otro objeto deja de apuntar a MiObjeto, se invoca el m&amp;eacute;todo &amp;quot;release&amp;quot;. El m&amp;eacute;todo &amp;quot;release&amp;quot; decrementar&amp;aacute; en 1 el contador de referencias. Si MiObjeto pasa a tener un contador de 0 se invoca el m&amp;eacute;todo &amp;quot;dealloc&amp;quot;, que es donde se realiza la liberaci&amp;oacute;n.&lt;br /&gt;
	&lt;br /&gt;
	Como podeis ver, de esta forma no invocamos directamente los m&amp;eacute;todos de liberaci&amp;oacute;n de memoria (dealloc), sino que lo que hacemos es invocar siempre el m&amp;eacute;todo &amp;quot;release&amp;quot; para permitir que, si otros objetos tienen retenido el que queremos liberar, se destruya la memoria y se produzca el fallo 2.- del primer p&amp;aacute;rrafo. Esta liberaci&amp;oacute;n ocurrir&amp;aacute; cuando los otros objetos realicen a su vez el release de MiObjeto (ojo, como queda claro, cada retain y alloc debe ejecutar en alg&amp;uacute;n momento un release, dado que de otra forma tendremos un leak como se indica en 1.-)&lt;br /&gt;
	&lt;br /&gt;
	Ejemplo de reference counting:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
for (int i=0; i &amp;lt; 1000; i++) {
	//Creamos memoria
	id objeto = [[ClaseCreadora alloc] init];
	//Pasamos el objeto a otra clase
	[ClaseB nuevoObjeto:objeto];
	//Liberamos la memoria
	[objeto release];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	En este ejemplo vemos c&amp;oacute;mo se ha hecho un &lt;span style="font-family:verdana;"&gt;release&lt;/span&gt; por cada &lt;span style="font-family:verdana;"&gt;alloc&lt;/span&gt;, y se puede suponer que &lt;span style="font-family:verdana;"&gt;ClaseB&lt;/span&gt; estar&amp;aacute; haciendo un &lt;span style="font-family:verdana;"&gt;retain&lt;/span&gt; sobre &lt;span style="font-family:verdana;"&gt;objeto&lt;/span&gt; si lo necesita utilizar m&amp;aacute;s tarde.&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Convenci&amp;oacute;n ownership&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	El reference counting nos ayuda a evitar gran cantidad de problemas surgidos al compartir memoria entre diferentes clases y objetos, pero plantea problemas a la hora de decidir d&amp;oacute;nde y qui&amp;eacute;n debe hacer los releases. Por ejemplo, sin un m&amp;eacute;todo tiene que devolver un objeto nuevo, y no guarda ning&amp;uacute;n puntero al mismo, &amp;iquest;c&amp;oacute;mo libera la memoria de este nuevo objeto? como no guarda el puntero no puede hacer el release m&amp;aacute;s tarde, tampoco lo puede ejecutar inmediatamente porque si lo hace se liberar&amp;aacute; la memoria en este mismo momento y producir&amp;aacute; el fallo 2.- al intentar usarla, y tampoco es buena idea devolverlo sin el release porque en ese caso se producir&amp;aacute; un leak si la otra clase no lo libera. Aqu&amp;iacute; entra en juego la convenci&amp;oacute;n Ownership.&lt;br /&gt;
	&lt;br /&gt;
	Seg&amp;uacute;n esta convenci&amp;oacute;n, todo objeto es responsable de liberar la memoria que crea o retiene, pero aporta un par de reglas extras para solucionar el problema anterior:&lt;br /&gt;
	&lt;br /&gt;
	O.1.- Cuando un objeto va a utilizar memoria creada por otro m&amp;eacute;todo debe hacer un retain para evitar su liberaci&amp;oacute;n prematura.&lt;br /&gt;
	O.2.- Todo objeto debe liberar la memoria creada (mediante m&amp;eacute;todos alloc, copy o new) y retenida (mediante m&amp;eacute;todo retain), invocando el m&amp;eacute;todo release en alg&amp;uacute;n momento en su ciclo de vida. Por cada alloc/retain ejecutado debe hacerse un release.&lt;br /&gt;
	O.3.- Si un m&amp;eacute;todo devuelve un objeto que no va a liberar, el m&amp;eacute;todo deber&amp;aacute; llamarse allocXXX, copyXXX o newXXX (donde XXX se sustituye por el nombre que elijas). De esta forma, el que invoca el m&amp;eacute;todo puede conocer esta caracter&amp;iacute;stica y, aplicando la regla O.2.- podr&amp;aacute; liberarla. Esta misma regla podr&amp;iacute;a aplicarse N veces si cada m&amp;eacute;todo devuelve a su vez el objeto nuevo a su padre.&lt;br /&gt;
	&lt;br /&gt;
	Ejemplo convenci&amp;oacute;n Ownership:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
- (Clase *) newObjectWithData:(NSData *)data {
	//Creamos el objeto
	Clase *object = [[Clase alloc] init];
	//Ejecutamos lo que sea
	[object setData:data];
	//Devolvemos el objeto
	return object;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	En este ejemplo podemos hacer la devoluci&amp;oacute;n gracias a haber nombrado al m&amp;eacute;todo &lt;span style="font-family:verdana;"&gt;newXXX&lt;/span&gt;, que indicar&amp;aacute; al que lo invoque que el objeto de tipo &lt;span style="font-family:verdana;"&gt;Clase *&lt;/span&gt; devuelto est&amp;aacute; sin liberar.&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Autorelease&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	Por &amp;uacute;ltimo, tenemos un &amp;uacute;ltimo recurso que nos ayudar&amp;aacute; a gestionar la memoria. Lo he dejado al final porque es el poco &amp;oacute;ptimo y propenso a erores, por lo que deber&amp;iacute;as tratar de evitarlo donde sea posible. Se trata del m&amp;eacute;todo autorelease, que nos permite indicar que una variable debe ejecutar un release pero m&amp;aacute;s tarde. &amp;iquest;Cu&amp;aacute;ndo? pues no lo sabes a ciencia cierta porque depender&amp;aacute; de la pila de llamadas, pero el autorelease funciona as&amp;iacute;:&lt;br /&gt;
	&lt;br /&gt;
	A.1.- Un m&amp;eacute;todo ejecuta un autorelease sobre un objeto (MiObjeto) que ten&amp;iacute;a retenido (retain) o que hab&amp;iacute;a creado previamente (alloc/copy).&lt;br /&gt;
	A.2.- El m&amp;eacute;todo autorelease busca la NSAutoreleasePool en la pila de llamadas m&amp;aacute;s cercana y programa la ejecuci&amp;oacute;n del release sobre este objeto&lt;br /&gt;
	A.3.- La ejecuci&amp;oacute;n de la pila de llamadas termina, se ejecuta el NSAutoreleasePool release y se realizan todos los releases programados (se realiza el release sobre MiObjeto).&lt;br /&gt;
	&lt;br /&gt;
	As&amp;iacute;, durante todo el espacio entre A.1 y A.3 la variable seguir&amp;aacute; retenida, pero no se tratar&amp;aacute; de un leak aunque se pierda el puntero ya que este release est&amp;aacute; programado en la AutoreleasePool. El espacio entre A.1 y A.3 normalmente ser&amp;aacute; la pila de llamdas del sistema (por ejemplo, si se pulsa un bot&amp;oacute;n en el interfaz gr&amp;aacute;fico se crea una pila y se destruye cuando se termina de procesar el evento de pulsaci&amp;oacute;n), pero pueden crearse pilas dentro de otras para hacer las liberaciones de una forma m&amp;aacute;s frecuente.&lt;br /&gt;
	&lt;br /&gt;
	Ejemplo devoluci&amp;oacute;n con autorelease:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
- (Clase *) objectWithData:(NSData *)data {
	//Creamos el objeto
	Clase *object = [[Clase alloc] init];
	//Ejecutamos lo que sea
	[object setData:data];
	//Devolvemos el objeto
	return [object autorelease];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	En este ejemplo a diferencia del utilizado en el patr&amp;oacute;n ownership vemos que hemos ejecutado un &lt;span style="font-family:verdana;"&gt;autorelease&lt;/span&gt; sobre el &lt;span style="font-family:verdana;"&gt;objet&lt;/span&gt;, por lo que el m&amp;eacute;todo no deber&amp;aacute; llamarse &lt;span style="font-family:verdana;"&gt;newXXX&lt;/span&gt; porque el padre no tiene que preocuparse de la gesti&amp;oacute;n de memoria de dicho &lt;span style="font-family:verdana;"&gt;object&lt;/span&gt; (el release no se ha ejecutado todav&amp;iacute;a pero lo har&amp;aacute; m&amp;aacute;s tarde).&lt;br /&gt;
	&lt;br /&gt;
	Ejemplo de uso de NSAutoreleasePool:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
//Creamos una nueva pool
NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] ini];
for (int i=0; i &amp;lt; 1000; i++) {
	//Creamos memoria
	id objeto = [[ClaseCreadora alloc] init];
	//Pasamos el objeto a otra clase
	[ClaseB nuevoObjeto:objeto];
	//Programamos el autorelease para hacerlo mas tarde
	[objeto autorelease];
}
//Liberamos toda la memoria con autorelease desde la creacion de la pool
[pool release];
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
&lt;p&gt;
	&lt;span style="font-weight: bold;"&gt;Resumen&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	La gesti&amp;oacute;n de memoria es una tarea que al principio parece compleja, pero una vez comprendidas las normas y el funcionamiento acaba siendo un tema bastante m&amp;aacute;s sencillo de lo que es en otros lenguajes sin reference counting o patrones ownership. Al final, normalmente se resumen en:&lt;br /&gt;
	&lt;br /&gt;
	a. Toda memoria creada en tu clase con m&amp;eacute;todos alloc, copy o new debe llevar un release o autorelease en su ciclo de vida&lt;br /&gt;
	&lt;br /&gt;
	b. Toda memoria que uses creada por otra clase deber&amp;iacute;as protegerla con retain y liberarla cuando no sea necesaria (idem a punto a.)&lt;br /&gt;
	&lt;br /&gt;
	c. Si un m&amp;eacute;todo devuelve memoria sin liberar debe llamarse newXXX, allocXXX o copyXXX&lt;br /&gt;
	&lt;br /&gt;
	d. Puedes ejecutar autorelease si necesitas posponer la ejecuci&amp;oacute;n de un release, pero no puedes saber el instante exacto en el que se realizar&amp;aacute; a priori (por ello, debes seguir b. si se usa esa memoria tambi&amp;eacute;n a posteriori desde otro punto)&lt;br /&gt;
	&lt;br /&gt;
	e. Los m&amp;eacute;todos y clases de Apple cumplen los apartados anteriores.&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/7</id>
    <published>2010-07-06T15:33:00Z</published>
    <updated>2012-05-12T15:33:00Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/7-Liberaci-n-de-memoria-en-IBOutlets"/>
    <title>Liberación de memoria en IBOutlets</title>
    <content type="html">&lt;p&gt;
	Hoy voy me he encontrado con un problema en el trabajo relacionado con la liberaci&amp;oacute;n de memoria y la convenci&amp;oacute;n Ownership. Bajo esta convenci&amp;oacute;n, las clases solo son responsables de liberar aquella memoria que reservan directamente (mediante alloc, retain o copy), pero resulta que no siempre es as&amp;iacute;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;
	El problema surge cuando nos enfrentamos a un proyecto iPhone/iPad donde tenemos parte del c&amp;oacute;digo creado de forma gr&amp;aacute;fica mediante Interface Builder. Al usar IB las variables se enlazan con el c&amp;oacute;digo mediante el etiquetado de las mismas con la palabra clave IBOutlet sin necesidad de reservar memoria.&lt;br /&gt;
	&lt;br /&gt;
	Es decir, si tenemos un UILabel que querecemos enlazar desde IB, lo que hacemos es declararla de forma:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
IBOutlet UILabel *label;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
	y desde Interface Builder conectarla con nuestro label creado gr&amp;aacute;ficamente.&lt;br /&gt;
	&lt;br /&gt;
	Hasta aqu&amp;iacute; todo OK, el problema aparece cuando te enfrentas a la liberaci&amp;oacute;n de memoria. Bajo el patr&amp;oacute;n ownership, como no hemos hecho nosotros la reserva de memoria, no deber&amp;iacute;amos hacer nosotros su liberaci&amp;oacute;n, ya que de hacerlo podemos estar decrementando en exceso su retain count y acabar liberando antes de tiempo este objeto (con el consiguiente BAD ACCESS). Pues bien, parece que con estas variables IBOutlet el patr&amp;oacute;n Ownership no se cumple, porque es el desarrollador el responsable de su liberaci&amp;oacute;n en el dealloc, y opcionalmente en el viewDidUnload.&lt;br /&gt;
	&lt;br /&gt;
	Podeis ver la documentaci&amp;oacute;n oficial aqu&amp;iacute;:&lt;br /&gt;
	&lt;a href="http://developer.apple.com/iphone/library/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmNibObjects.html"&gt;http://developer.apple.com/iphone/library/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmNibObjects.html&lt;/a&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	En resumen, las variables declaradas IBOutlet deben ser liberadas expl&amp;iacute;citamente por el desarrollador, y adem&amp;aacute;s Apple recomienda usar una property tipo retain en su declaraci&amp;oacute;n y liberarlas tambi&amp;eacute;n en el viewDidUnload para mejorar la gesti&amp;oacute;n de memoria en situaciones de Memory Warning.&lt;/p&gt;
&lt;p&gt;
	&amp;nbsp;&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/6</id>
    <published>2010-07-03T15:29:01Z</published>
    <updated>2012-05-12T15:29:01Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/6-Recursos-de-desarrollo-para-iPhone"/>
    <title>Recursos de desarrollo para iPhone</title>
    <content type="html">&lt;p&gt;
	Voy a utilizar este post para hacer un recopilatorio de aquellos cursos que sean de inter&amp;eacute;s en el desarrollo para iPhone y iPad. Si teneis buenos enlaces, publicadlos en los comentarios para agregarlos a este listado:&lt;br /&gt;
	&lt;br /&gt;
	&lt;!--more--&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Links &amp;uacute;tiles&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="https://developer.apple.com/iphone"&gt;Portal de desarrollo de iPhone&lt;/a&gt;: Principal sitio de referencia y punto de partida para gestionar y desarrollar tus aplicaciones. M&amp;eacute;telo en favoritos.&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Objective-C&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html"&gt;Introducci&amp;oacute;n a Objective-C oficial&lt;/a&gt;: Introducci&amp;oacute;n al lenguaje Objective-C oficial por Apple. Muy buen recurso, imprescindible su lectura antes de lanzarse a desarrollar. Cuidado porque este curso es general de Objective-C, por lo que trata algunos aspectos como el recolector de basura de los que no disponemos en iPhone.&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="http://es.wikipedia.org/wiki/Objective-C"&gt;Wikipedia: Objective-C&lt;/a&gt;: Breve introducci&amp;oacute;n a Objective-C en la Wikipedia. No tiene mucho valor pero sirve para tener una primera visi&amp;oacute;n del lenguaje.&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="http://www.abcdatos.com/tutoriales/tutorial/z8973.html"&gt;Objective-C para programadores Java&lt;/a&gt;: Tutorial muy bien montado donde se explican las diferencias entre Java y Objective-C. Altamente recomendado si eres un programador con experiencia en Java.&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Cursos y Tutoriales&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="http://www.stanford.edu/class/cs193p/cgi-bin/drupal/downloads-2010-winter"&gt;Introducci&amp;oacute;n a iPhone por la Universidad de Standford&lt;/a&gt;: Muy buen curso de introducci&amp;oacute;n. Empieza con conceptos b&amp;aacute;sicos y acaba con temas muy avanzados como OpenGLEs. Altamente recomendable&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="http://courses.csail.mit.edu/iphonedev/"&gt;Introducci&amp;oacute;n a iPhone por el MIT&lt;/a&gt;: Buen curso de introducci&amp;oacute;n. Lo renuevan a menudo por lo que es un buen recurso para introducirse, pero no lleva tanta profundidad como el anterior.&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;Otros&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;a href="http://developer.apple.com/iphone/library/documentation/UserExperience/Conceptual/MobileHIG/Introduction/chapter_1_section_1.html"&gt;Human Interfaces Guidelines&lt;/a&gt;: Recurso de imprescindible lectura si pretendes dedicarte de forma profesional al desarrollo para iPhone. En &amp;eacute;l se explican los componentes que existen, las normas que deben seguirse en su utilizaci&amp;oacute;n y aspectos de usabilidad y navegabilidad que deben tener tus aplicaciones.&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/5</id>
    <published>2010-07-02T15:26:22Z</published>
    <updated>2012-05-12T15:26:22Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/5-Desarrollar-para-iPhone-iPad-Qu-necesito-y-por-d-nde-empiezo-"/>
    <title>Desarrollar para iPhone/iPad: ¿Qué necesito y por dónde empiezo?</title>
    <content type="html">&lt;p&gt;
	Voy a empezar a escribir en este blog sobre iPhone/iPad, y como no puede ser de otra forma, empezar&amp;eacute; por el principio: &amp;iquest;Qu&amp;eacute; necesito y por d&amp;oacute;nde empiezo a programar para iPhone/iPad?&lt;br /&gt;
	&lt;br /&gt;
	Vamos all&amp;aacute;, pero aviso que no entrar&amp;eacute; en ning&amp;uacute;n detalle t&amp;eacute;cnico todav&amp;iacute;a.&lt;br /&gt;
	&lt;!--more--&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;font-size:130%;"&gt;Requisitos previos&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;1.- Lo primero es hacerte con un Mac.&lt;/span&gt; Existen emuladores con los que podr&amp;iacute;ais llegar a probar el entorno y hacer peque&amp;ntilde;os pinitos, pero el SDK de iPhone consume bastantes recursos, por lo que es imprescindible que os hagais con un MacOSX. Por cierto, a d&amp;iacute;a de hoy s&amp;oacute;lo hay soporte para SnowLeopard, por lo que aseguraos que adem&amp;aacute;s vuestro Mac est&amp;aacute; actualizado.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;2.- Crearte una cuenta en en Apple Developer Portal&lt;/span&gt; (http://developer.apple.com/iphone). Existen diferentes tipos de cuentas, desde las gratuitas hasta las de pago. Con las gratuitas podr&amp;aacute;s probar el SDK, pero no podr&amp;aacute;s subir aplicaciones al AppStore. Mi consejo es que desde el primer momento te des de alta como un desarrollador de pago, ya que el proceso de alta puede tardar algunos d&amp;iacute;as y este tipo de cuentas te dan acceso a todo el material por unos 70&amp;euro; al a&amp;ntilde;o.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;3.- Descargarte el SDK de desarrollo&lt;/span&gt; de iPhone de http://developer.apple.com/iphone/. B&amp;aacute;jate la versi&amp;oacute;n m&amp;aacute;s actual. En el momento de redactar este post era la 4.0, pero posiblemente las haya m&amp;aacute;s actuales cuando lo leas. Independientemente de la versi&amp;oacute;n, b&amp;aacute;ja e instala el SDK en tu equipo. Ten paciencia porque son m&amp;aacute;s de 2GB. Este SDK incluye, entre alguna otra, 4 grandes herramientas: XCode, Interface Builder, Simulator e Instruments. Ten en cuenta que el SDK de desarrollo para iPhone y iPad es el mismo, por lo que a partir de ahora hablar&amp;eacute; de iPhone para referirme a ambos.&lt;br /&gt;
	&lt;br /&gt;
	Con esto ya estar&amp;iacute;as listo para empezar a probar el SDK con los primeros ejemplos y tutoriales en un simulador. No obstante, si tu intenci&amp;oacute;n es probar la aplicaci&amp;oacute;n en un dispositivo, es imprescindible que te des de alta en el Provisioning Portal y a&amp;ntilde;adas tu dispositivo a un provisioning profile v&amp;aacute;lido. En las siguientes l&amp;iacute;neas te explico como hacerlo (s&amp;aacute;ltatelas si no te intersa probar sobre dispositivos reales):&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;4.-&lt;/span&gt; Logueate en el Developer Portal y accede a iPhone Provisioning Portal.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;5.- Crear un certificado (de development)&lt;/span&gt;: Entra en Certificates y sigue los pasos para crear un certificado nuevo. A grandes rasgos, lo que hay que hacer aqu&amp;iacute; simplemente es crear un nuevo certificado con el Keychain (Acceso a Llaveros en espa&amp;ntilde;ol) y subirlo y validarlo en el portal. Te aconsejo adem&amp;aacute;s que entres en tu Keychain y exportes la clave privada del certificado en un p12 y la guardes en un lugar seguro, porque si un d&amp;iacute;a necesitas utilizar el certificado en otro equipo te har&amp;aacute; falta.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;6.- Dar de alta tus dispositivos&lt;/span&gt;: Entra en la secci&amp;oacute;n devices y a&amp;ntilde;ade nuevos dispositivos con el UDID. Este UDID lo puedes obtener utilizando el iTunes o mediante el Organizer (incluido en el Xcode, dentro de herramientas). Si utilizas el iTunes, conecta tu dispositivo (no es necesario sincronizar) y accede a &amp;eacute;l desde el menu lateral izquierdo. En la pesta&amp;ntilde;a de resumen ver&amp;aacute;s el UDID (puede aparecer &amp;quot;N&amp;uacute;mero de serie&amp;quot; en su lugar, si es as&amp;iacute; simplemente pincha sobre &amp;eacute;l para que cambie y te muestre el UDID). C&amp;oacute;pialo (comando+c funciona, no lo hagas a mano!) y agr&amp;eacute;galo en el portal junto con un nombre asociado.&lt;br /&gt;
	Cuidado porque el portal limita a 100 el n&amp;uacute;mero de dispositivos que se pueden dar de alta, y NO se pueden borrar, as&amp;iacute; que mucho cuidado con utilizarlo indiscriminadamente porque pueden no ser tantos.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;7.- Crear un appID&lt;/span&gt;: Un AppId no es una aplicaci&amp;oacute;n en s&amp;iacute; misma, sino un identificador para una o m&amp;aacute;s aplicaciones. Se utiliza para discriminar entre provisioning profiles y son fundamentales tenerlos bien configurados para temas m&amp;aacute;s avanzados como APNS o InAppPurchase. De momento, con un AppId gen&amp;eacute;rico ser&amp;aacute; suficiente. Para crearlo, simplemente asignale un nombre (&amp;quot;all apps&amp;quot; por ejemplo) y pon como bundle identifier un *. El * es un comodin que nos permitir&amp;aacute; referirnos a cualquier aplicaci&amp;oacute;n usando este AppId.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;8.- Crear un provisioning profile (de development)&lt;/span&gt;: Entra en provisioning y crea uno nuevo. Te pedir&amp;aacute; asignarle un nombre, seleccionar un AppId y una lista de dispositivos. Mi consejo para el nombre es que independientemente de cu&amp;aacute;l elijas lleve la palabra &amp;quot;Development&amp;quot; y algo que te permita reconocer que es el provisioning gen&amp;eacute;rico para todas las apps, ya que es posible que te juntes con muchos provisioning en el futuro si vas subir la aplicaci&amp;oacute;n al AppStore, tienes diferentes cuentas o utilizas temas avanzados como comentaba anteriormente. Por ejemplo, un buen nombre podr&amp;iacute;a ser algo como &amp;quot;AngelAllAppsDevelopmentProfile&amp;quot;. Con esto hecho, solo te falta descargar el profile que acabas de crear y instalarlo (basta con hacer doble click sobre &amp;eacute;l, o moverlo a la carpeta $user/Library/MobileDevice/Provisioning Profiles)&lt;br /&gt;
	&lt;br /&gt;
	Antes de terminar con esta parte de los certificados, voy a explicar brevemente para que se usan:&lt;br /&gt;
	Los provisioning profiles son archivos utilizados para firmar las aplicaciones en el momento de compilarlas. Los profiles de development te permiten compilar para ser instalados de forma directa en los dispositivos configurados (ver pasos anteriores), pero tienen una caducidad de 3 meses y no pueden tener m&amp;aacute;s de 100 dispositivos dados de alta. Adem&amp;aacute;s, es necesario que el dispositvo tenga instalado el certificado para poder instalar la aplicaci&amp;oacute;n, pero como veremos si usamos las herramientas de desarrollo esto ser&amp;aacute; autom&amp;aacute;tico. Si lo que pretendes es mandar la aplicaci&amp;oacute;n a una tercera persona, asegurate de que te ha dado su UDID, est&amp;aacute; dado de alta en el profile que corresponda y lo tiene instalado en su dispositivo antes de intentar instalar la aplicaci&amp;oacute;n. Para instalar el certificado en el dispositivo, al igual que una aplicaci&amp;oacute;n, puede hacerse tambi&amp;eacute;n arrastr&amp;aacute;ndolo a la biblioteca de su iTunes y sincronizando el dispositivo (cuidado porque en Windows no funciona bien, as&amp;iacute; que mejor si puede hacerlo en un Mac).&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-size:130%;"&gt;&lt;span style="font-weight: bold;"&gt;Vistazo de las herramientas del SDK&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	Tras la instalaci&amp;oacute;n del SDK tendr&amp;aacute;s 4 programas que utilizar&amp;aacute;s continuamente en tus desarrollos. Vamos a mencionarlos brevemente para que sepas para que se utilizan:&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;- XCode&lt;/span&gt;: Este es el IDE de desarrollo, por lo que es la principal herramienta que utilizar&amp;aacute;s para programar. El XCode tiene muchas herramientas, atajos de teclados y truquitos, pero los ir&amp;aacute;s aprendiendo con la pr&amp;aacute;ctica (posiblemente en el futuro haga un post sobre esto, pero ahora es demasiado). Lo principal de esta herramienta es que entiendas que a la izquierda tienes el &amp;aacute;rbol l&amp;oacute;gico de ficheros (digo l&amp;oacute;gico porque lo que organices en este &amp;aacute;rbol no se cambiar&amp;aacute; en el sistema de ficheros, s&amp;oacute;lo aqu&amp;iacute; dentro de XCode, as&amp;iacute; que cuidado con el desorden), y a la derecha la zona de escritura. Un elemento importante de esta herramienta es el selector que aparece arriba a la izquierda (entre el men&amp;uacute; de la aplicaci&amp;oacute;n y el &amp;aacute;rbol de ficheros), con la que podr&amp;aacute;s elegir si quieres desplegar en un simulador o un dispositivo, as&amp;iacute; como la configuraci&amp;oacute;n (debug o release). Ambas configuraciones te sirven igual, &amp;uacute;nicamente es recomendable que uses el modo debug para hacer pruebas durante el desarrollo puesto que llevan m&amp;aacute;s informaci&amp;oacute;n de trazas. Volveremos a esto cuando hagamos un HelloWorld.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;- Interface Builder&lt;/span&gt;: Esta herramienta es el IDE gr&amp;aacute;fico. Te servir&amp;aacute; para crear vistas de forma sencilla, arrastrando componentes desde una paleta de componentes sobre un lienzo, editar sus propiedades principales (color, tama&amp;ntilde;o, posici&amp;oacute;n, opacidad, ...) y enazarlos con el c&amp;oacute;digo.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;- iPhone Simulator&lt;/span&gt;: Es un simulador de iPhone. Se arranca cuando configuras la aplicaci&amp;oacute;n para ejecutar sobre un simulador. A casi todos los efectos funciona igual que un dispositivo, pero es importante saber que este simulador no tiene l&amp;iacute;mites de memoria y tiene una capacidad de CPU sensiblemente superior a los dispositivos reales. Por ello, no podemos estar seguros de que una aplicaci&amp;oacute;n funciona correctamente hasta probarla en un dispositivo aut&amp;eacute;ntico. La gran ventaja es que se arranca e instalan aplicaciones m&amp;aacute;s r&amp;aacute;pido que en un dispositivo real por lo que es muy &amp;uacute;til para el d&amp;iacute;a a d&amp;iacute;a.&lt;br /&gt;
	&lt;span style="font-weight: bold;"&gt;- Instruments&lt;/span&gt;: Esta herramienta la usareis menos, pero nos permitir&amp;aacute; revisar la aplicaci&amp;oacute;n en busca de leaks de memoria o consumo de CPU. No entrar&amp;eacute; en m&amp;aacute;s detalle puesto que es un tema m&amp;aacute;s avanzado.&lt;br /&gt;
	&lt;br /&gt;
	&lt;span style="font-size:130%;"&gt;&lt;span style="font-weight: bold;"&gt;De aqu&amp;iacute; en adelante&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
	&lt;br /&gt;
	Y de momento esto es todo lo que considero importante para un post de introducci&amp;oacute;n. No quiero extenderme m&amp;aacute;s por ahora, pero el pr&amp;oacute;ximo d&amp;iacute;a har&amp;eacute; un peque&amp;ntilde;o HelloWorld donde explicar&amp;eacute; en mayor profundidad las herramientas y en el futuro me meter&amp;eacute; con temas m&amp;aacute;s t&amp;eacute;cnicos de Objective-C (el lenguaje de programaci&amp;oacute;n utilizado), arquitectura de Cocoa Touch (el framework sobre el que programamos), APIs, etc.&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
  <entry>
    <id>tag:angelolloqui.com,2005:BlogPost/4</id>
    <published>2010-06-19T15:23:04Z</published>
    <updated>2012-05-12T15:23:04Z</updated>
    <link rel="alternate" type="text/html" href="http://angelolloqui.com/blog/4-Servidores-en-Amazon-con-EC2-y-EBS"/>
    <title>Servidores en Amazon con EC2 y EBS</title>
    <content type="html">&lt;p&gt;
	Llevo ya m&amp;aacute;s de un a&amp;ntilde;o peg&amp;aacute;ndome con Amazon y su servicio AWS. Concretamente, con servidores virtuales EC2, almacenamiento en su sistema S3 y su interconexi&amp;oacute;n con EBS.&lt;br /&gt;
	&lt;br /&gt;
	Hoy me esta tocando hacer una limpieza de una instancia que tengo con un antiguo cliente que resulta que se cay&amp;oacute; recientemente y me ha apetecido compartir una reflexi&amp;oacute;n y as&amp;iacute; escribir la primera entrada t&amp;eacute;cnica (muy light), aunque no tiene nada que ver con dispositivos m&amp;oacute;viles.&lt;br /&gt;
	&lt;br /&gt;
	As&amp;iacute; pues, antes de exponer el grave problema al que me podr&amp;iacute;a haber enfrentado si no hubiese hecho las cosas bien, os expongo un poco las partes de AWS que estoy utilizando (hay m&amp;aacute;s, pero estas son las m&amp;aacute;s comunes):&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;
	- &lt;span style="font-weight:bold;"&gt;EC2&lt;/span&gt; (Elastic Compute Cloud): Este es el servicio de Amazon que simula los servidores virtuales. Su funcionamiento es sencillo, seleccionas una imagen (AMI) de la que partir (puede ser una imagen gen&amp;eacute;rica como una distribuci&amp;oacute;n Ubuntu o una im&amp;aacute;gen muy personalizada en la que tengas multitud de software ya configurado), seleccionas unas caracter&amp;iacute;sticas de tu instancia en funci&amp;oacute;n del RAM, procesador, etc del que quieras disponer y la lanzas. En pocos segundos tendr&amp;aacute;s un servidor virtual con acceso v&amp;iacute;a SSH y con las caracter&amp;iacute;sticas de tu AMI seleccionada. Sobre esta instancia, dado que es a todos los efectos un servidor virtual, puedes instalar el resto de software que desees, as&amp;iacute; como configurar cuentas, permisos,...&lt;br /&gt;
	&lt;br /&gt;
	- &lt;span style="font-weight:bold;"&gt;S3&lt;/span&gt; (Simple Storage Service): Este servicio proporciona un espacio persistente donde almacenar datos. A modo de simplificaci&amp;oacute;n, podemos entenderlo como un disco duro virtual y persistente.&lt;br /&gt;
	&lt;br /&gt;
	- &lt;span style="font-weight:bold;"&gt;EBS&lt;/span&gt; (Elastic Block Storage): Con este servicio podremos interconectar los dos anteriores, simulando que el S3 es una unidad m&amp;aacute;s de nuestra instancia EC2. Quiz&amp;aacute; te est&amp;aacute;s preguntando la necesidad de este servicio. Pues bien, la respuesta es que EC2 por s&amp;iacute; mismo no tiene persistencia de datos! s&amp;iacute; s&amp;iacute;, como lo has oido, las instancias EC2 son instancias virtuales, que tienen su sistema de ficheros como cualquier otro servidor, pero a diferencia de un servidor est&amp;aacute;ndar, este sistema de ficheros es vol&amp;aacute;til, lo que significa que si por alguna raz&amp;oacute;n tienes que terminar con la instancia perder&amp;aacute;s los datos que has introducido desde que lanzaste la instancia a partir de un AMI.&lt;br /&gt;
	&lt;br /&gt;
	- &lt;span style="font-weight:bold;"&gt;Elastic IP&lt;/span&gt;: Este servicio nos permite mapear cualquier instancia con una IP externa y &amp;uacute;nica. Es necesario si queremos que este servidor est&amp;eacute; accesible externamente por ejemplo por un nombre de dominio. La gran ventaja de esto es que al arrancar nuevas instancias podemos seguir usando la misma IP y as&amp;iacute; no tenemos que esperar a que los DNS se refresquen para cambiar de m&amp;aacute;quina (tardan hasta 48h).&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	Y ahora que he comentado las principales partes implicadas, os expongo lo ocurrido: Una instancia que llevaba meses funcionando (y en producci&amp;oacute;n), resulta que ha dejado de funcionar. No s&amp;oacute;lo el servidor web est&amp;aacute; caido, sino que la instancia est&amp;aacute; completamente inaccesible, sin posibilidad de conectarte por SSH, FTP ni similares! Arggghhhh!!&lt;br /&gt;
	&amp;iquest;Qu&amp;eacute; hacemos? pues no nos queda otra que entrar en la consola de administraci&amp;oacute;n de Amazon AWS, arrancar una nueva y apuntar la IP p&amp;uacute;blica a la nueva, pero &amp;iquest;perderemos todos los datos desde el &amp;uacute;ltimo backup? esto ser&amp;iacute;a muy grave porque adem&amp;aacute;s no hacemos backups con toda la frecuencia que deber&amp;iacute;amos. Por otra parte, &amp;iquest;que pasa con el software que instal&amp;eacute; para adaptar mi instancia? &amp;iquest;tendr&amp;eacute; que volver a instalarlo?&lt;br /&gt;
	&lt;br /&gt;
	Bueno, calma, para resolver el primer problema (y m&amp;aacute;s grave) tenemos el EBS. Gracias a este servicio, toda nuestra BD estar&amp;aacute; trabajando en una unidad persistente, que NO habr&amp;aacute; perdido la informaci&amp;oacute;n y que podremos enlazar con la nueva instancia. Os dejo un enlace donde se explica una forma sencilla y clara sobre como montar este tipo de sistemas, moviendo los datos de MySQL a la unidad de EBS:&lt;br /&gt;
	&lt;a href="http://lab.redmallorca.com/servidor-mysql-persistente-sobre-ec2-y-ebs/"&gt;http://lab.redmallorca.com/servidor-mysql-persistente-sobre-ec2-y-ebs/&lt;/a&gt;&lt;br /&gt;
	&lt;br /&gt;
	&amp;iquest;Y el segundo problema? &amp;iquest;tengo que volver a instalar todo el software? pues la respuesta es que tendr&amp;iacute;as que hacerlo, a no ser que hayas sido precavido y hayas generado una nueva AMI a partir de tu instancia una vez configurada. &amp;iquest;Como hacerlo?, de nuevo, os enlazo a un post en donde lo explica muy clarito:&lt;br /&gt;
	&lt;a href="http://lab.redmallorca.com/crea-tu-propio-ami-basado-en-ubuntu-para-ec2/"&gt;http://lab.redmallorca.com/crea-tu-propio-ami-basado-en-ubuntu-para-ec2/&lt;/a&gt;&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	As&amp;iacute; que, para todos los que trabaj&amp;eacute;is con Amazon EC2, ni se os ocurra hacerlo sin contemplar posibles cortes o ca&amp;iacute;das porque ocurren! Mi consejo, aunque tengo poca experiencia, es que una vez instalado todo el software en tu instancia a partir de la AMI p&amp;uacute;blica generes un AMI privada con esta configuraci&amp;oacute;n, posteriormente configures el sistema para que la BD trabaje sobre la unidad EBS, y por &amp;uacute;ltimo, opcionalmente me crear&amp;iacute;a otra AMI privada con todo esto montado. Ojo, esta &amp;uacute;ltima AMI es posible que os de problemas al arrancar, por estar enlazada al EBS (a m&amp;iacute; me los ha dado), por eso os recomiendo que hag&amp;aacute;is la AMI preEBS para poder recuperar todo si ten&amp;eacute;is problemas con esta segunda AMI (solo tendr&amp;iacute;ais que repetir los pasos de montaje de EBS, pero los datos seguir&amp;iacute;an estando ah&amp;iacute; y el software funcionando).&lt;br /&gt;
	&lt;br /&gt;
	&lt;br /&gt;
	As&amp;iacute; que ya sab&amp;eacute;is, haced las cosas bien al principio aunque os lleve un par de horas extras de trabajo y luego no tendr&amp;eacute;is que lamentar las p&amp;eacute;rdidas!&lt;/p&gt;
</content>
    <author>
      <name>Angel G. Olloqui</name>
    </author>
  </entry>
</feed>
